<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>

<#
	var numTypes = new string[]
	{
		"Decimal",
		"Double", 
		"Int16",
		"Int32",
		"Int64",
		"Single"
	};

	string docComment =
			$@"/// <summary>
			/// Searches a sorted collection in an efficient way.
			/// Returns the value before and the value after
			/// if a value to search is in between two values in the list.
			/// Will only return a meaningful result if the collection is sorted.
			/// </summary>
			/// <param name=""sortedCollection""> Not checked for null, for performance. </param>";
#>

using System;
using System.Collections.Generic;
using System.Linq;
using JetBrains.Annotations;
// ReSharper disable BuiltInTypeReferenceStyle
#pragma warning disable IDE0049 // Simplify Names

namespace JJ.Framework.Collections
{
    [PublicAPI]
    public static class CollectionExtensions_BinarySearchInexact
    {
		<# foreach (string numType in numTypes) { #>
			
			// <#=numType#>

			<#=docComment#>
			[Obsolete("Consider not using this. It only approximates the correct result.")]
			public static (<#=numType#> valueBefore, <#=numType#> valueAfter) BinarySearchInexact(this IEnumerable<<#=numType#>> sortedCollection, <#=numType#> input)
				=> CollectionHelper.BinarySearchInexact(sortedCollection.ToArray(), input);

			<#=docComment#>
			[Obsolete("Consider not using this. It only approximates the correct result.")]
			public static (<#=numType#> valueBefore, <#=numType#> valueAfter) BinarySearchInexact(this <#=numType#>[] sortedCollection, <#=numType#> input)
				=> CollectionHelper.BinarySearchInexact(sortedCollection, input);

			<#=docComment#>
			[Obsolete("Consider not using this. It only approximates the correct result.")]
			public static (<#=numType#> valueBefore, <#=numType#> valueAfter) BinarySearchInexact(
				this IEnumerable<<#=numType#>> sortedCollection,
				int halfCount,
				<#=numType#> min,
				<#=numType#> max,
				<#=numType#> input)
				=> CollectionHelper.BinarySearchInexact(sortedCollection.ToArray(), halfCount, min, max, input);

			<#=docComment#>
			[Obsolete("Consider not using this. It only approximates the correct result.")]
			public static (<#=numType#> valueBefore, <#=numType#> valueAfter) BinarySearchInexact(
				this <#=numType#>[] sortedCollection,
				int halfCount,
				<#=numType#> min,
				<#=numType#> max,
				<#=numType#> input)
				=> CollectionHelper.BinarySearchInexact(sortedCollection, halfCount, min, max, input);
	<# } #>
    }
}
