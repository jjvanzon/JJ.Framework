

namespace JJ.Framework.Existence.Core;

internal static partial class ExistenceUtility
{
    /// <inheritdoc cref="_has"/>
    public static bool HasArray            <T>([NotNullWhen(true)] T[]                   ? coll) => coll is { Length          : > 0   };
    /// <inheritdoc cref="_has"/>
    public static bool HasColl                ([NotNullWhen(true)] ICollection           ? coll) => coll is { Count           : > 0   };
    /// <inheritdoc cref="_has"/>
    public static bool HasCollT            <T>([NotNullWhen(true)] ICollection<T>        ? coll) => coll is { Count           : > 0   };
    /// <inheritdoc cref="_has"/>
    public static bool HasReadOnlyColl     <T>([NotNullWhen(true)] IReadOnlyCollection<T>? coll) => coll is { Count           : > 0   };
    /// <inheritdoc cref="_has"/>
    public static bool HasLookup         <T,U>([NotNullWhen(true)] ILookup<T, U>         ? coll) => coll is { Count           : > 0   };
    /// <inheritdoc cref="_has"/>
    public static bool HasEnumerable       <T>([NotNullWhen(true)] IEnumerable<T>        ? coll) => coll?.Any() == true;
    /// <inheritdoc cref="_has"/>
    public static bool Has_ImmutableArray  <T>([NotNullWhen(true)] ref ImmutableArray<T>   coll) => coll is { IsDefaultOrEmpty: false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_ImmutableArray  <T>([NotNullWhen(true)] ref ImmutableArray<T> ? coll) => coll is { IsDefaultOrEmpty: false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_ImmutableStack  <T>([NotNullWhen(true)] IImmutableStack<T>    ? coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_ImmutableQueue  <T>([NotNullWhen(true)] IImmutableQueue<T>    ? coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_Memory          <T>([NotNullWhen(true)] Memory<T>               coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_Memory          <T>([NotNullWhen(true)] Memory<T>             ? coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_Span            <T>([NotNullWhen(true)] Span<T>                 coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_ReadOnlyMemory  <T>([NotNullWhen(true)] ReadOnlyMemory<T>       coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_ReadOnlyMemory  <T>([NotNullWhen(true)] ReadOnlyMemory<T>     ? coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_ReadOnlySpan    <T>([NotNullWhen(true)] ReadOnlySpan<T>         coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_ReadOnlySequence<T>([NotNullWhen(true)] ReadOnlySequence<T>     coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_ReadOnlySequence<T>([NotNullWhen(true)] ReadOnlySequence<T>   ? coll) => coll is { IsEmpty         : false };
    /// <inheritdoc cref="_has"/>
    public static bool Has_StringDictionary   ([NotNullWhen(true)] StringDictionary      ? coll) => coll is { Count           : > 0   };
    #if NET6_0_OR_GREATER
    /// <inheritdoc cref="_has"/>
    public static bool Has_PriorityQueue< T,U>([NotNullWhen(true)] PriorityQueue<T, U>   ? coll) => coll is { Count           : > 0   };
    #endif
}

public static partial class FilledInHelper
{
    // Has (Static)
    
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      T[]                                        ? coll)                   => HasArray(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IList<T>                                   ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ISet<T>                                    ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      IDictionary<T,U>                           ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ICollection<T>                             ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ILookup<T,U>                               ? coll)                   => HasLookup(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IEnumerable<T>                             ? coll)                   => HasEnumerable(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      List<T>                                    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      HashSet<T>                                 ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      Stack<T>                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      Queue<T>                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      LinkedList<T>                              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      SortedList<T,U>                            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      SortedSet<T>                               ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      Dictionary<T,U>                            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      Dictionary<T,U>.KeyCollection              ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      Dictionary<T,U>.ValueCollection            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IImmutableList<T>                          ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IImmutableSet<T>                           ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IImmutableStack<T>                         ? coll)                   => Has_ImmutableStack(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IImmutableQueue<T>                         ? coll)                   => Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      IImmutableDictionary<T,U>                  ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableArray<T>                            coll)                   => Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableArray<T>                          ? coll)                   => Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableArray<T>.Builder                  ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableList<T>                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableList<T>.Builder                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableHashSet<T>                        ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableHashSet<T>.Builder                ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableStack<T>                          ? coll)                   => Has_ImmutableStack(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableQueue<T>                          ? coll)                   => Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ImmutableDictionary<T,U>                   ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ImmutableDictionary<T,U>.Builder           ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableSortedSet<T>                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ImmutableSortedSet<T>.Builder              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ImmutableSortedDictionary<T,U>             ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ImmutableSortedDictionary<T,U>.Builder     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IReadOnlyCollection<T>                     ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IReadOnlyList<T>                           ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      IReadOnlyDictionary<T,U>                   ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ReadOnlyCollection<T>                      ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ReadOnlyDictionary<T,U>                    ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ReadOnlyDictionary<T,U>.KeyCollection      ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ReadOnlyDictionary<T,U>.ValueCollection    ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ArraySegment<T>                              coll)                   => HasCollT   (coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ArraySegment<T>                            ? coll)                   => HasCollT<T>(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      Memory<T>                                    coll)                   => Has_Memory(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      Memory<T>                                  ? coll)                   => Has_Memory(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      Span<T>                                      coll)                   => Has_Span(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ReadOnlyMemory<T>                            coll)                   => Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ReadOnlyMemory<T>                          ? coll)                   => Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ReadOnlySpan<T>                              coll)                   => Has_ReadOnlySpan(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ReadOnlySequence<T>                          coll)                   => Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ReadOnlySequence<T>                        ? coll)                   => Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ConcurrentBag<T>                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ConcurrentQueue<T>                         ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ConcurrentStack<T>                         ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      ConcurrentDictionary<T,U>                  ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      BlockingCollection<T>                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IProducerConsumerCollection<T>             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      SortedDictionary<T,U>                      ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      SortedDictionary<T,U>.KeyCollection        ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      SortedDictionary<T,U>.ValueCollection      ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      Collection<T>                              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      KeyedCollection<T,U>                       ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ObservableCollection<T>                    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ReadOnlyObservableCollection<T>            ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      ArrayList                                  ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      BitArray                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      CollectionBase                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      DictionaryBase                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      Hashtable                                  ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      Queue                                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      ReadOnlyCollectionBase                     ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      SortedList                                 ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      Stack                                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      HybridDictionary                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      ListDictionary                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      NameObjectCollectionBase                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      NameObjectCollectionBase.KeysCollection    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      NameValueCollection                        ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      OrderedDictionary                          ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      StringCollection                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      StringDictionary                           ? coll)                   => Has_StringDictionary(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has          ([NotNullWhen(true )]      IOrderedDictionary                         ? coll)                   => HasColl(coll);
    #if NET9_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      OrderedDictionary<T,U>                     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      OrderedDictionary<T,U>.KeyCollection       ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      OrderedDictionary<T,U>.ValueCollection     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      IReadOnlySet<T>                            ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      ReadOnlySet<T>                             ? coll)                   => HasReadOnlyColl(coll);
    #endif
    #if NET8_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T>  ([NotNullWhen(true )]      FrozenSet<T>                               ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      FrozenDictionary<T, U>                     ? coll) where T : notnull => HasColl(coll);
    #endif                                                                                                                          
    #if NET6_0_OR_GREATER
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      PriorityQueue<T,U>                         ? coll)                   => Has_PriorityQueue(coll);
    /// <inheritdoc cref="_has"/>
    public static bool Has     <T,U>([NotNullWhen(true )]      PriorityQueue<T,U>.UnorderedItemsCollection? coll)                   => HasColl(coll);
    #endif

    // FilledIn (Static)
    
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      T[]                                        ? coll)                   => HasArray(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IList<T>                                   ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ISet<T>                                    ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      IDictionary<T,U>                           ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ICollection<T>                             ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ILookup<T,U>                               ? coll)                   => HasLookup(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IEnumerable<T>                             ? coll)                   => HasEnumerable(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      List<T>                                    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      HashSet<T>                                 ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      Stack<T>                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      Queue<T>                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      LinkedList<T>                              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      SortedList<T,U>                            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      SortedSet<T>                               ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      Dictionary<T,U>                            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      Dictionary<T,U>.KeyCollection              ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      Dictionary<T,U>.ValueCollection            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IImmutableList<T>                          ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IImmutableSet<T>                           ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IImmutableStack<T>                         ? coll)                   => Has_ImmutableStack(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IImmutableQueue<T>                         ? coll)                   => Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      IImmutableDictionary<T,U>                  ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableArray<T>                            coll)                   => Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableArray<T>                          ? coll)                   => Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableArray<T>.Builder                  ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableList<T>                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableList<T>.Builder                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableHashSet<T>                        ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableHashSet<T>.Builder                ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableStack<T>                          ? coll)                   => Has_ImmutableStack(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableQueue<T>                          ? coll)                   => Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ImmutableDictionary<T,U>                   ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ImmutableDictionary<T,U>.Builder           ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableSortedSet<T>                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ImmutableSortedSet<T>.Builder              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ImmutableSortedDictionary<T,U>             ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ImmutableSortedDictionary<T,U>.Builder     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IReadOnlyCollection<T>                     ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IReadOnlyList<T>                           ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      IReadOnlyDictionary<T,U>                   ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ReadOnlyCollection<T>                      ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ReadOnlyDictionary<T,U>                    ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ReadOnlyDictionary<T,U>.KeyCollection      ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ReadOnlyDictionary<T,U>.ValueCollection    ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ArraySegment<T>                              coll)                   => HasCollT   (coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ArraySegment<T>                            ? coll)                   => HasCollT<T>(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      Memory<T>                                    coll)                   => Has_Memory(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      Memory<T>                                  ? coll)                   => Has_Memory(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      Span<T>                                      coll)                   => Has_Span(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ReadOnlyMemory<T>                            coll)                   => Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ReadOnlyMemory<T>                          ? coll)                   => Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ReadOnlySpan<T>                              coll)                   => Has_ReadOnlySpan(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ReadOnlySequence<T>                          coll)                   => Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ReadOnlySequence<T>                        ? coll)                   => Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ConcurrentBag<T>                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ConcurrentQueue<T>                         ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ConcurrentStack<T>                         ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      ConcurrentDictionary<T,U>                  ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      BlockingCollection<T>                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IProducerConsumerCollection<T>             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      SortedDictionary<T,U>                      ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      SortedDictionary<T,U>.KeyCollection        ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      SortedDictionary<T,U>.ValueCollection      ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      Collection<T>                              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      KeyedCollection<T,U>                       ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ObservableCollection<T>                    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ReadOnlyObservableCollection<T>            ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      ArrayList                                  ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      BitArray                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      CollectionBase                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      DictionaryBase                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      Hashtable                                  ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      Queue                                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      ReadOnlyCollectionBase                     ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      SortedList                                 ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      Stack                                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      HybridDictionary                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      ListDictionary                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      NameObjectCollectionBase                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      NameObjectCollectionBase.KeysCollection    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      NameValueCollection                        ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      OrderedDictionary                          ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      StringCollection                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      StringDictionary                           ? coll)                   => Has_StringDictionary(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )]      IOrderedDictionary                         ? coll)                   => HasColl(coll);
    #if NET9_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      OrderedDictionary<T,U>                     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      OrderedDictionary<T,U>.KeyCollection       ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      OrderedDictionary<T,U>.ValueCollection     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      IReadOnlySet<T>                            ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      ReadOnlySet<T>                             ? coll)                   => HasReadOnlyColl(coll);
    #endif
    #if NET8_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )]      FrozenSet<T>                               ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      FrozenDictionary<T, U>                     ? coll) where T : notnull => HasColl(coll);
    #endif                                                                                                                          
    #if NET6_0_OR_GREATER
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      PriorityQueue<T,U>                         ? coll)                   => Has_PriorityQueue(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )]      PriorityQueue<T,U>.UnorderedItemsCollection? coll)                   => HasColl(coll);
    #endif
    
    // IsNully (Static)
    
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      T[]                                        ? coll)                   => !HasArray(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IList<T>                                   ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ISet<T>                                    ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      IDictionary<T,U>                           ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ICollection<T>                             ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ILookup<T,U>                               ? coll)                   => !HasLookup(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IEnumerable<T>                             ? coll)                   => !HasEnumerable(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      List<T>                                    ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      HashSet<T>                                 ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      Stack<T>                                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      Queue<T>                                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      LinkedList<T>                              ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      SortedList<T,U>                            ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      SortedSet<T>                               ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      Dictionary<T,U>                            ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      Dictionary<T,U>.KeyCollection              ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      Dictionary<T,U>.ValueCollection            ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IImmutableList<T>                          ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IImmutableSet<T>                           ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IImmutableStack<T>                         ? coll)                   => !Has_ImmutableStack(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IImmutableQueue<T>                         ? coll)                   => !Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      IImmutableDictionary<T,U>                  ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableArray<T>                            coll)                   => !Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableArray<T>                          ? coll)                   => !Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableArray<T>.Builder                  ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableList<T>                           ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableList<T>.Builder                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableHashSet<T>                        ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableHashSet<T>.Builder                ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableStack<T>                          ? coll)                   => !Has_ImmutableStack(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableQueue<T>                          ? coll)                   => !Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ImmutableDictionary<T,U>                   ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ImmutableDictionary<T,U>.Builder           ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableSortedSet<T>                      ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ImmutableSortedSet<T>.Builder              ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ImmutableSortedDictionary<T,U>             ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ImmutableSortedDictionary<T,U>.Builder     ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IReadOnlyCollection<T>                     ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IReadOnlyList<T>                           ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      IReadOnlyDictionary<T,U>                   ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ReadOnlyCollection<T>                      ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ReadOnlyDictionary<T,U>                    ? coll) where T : notnull => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ReadOnlyDictionary<T,U>.KeyCollection      ? coll) where T : notnull => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ReadOnlyDictionary<T,U>.ValueCollection    ? coll) where T : notnull => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ArraySegment<T>                              coll)                   => !HasCollT   (coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ArraySegment<T>                            ? coll)                   => !HasCollT<T>(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      Memory<T>                                    coll)                   => !Has_Memory(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      Memory<T>                                  ? coll)                   => !Has_Memory(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      Span<T>                                      coll)                   => !Has_Span(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ReadOnlyMemory<T>                            coll)                   => !Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ReadOnlyMemory<T>                          ? coll)                   => !Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ReadOnlySpan<T>                              coll)                   => !Has_ReadOnlySpan(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ReadOnlySequence<T>                          coll)                   => !Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ReadOnlySequence<T>                        ? coll)                   => !Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ConcurrentBag<T>                           ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ConcurrentQueue<T>                         ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ConcurrentStack<T>                         ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      ConcurrentDictionary<T,U>                  ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      BlockingCollection<T>                      ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IProducerConsumerCollection<T>             ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      SortedDictionary<T,U>                      ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      SortedDictionary<T,U>.KeyCollection        ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      SortedDictionary<T,U>.ValueCollection      ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      Collection<T>                              ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      KeyedCollection<T,U>                       ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ObservableCollection<T>                    ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ReadOnlyObservableCollection<T>            ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      ArrayList                                  ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      BitArray                                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      CollectionBase                             ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      DictionaryBase                             ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      Hashtable                                  ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      Queue                                      ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      ReadOnlyCollectionBase                     ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      SortedList                                 ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      Stack                                      ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      HybridDictionary                           ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      ListDictionary                             ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      NameObjectCollectionBase                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      NameObjectCollectionBase.KeysCollection    ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      NameValueCollection                        ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      OrderedDictionary                          ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      StringCollection                           ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      StringDictionary                           ? coll)                   => !Has_StringDictionary(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)]      IOrderedDictionary                         ? coll)                   => !HasColl(coll);
    #if NET9_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      OrderedDictionary<T,U>                     ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      OrderedDictionary<T,U>.KeyCollection       ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      OrderedDictionary<T,U>.ValueCollection     ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      IReadOnlySet<T>                            ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      ReadOnlySet<T>                             ? coll)                   => !HasReadOnlyColl(coll);
    #endif
    #if NET8_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)]      FrozenSet<T>                               ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      FrozenDictionary<T, U>                     ? coll) where T : notnull => !HasColl(coll);
    #endif                                                                                                                          
    #if NET6_0_OR_GREATER
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      PriorityQueue<T,U>                         ? coll)                   => !Has_PriorityQueue(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)]      PriorityQueue<T,U>.UnorderedItemsCollection? coll)                   => !HasColl(coll);
    #endif
}

public static partial class FilledInExtensions
{
    // FilledIn (Extensions)
    
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this T[]                                        ? coll)                   => HasArray(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IList<T>                                   ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ISet<T>                                    ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this IDictionary<T,U>                           ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ICollection<T>                             ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ILookup<T,U>                               ? coll)                   => HasLookup(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IEnumerable<T>                             ? coll)                   => HasEnumerable(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this List<T>                                    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this HashSet<T>                                 ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this Stack<T>                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this Queue<T>                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this LinkedList<T>                              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this SortedList<T,U>                            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this SortedSet<T>                               ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this Dictionary<T,U>                            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this Dictionary<T,U>.KeyCollection              ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this Dictionary<T,U>.ValueCollection            ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IImmutableList<T>                          ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IImmutableSet<T>                           ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IImmutableStack<T>                         ? coll)                   => Has_ImmutableStack(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IImmutableQueue<T>                         ? coll)                   => Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this IImmutableDictionary<T,U>                  ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableArray<T>                            coll)                   => Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableArray<T>                          ? coll)                   => Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableArray<T>.Builder                  ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableList<T>                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableList<T>.Builder                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableHashSet<T>                        ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableHashSet<T>.Builder                ? coll)                   => HasCollT(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableStack<T>                          ? coll)                   => Has_ImmutableStack(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableQueue<T>                          ? coll)                   => Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ImmutableDictionary<T,U>                   ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ImmutableDictionary<T,U>.Builder           ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableSortedSet<T>                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ImmutableSortedSet<T>.Builder              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ImmutableSortedDictionary<T,U>             ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ImmutableSortedDictionary<T,U>.Builder     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IReadOnlyCollection<T>                     ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IReadOnlyList<T>                           ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this IReadOnlyDictionary<T,U>                   ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ReadOnlyCollection<T>                      ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ReadOnlyDictionary<T,U>                    ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ReadOnlyDictionary<T,U>.KeyCollection      ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ReadOnlyDictionary<T,U>.ValueCollection    ? coll) where T : notnull => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ArraySegment<T>                              coll)                   => HasCollT   (coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ArraySegment<T>                            ? coll)                   => HasCollT<T>(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this Memory<T>                                    coll)                   => Has_Memory(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this Memory<T>                                  ? coll)                   => Has_Memory(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this Span<T>                                      coll)                   => Has_Span(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ReadOnlyMemory<T>                            coll)                   => Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ReadOnlyMemory<T>                          ? coll)                   => Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ReadOnlySpan<T>                              coll)                   => Has_ReadOnlySpan(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ReadOnlySequence<T>                          coll)                   => Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ReadOnlySequence<T>                        ? coll)                   => Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ConcurrentBag<T>                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ConcurrentQueue<T>                         ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ConcurrentStack<T>                         ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this ConcurrentDictionary<T,U>                  ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this BlockingCollection<T>                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IProducerConsumerCollection<T>             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this SortedDictionary<T,U>                      ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this SortedDictionary<T,U>.KeyCollection        ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this SortedDictionary<T,U>.ValueCollection      ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this Collection<T>                              ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this KeyedCollection<T,U>                       ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ObservableCollection<T>                    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ReadOnlyObservableCollection<T>            ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this ArrayList                                  ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this BitArray                                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this CollectionBase                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this DictionaryBase                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this Hashtable                                  ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this Queue                                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this ReadOnlyCollectionBase                     ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this SortedList                                 ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this Stack                                      ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this HybridDictionary                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this ListDictionary                             ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this NameObjectCollectionBase                   ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this NameObjectCollectionBase.KeysCollection    ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this NameValueCollection                        ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this OrderedDictionary                          ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this StringCollection                           ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this StringDictionary                           ? coll)                   => Has_StringDictionary(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn     ([NotNullWhen(true )] this IOrderedDictionary                         ? coll)                   => HasColl(coll);
    #if NET9_0_OR_GREATER
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this OrderedDictionary<T,U>                     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this OrderedDictionary<T,U>.KeyCollection       ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this OrderedDictionary<T,U>.ValueCollection     ? coll) where T : notnull => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this IReadOnlySet<T>                            ? coll)                   => HasReadOnlyColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this ReadOnlySet<T>                             ? coll)                   => HasReadOnlyColl(coll);
    #endif
    #if NET8_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T>  ([NotNullWhen(true )] this FrozenSet<T>                               ? coll)                   => HasColl(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this FrozenDictionary<T, U>                     ? coll) where T : notnull => HasColl(coll);
    #endif                                                                                                                          
    #if NET6_0_OR_GREATER
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this PriorityQueue<T,U>                         ? coll)                   => Has_PriorityQueue(coll);
    /// <inheritdoc cref="_filledin"/>
    public static bool FilledIn<T,U>([NotNullWhen(true )] this PriorityQueue<T,U>.UnorderedItemsCollection? coll)                   => HasColl(coll);
    #endif
    
    // IsNully (Extensions)
    
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this T[]                                        ? coll)                   => !HasArray(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IList<T>                                   ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ISet<T>                                    ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this IDictionary<T,U>                           ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ICollection<T>                             ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ILookup<T,U>                               ? coll)                   => !HasLookup(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IEnumerable<T>                             ? coll)                   => !HasEnumerable(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this List<T>                                    ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this HashSet<T>                                 ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this Stack<T>                                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this Queue<T>                                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this LinkedList<T>                              ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this SortedList<T,U>                            ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this SortedSet<T>                               ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this Dictionary<T,U>                            ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this Dictionary<T,U>.KeyCollection              ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this Dictionary<T,U>.ValueCollection            ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IImmutableList<T>                          ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IImmutableSet<T>                           ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IImmutableStack<T>                         ? coll)                   => !Has_ImmutableStack(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IImmutableQueue<T>                         ? coll)                   => !Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this IImmutableDictionary<T,U>                  ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableArray<T>                            coll)                   => !Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableArray<T>                          ? coll)                   => !Has_ImmutableArray(ref coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableArray<T>.Builder                  ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableList<T>                           ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableList<T>.Builder                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableHashSet<T>                        ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableHashSet<T>.Builder                ? coll)                   => !HasCollT(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableStack<T>                          ? coll)                   => !Has_ImmutableStack(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableQueue<T>                          ? coll)                   => !Has_ImmutableQueue(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ImmutableDictionary<T,U>                   ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ImmutableDictionary<T,U>.Builder           ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableSortedSet<T>                      ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ImmutableSortedSet<T>.Builder              ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ImmutableSortedDictionary<T,U>             ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ImmutableSortedDictionary<T,U>.Builder     ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IReadOnlyCollection<T>                     ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IReadOnlyList<T>                           ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this IReadOnlyDictionary<T,U>                   ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ReadOnlyCollection<T>                      ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ReadOnlyDictionary<T,U>                    ? coll) where T : notnull => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ReadOnlyDictionary<T,U>.KeyCollection      ? coll) where T : notnull => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ReadOnlyDictionary<T,U>.ValueCollection    ? coll) where T : notnull => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ArraySegment<T>                              coll)                   => !HasCollT   (coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ArraySegment<T>                            ? coll)                   => !HasCollT<T>(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this Memory<T>                                    coll)                   => !Has_Memory(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this Memory<T>                                  ? coll)                   => !Has_Memory(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this Span<T>                                      coll)                   => !Has_Span(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ReadOnlyMemory<T>                            coll)                   => !Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ReadOnlyMemory<T>                          ? coll)                   => !Has_ReadOnlyMemory(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ReadOnlySpan<T>                              coll)                   => !Has_ReadOnlySpan(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ReadOnlySequence<T>                          coll)                   => !Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ReadOnlySequence<T>                        ? coll)                   => !Has_ReadOnlySequence(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ConcurrentBag<T>                           ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ConcurrentQueue<T>                         ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ConcurrentStack<T>                         ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this ConcurrentDictionary<T,U>                  ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this BlockingCollection<T>                      ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IProducerConsumerCollection<T>             ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this SortedDictionary<T,U>                      ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this SortedDictionary<T,U>.KeyCollection        ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this SortedDictionary<T,U>.ValueCollection      ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this Collection<T>                              ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this KeyedCollection<T,U>                       ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ObservableCollection<T>                    ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ReadOnlyObservableCollection<T>            ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this ArrayList                                  ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this BitArray                                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this CollectionBase                             ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this DictionaryBase                             ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this Hashtable                                  ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this Queue                                      ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this ReadOnlyCollectionBase                     ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this SortedList                                 ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this Stack                                      ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this HybridDictionary                           ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this ListDictionary                             ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this NameObjectCollectionBase                   ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this NameObjectCollectionBase.KeysCollection    ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this NameValueCollection                        ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this OrderedDictionary                          ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this StringCollection                           ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this StringDictionary                           ? coll)                   => !Has_StringDictionary(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully      ([NotNullWhen(false)] this IOrderedDictionary                         ? coll)                   => !HasColl(coll);
    #if NET9_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this OrderedDictionary<T,U>                     ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this OrderedDictionary<T,U>.KeyCollection       ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this OrderedDictionary<T,U>.ValueCollection     ? coll) where T : notnull => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this IReadOnlySet<T>                            ? coll)                   => !HasReadOnlyColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this ReadOnlySet<T>                             ? coll)                   => !HasReadOnlyColl(coll);
    #endif
    #if NET8_0_OR_GREATER                                                                                 
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T>  ([NotNullWhen(false)] this FrozenSet<T>                               ? coll)                   => !HasColl(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this FrozenDictionary<T, U>                     ? coll) where T : notnull => !HasColl(coll);
    #endif                                                                                                                          
    #if NET6_0_OR_GREATER
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this PriorityQueue<T,U>                         ? coll)                   => !Has_PriorityQueue(coll);
    /// <inheritdoc cref="_isnully"/>
    public static bool IsNully <T,U>([NotNullWhen(false)] this PriorityQueue<T,U>.UnorderedItemsCollection? coll)                   => !HasColl(coll);
    #endif
}