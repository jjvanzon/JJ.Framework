<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Contains_WithName_AndValue" xml:space="preserve">
    <value>{0} contains {1}.</value>
    <comment>{0} = property, {1} = value</comment>
  </data>
  <data name="LengthExceeded_WithName_AndLength" xml:space="preserve">
    <value>{0} is longer than {1} characters.</value>
    <comment>{0} = property, {1} = max length</comment>
  </data>
  <data name="FileAlreadyExists_WithFilePath" xml:space="preserve">
    <value>File '{0}' already exists.</value>
    <comment>{0} = file path</comment>
  </data>
  <data name="FileNotFound_WithFilePath" xml:space="preserve">
    <value>File '{0}' not found.</value>
    <comment>{0} = file path</comment>
  </data>
  <data name="FolderAlreadyExists_WithFolderPAth" xml:space="preserve">
    <value>Folder '{0}' already exists.</value>
    <comment>{0} = folder path</comment>
  </data>
  <data name="FolderNotFound_WithFolderPath" xml:space="preserve">
    <value>Folder '{0}' not found.</value>
    <comment>{0} = folder path</comment>
  </data>
  <data name="GreaterThanOrEqual_WithName_AndLimit" xml:space="preserve">
    <value>{0} should be less than {1}.</value>
    <comment>{0} = property, {1} = limit</comment>
  </data>
  <data name="GreaterThan_WithName_AndLimit" xml:space="preserve">
    <value>{0} is above {1}.</value>
    <comment>{0} = property, {1} = limit</comment>
  </data>
  <data name="HasNulls_WithName" xml:space="preserve">
    <value>{0} has empty values.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="InvalidIndex_WithName" xml:space="preserve">
    <value>{0} has an invalid number.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="Invalid_WithName" xml:space="preserve">
    <value>{0} is invalid.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="IsBrokenNumber_WithName" xml:space="preserve">
    <value>{0} is a broken number.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="IsEmpty_WithName" xml:space="preserve">
    <value>{0} is empty.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="IsEqual_WithName_AndValue" xml:space="preserve">
    <value>{0} is {1}.</value>
    <comment>{0} = property, {1} = value</comment>
  </data>
  <data name="IsFilledIn_WithName" xml:space="preserve">
    <value>{0} should not be filled in.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="IsInfinity_WithName" xml:space="preserve">
    <value>{0} is infinite.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="IsInList_WithName" xml:space="preserve">
    <value>{0} is in the list of disallowed values.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="IsInteger_WithName" xml:space="preserve">
    <value>{0} is not an integer number.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="IsNaN_WithName" xml:space="preserve">
    <value>{0} is not a number.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="IsOfType_WithName_AndTypeName" xml:space="preserve">
    <value>{0} is of type {1}.</value>
    <comment>{0} = property, {1} = type name</comment>
  </data>
  <data name="IsZero_WithName" xml:space="preserve">
    <value>{0} is zero.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="LessThanOrEqual_WithName_AndLimit" xml:space="preserve">
    <value>{0} should be more than {1}.</value>
    <comment>{0} = property, {1} = limit</comment>
  </data>
  <data name="LessThan_WithName_AndLimit" xml:space="preserve">
    <value>{0} is below {1}.</value>
    <comment>{0} = property, {1} = limit</comment>
  </data>
  <data name="NotBrokenNumber_WithName" xml:space="preserve">
    <value>{0} is not a broken number.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotContains_WithName_AndValue" xml:space="preserve">
    <value>{0} does not contain {1}.</value>
    <comment>{0} = property, {1} = value</comment>
  </data>
  <data name="NotEmpty_WithName_Singular" xml:space="preserve">
    <value>{0} is not empty.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotEqual_WithName_AndValue" xml:space="preserve">
    <value>{0} is not {1}.</value>
    <comment>{0} = property, {1} = value</comment>
  </data>
  <data name="NotFilledIn_WithName" xml:space="preserve">
    <value>{0} is not filled in.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotInList_WithName" xml:space="preserve">
    <value>{0} is not one of the allowed items.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotInList_WithName_AndAllowedValues" xml:space="preserve">
    <value>{0} should have one of the values: {1}.</value>
    <comment>{0} = property, {1} = allowed items</comment>
  </data>
  <data name="NotInteger_WithName" xml:space="preserve">
    <value>{0} is not an integer number.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotOfType_WithName_AndTypeName" xml:space="preserve">
    <value>{0} is not of type {1}.</value>
    <comment>{0} = property, {1} = type name</comment>
  </data>
  <data name="NotUnique_WithName_Singular" xml:space="preserve">
    <value>{0} is not unique.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="Exists_WithName" xml:space="preserve">
    <value>{0} should not exist.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotExists_WithName" xml:space="preserve">
    <value>{0} does not exist.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotUnique_WithName_Plural" xml:space="preserve">
    <value>{0} are not unique.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotInList_WithName_AndValue" xml:space="preserve">
    <value>{0} {1} is not one of the allowed items.</value>
    <comment>{0} = property, {1} = item / value</comment>
  </data>
  <data name="NotInList_WithName_AndValue_AndAllowedValues" xml:space="preserve">
    <value>{0} {1} not allowed. Allowed items: {2}.</value>
    <comment>{0} = property, {1} = value, {2} = allowed items</comment>
  </data>
  <data name="NotExists_WithName_AndValue" xml:space="preserve">
    <value>{0} {1} does not exist.</value>
    <comment>{0} = property, {1} = value</comment>
  </data>
  <data name="InvalidChoice_WithName" xml:space="preserve">
    <value>{0} is an invalid choice.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotBoth_WithTwoNames" xml:space="preserve">
    <value>{0} or {1} can be filled in, but not both at the same time.</value>
    <comment>{0} = first property, {1} = second property</comment>
  </data>
  <data name="NotUnique_WithName_AndValue_Singular" xml:space="preserve">
    <value>{0} {1} is not unique.</value>
    <comment>{0} = property, {1} = value</comment>
  </data>
  <data name="NotUnique_WithName_AndDuplicateValues_Plural" xml:space="preserve">
    <value>{0} are not unique. Duplicates: {1}.</value>
    <comment>{0} = name plural, {1} = comma separated list of duplicate values</comment>
  </data>
  <data name="NotUnique_WithName_AndDuplicateValues_Singular" xml:space="preserve">
    <value>{0} is not unique. Duplicates: {1}.</value>
    <comment>{0} = name singular, {1} = comma separated list of duplicate values</comment>
  </data>
  <data name="AreEmpty_WithName" xml:space="preserve">
    <value>{0} are empty.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotEmpty_WithName_Plural" xml:space="preserve">
    <value>{0} are not empty.</value>
    <comment>{0} = property</comment>
  </data>
  <data name="NotFilledIn" xml:space="preserve">
    <value>Not filled in.</value>
  </data>
</root>