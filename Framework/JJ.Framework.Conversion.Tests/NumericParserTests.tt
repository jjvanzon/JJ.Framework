<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Reflection" #>
<#@ output extension=".cs" #>

<#
	string[] numericTypeNames = { "Decimal", "Double", "Int16", "Int32", "Int64", "Single"};
#>

using System;
using System.Globalization;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace JJ.Framework.Conversion.Tests
{
	<# foreach (string numType in numericTypeNames) { #>

		public partial class <#= numType #>ParserTests
		{
			protected override bool TryParse(string str, out <#= numType #>? result) 
				=> <#= numType #>Parser.TryParse(str, out result);

			protected override bool TryParse(string str, NumberStyles styles, out <#= numType #>? result) 
				=> <#= numType #>Parser.TryParse(str, styles, out result);

			protected override bool TryParse(string str, IFormatProvider provider, out <#= numType #>? result) 
				=> <#= numType #>Parser.TryParse(str, provider, out result);

			protected override bool TryParse(string str, IFormatProvider provider, out <#= numType #> result) 
				=> <#= numType #>Parser.TryParse(str, provider, out result);

			protected override bool TryParse(string str, NumberStyles styles, IFormatProvider provider, out <#= numType #>? result) 
				=> <#= numType #>Parser.TryParse(str, styles, provider, out result);

			protected override <#= numType #>? ParseNullable(string str) 
				=> <#= numType #>Parser.ParseNullable(str);

			protected override <#= numType #>? ParseNullable(string str, NumberStyles styles) 
				=> <#= numType #>Parser.ParseNullable(str, styles);

			protected override <#= numType #>? ParseNullable(string str, IFormatProvider provider) 
				=> <#= numType #>Parser.ParseNullable(str, provider);

			protected override <#= numType #>? ParseNullable(string str, NumberStyles styles, IFormatProvider provider) 
				=> <#= numType #>Parser.ParseNullable(str, styles, provider);
				
			protected override NumberStyles GetDefaultNumberStyles() => <#= numType #>Parser.DEFAULT_NUMBER_STYLES;

			[TestMethod]
			public void Test_<#= numType #>Parser_DEFAULT_NUMBER_STYLES() => Test_DEFAULT_NUMBER_STYLES();
				
			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_NotNullable_HasValue_WithFormatProvider() => Test_TryParse_NotNullable_HasValue_WithFormatProvider();
				
			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_NotNullable_IsWhiteSpace_WithFormatProvider() => Test_TryParse_NotNullable_IsWhiteSpace_WithFormatProvider();
				
			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_NotNullable_IsInvalidNumber_WithFormatProvider() => Test_TryParse_NotNullable_IsInvalidNumber_WithFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_HasValue() => Test_TryParse_Nullable_HasValue();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_IsNull() => Test_TryParse_Nullable_IsNull();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_IsInvalid() => Test_TryParse_Nullable_IsInvalid();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_HasValue_WithNumberStyles() => Test_TryParse_Nullable_HasValue_WithNumberStyles();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_IsNull_WithNumberStyles() => Test_TryParse_Nullable_IsNull_WithNumberStyles();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_IsInvalid_WithNumberStyles() => Test_TryParse_Nullable_IsInvalid_WithNumberStyles();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_HasValue_WithFormatProvider() 
				=> Test_TryParse_Nullable_HasValue_WithFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_IsNull_WithFormatProvider() 
				=> Test_TryParse_Nullable_IsNull_WithFormatProvider();
				
			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_IsInvalid_WithFormatProvider() 
				=> Test_TryParse_Nullable_IsInvalid_WithFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_HasValue_WithNumberStyles_AndFormatProvider() 
				=> Test_TryParse_Nullable_HasValue_WithNumberStyles_AndFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_IsNull_WithNumberStyles_AndFormatProvider() 
				=> Test_TryParse_Nullable_IsNull_WithNumberStyles_AndFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_TryParse_Nullable_IsInvalid_WithNumberStyles_AndFormatProvider() 
				=> Test_TryParse_Nullable_IsInvalid_WithNumberStyles_AndFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_ParseNullable_HasValue() => Test_ParseNullable_HasValue();

			[TestMethod]
			public void Test_<#= numType #>Parser_ParseNullable_IsNull() => Test_ParseNullable_IsNull();

			[TestMethod]
			public void Test_<#= numType #>Parser_ParseNullable_HasValue_WithNumberStyles() => Test_ParseNullable_HasValue_WithNumberStyles();

			[TestMethod]
			public void Test_<#= numType #>Parser_ParseNullable_IsNull_WithNumberStyles() => Test_ParseNullable_IsNull_WithNumberStyles();

			[TestMethod]
			public void Test_<#= numType #>Parser_ParseNullable_HasValue_WithFormatProvider() => Test_ParseNullable_HasValue_WithFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_ParseNullable_IsNull_WithFormatProvider() => Test_ParseNullable_IsNull_WithFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_ParseNullable_HasValue_WithNumberStyles_WithFormatProvider() 
				=> Test_ParseNullable_HasValue_WithNumberStyles_WithFormatProvider();

			[TestMethod]
			public void Test_<#= numType #>Parser_ParseNullable_IsNull_WithNumberStyles_WithFormatProvider() 
				=> Test_ParseNullable_IsNull_WithNumberStyles_WithFormatProvider();
		}

	<# } #>

}