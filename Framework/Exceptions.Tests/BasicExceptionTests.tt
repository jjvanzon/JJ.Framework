<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	(string, string)[] tuples =
	{
		("Null", "is null"),
		("CollectionEmpty", "collection is empty"),
		("CollectionNotEmpty", "collection should be empty"),
		("HasNulls", "contains nulls"),
		("HasValue", "should not have a value"),
		("Infinity", "is Infinity"),
		("InvalidReference", "not found in list"),
		("IsDateTime", "should not be a DateTime"),
		("IsDecimal", "should not be a Decimal"),
		("IsDouble", "should not be a double precision floating point number"),
		("IsInteger", "should not be an integer number"),
		("NaN", "is NaN"),
		("NotDateTime", "is not a DateTime"),
		("NotDecimal", "is not a Decimal"),
		("NotDouble", "is not a double precision floating point number"),
		("NotHasValue", "has no value"),
		("NotInfinity", "should be Infinity"),
		("NotInteger", "is not an integer number"),
		("NotNaN", "should be NaN"),
		("NotNull", "should be null"),
		("NotNullOrEmpty", "should be null or empty"),
		("NotNullOrWhiteSpace", "should be null or white space"),
		("NullOrEmpty", "is null or empty"),
		("NullOrWhiteSpace", "is null or white space"),
		("Zero", "is 0")
	};
#>

using JJ.Framework.Testing;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using JJ.Framework.Exceptions.Basic;
// ReSharper disable LocalNameCapturedOnly

namespace JJ.Framework.Exceptions.Tests
{
	[TestClass]
	public class BasicExceptionTests
	{
		private static readonly TestItem _testItem = new TestItem { Parent = new TestItem() };

		<# foreach ((string codeName, string displayText) in tuples) { #>

			[TestMethod]
			public void Test_<#= codeName #>Exception_WithNameOf()
			{
				AssertHelper.ThrowsException<<#= codeName #>Exception>(
					() =>
					{
						object value;

						throw new <#= codeName #>Exception(nameof(value));
					},
					"value <#= displayText #>.");
			}

			[TestMethod]
			public void Test_<#= codeName #>Exception_WithExpression_WithSinglePart()
			{
				AssertHelper.ThrowsException<<#= codeName #>Exception>(
					() =>
					{
						object value = 1;

						throw new <#= codeName #>Exception(() => value);
					},
					"value of 1 <#= displayText #>.");
			}

			[TestMethod]
			public void Test_<#= codeName #>Exception_WithExpression_WithMultipleParts()
			{
				AssertHelper.ThrowsException<<#= codeName #>Exception>(
					() => 
					{
						TestItem testItem = _testItem;

						throw new <#= codeName #>Exception(() => testItem.Parent);
					},
					"testItem.Parent <#= displayText #>.");
			}

			[TestMethod]
			public void Test_<#= codeName #>Exception_WithAnonymousType()
			{
				AssertHelper.ThrowsException<<#= codeName #>Exception>(
					() =>
					{
						int customerNumber = 1234;
						TestEnum customerType = TestEnum.Subscriber;

						throw new <#= codeName #>Exception(new { customerNumber, customerType });
					},
					"{ customerNumber = 1234, customerType = Subscriber } <#= displayText #>.");
			}

		<# } #>

	}
}