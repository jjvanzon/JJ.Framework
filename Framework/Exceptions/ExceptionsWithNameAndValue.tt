<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
using System;
using System.Linq.Expressions;

namespace JJ.Framework.Exceptions
{
<#
	(string, string, string)[] tuples =
	{
		("HasValueException", "{0} should not have a value.", "{0} of {1} should not have a value."),
		("InvalidReferenceException", "{0} not found in list.", "{0} of {1} not found in list."),
		("IsDateTimeException", "{0} should not be a DateTime.", "{0} of {1} should not be a DateTime."),
		("IsDecimalException", "{0} should not be a Decimal.", "{0} of {1} should not be a Decimal."),
		("IsDoubleException", "{0} should not be a double precision floating point number.", "{0} of {1} should not be a double precision floating point number."),
		("IsIntegerException", "{0} should not be an integer number.", "{0} of {1} should not be an integer number."),
		("NotDateTimeException", "{0} is not a DateTime.", "{0} of {1} is not a DateTime."),
		("NotDecimalException", "{0} is not a Decimal.", "{0} of {1} is not a Decimal."),
		("NotDoubleException", "{0} is not a double precision floating point number.", "{0} of {1} is not a double precision floating point number."),
		("NotInfinityException", "{0} should be Infinity.", "{0} of {1} should be Infinity."),
		("NotIntegerException", "{0} is not an integer number.", "{0} of {1} is not an integer number."),
		("NotNaNException", "{0} should be NaN.", "{0} of {1} should be NaN."),
		("NotNullException", "{0} should be null.", "{0} of {1} should be null."),
		("NotNullOrEmptyException", "{0} should be null or empty.", "{0} of {1} should be null or empty."),
		("NotNullOrWhiteSpaceException", "{0} should be null or white space.", "{0} of {1} should be null or white space."),
	};

	foreach ((string exception, string messageWithName, string messageWithNameAndValue) in tuples)
	{
#>
		/// <inheritdoc />
		public class <#= exception #> : ExceptionWithNameAndValueBase
		{
			private const string MESSAGE_TEMPLATE_WITH_NAME = "<#= messageWithName #>";
			private const string MESSAGE_TEMPLATE_WITH_NAME_AND_VALUE = "<#= messageWithNameAndValue #>";

			/// <inheritdoc />
			public <#= exception #>(Expression<Func<object>> expression) 
				: base(MESSAGE_TEMPLATE_WITH_NAME, MESSAGE_TEMPLATE_WITH_NAME_AND_VALUE, expression) { }

			/// <inheritdoc />
			public <#= exception #>(string name) : base(MESSAGE_TEMPLATE_WITH_NAME, name) { }
		}

<#
	}
#>

}
