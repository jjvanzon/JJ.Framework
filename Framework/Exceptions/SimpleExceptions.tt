<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
using System;
using System.Linq.Expressions;

namespace JJ.Framework.Exceptions
{
<#
	(string, string)[] tuples =
	{
		("NullException", "{0} is null."),
		("CollectionEmptyException", "{0} collection is empty."),
		("CollectionNotEmptyException", "{0} collection should be empty."),
		("HasNullsException", "{0} contains nulls."),
		("InfinityException", "{0} is Infinity."),
		("NaNException", "{0} is NaN."),
		("NotHasValueException", "{0} has no value."),
		("NullOrEmptyException", "{0} is null or empty."),
		("NullOrWhiteSpaceException", "{0} is null or white space."),
		("ZeroException", "{0} is 0."),
	};

	foreach ((string exception, string message) in tuples)
	{
#>
		/// <inheritdoc />
		public class <#= exception #> : SimpleExceptionBase
		{
			private const string MESSAGE_TEMPLATE = "<#= message #>";

			/// <inheritdoc />
			public <#= exception #>(Expression<Func<object>> expression) : base(MESSAGE_TEMPLATE, expression) { }

			/// <inheritdoc />
			public <#= exception #>(string name) : base(MESSAGE_TEMPLATE, name) { }
		}

<#
	}
#>

}
