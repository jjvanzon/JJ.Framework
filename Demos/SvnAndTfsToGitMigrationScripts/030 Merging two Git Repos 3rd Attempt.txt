rem MERGING TWO GIT REPOS 3RD ATTEMPT
rem =================================

git init "JJ git-svn-tf"

	Initialized empty Git repository in C:/Users/Jan-Joost van Zon/JJ git-svn-tf/.git/

cd "JJ git-svn-tf"
git remote add jj-git-tf "E:\Source\JJs Software\JJ git-tf (tags deleted)"
git fetch jj-git-tf

	remote: Enumerating objects: 104024, done.
	remote: Counting objects: 100% (104024/104024), done.
	remote: Compressing objects: 100% (102310/102310), done.
	remote: Total 104024 (delta 73053), reused 0 (delta 0)
	Receiving objects: 100% (104024/104024), 659.70 MiB | 7.76 MiB/s, done.
	Resolving deltas: 100% (73053/73053), done.
	From D:\Source\JJs Software\JJ git-tf (tags deleted)
	 * [new branch]          master     -> jj-git-tf/master

git merge jj-git-tf/master
git remote add jj-git-svn "D:\Source\JJs Software\JJ git-svn"
git fetch jj-git-svn

	warning: no common commits
	remote: Enumerating objects: 36386, done.
	remote: Counting objects: 100% (36386/36386), done.
	remote: Compressing objects: 100% (13283/13283), done.
	Receiving objects: 100% (36386/36386), 261.93 MiB | 11.17 MiB/s, done.
	remote: Total 36386 (delta 22344), reused 36386 (delta 22344)
	Resolving deltas: 100% (22344/22344), done.
	From D:\Source\JJs Software\JJ git-svn
	 * [new branch]          master     -> jj-git-svn/master

git rebase jj-git-svn/master

First, rewinding head to replay your work on top of it...
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
Generating patches: 100% (2398/2398), done.
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
Applying: TFS first check-in
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
.git/rebase-apply/patch:7: trailing whitespace.
Jan-Joost van Zon, 2015-04-12:
.git/rebase-apply/patch:15: trailing whitespace.
﻿using System;
.git/rebase-apply/patch:16: trailing whitespace.
using System.Linq;
.git/rebase-apply/patch:17: trailing whitespace.
using System.Collections.Generic;
.git/rebase-apply/patch:18: trailing whitespace.
using System.Diagnostics;
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
warning: squelched 1705271 whitespace errors
warning: 1705276 lines add whitespace errors.
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
Applying: Include all files of external components and packages
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
.git/rebase-apply/patch:41: trailing whitespace.
<Configuration>
.git/rebase-apply/patch:42: trailing whitespace.
  <XamlCacheProviderData DefaultNamespace="Examples.FirstProject" />
.git/rebase-apply/patch:50: trailing whitespace.
﻿<?xml version="1.0" encoding="utf-8"?>
.git/rebase-apply/patch:51: trailing whitespace.
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
.git/rebase-apply/patch:52: trailing whitespace.
  <PropertyGroup>
warning: squelched 113547 whitespace errors
warning: 113552 lines add whitespace errors.
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2

 
...

Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: Synthesizer: Some changes resulting from code analysis .
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices. Gradually yielding ov
er dimension transformation in OperatorCalculator Reset and phase tracking only for time from the '668 + changes' versio
n to the Latest Version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Refactored OptimizedPatchCalculatorVisitor so that there are l
ess GetDimensionStack calls.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Refactored OptimizedPatchCalculatorVisitor so that DimensionSt
ack code is at top of Visit methods everywhere.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Refactored OptimizedPatchCalculatorVisitor so that DimensionSt
ack code is at top of Visit methods everywhere.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Refactored OptimizedPatchCalculatorVisitor to be more consiste
nt with the 668+ version.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Small corrections: use _bundleDimensionStack in a place where
_dimensionStackCollection was used by mistake, Do not first visit base in VisitShift method, but delegate to VisitDelay
immediately.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent: Removed some annotations for code analysis in faulty version, that I do not want in retrospect.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: FAULTY: Synthesizer: Sounds are still incorrect after invariant dimension stack indices and dimension transfor
mation in Reset methods and phase tracking only for time. Make latest version and 668+ version (that still works) more c
onsistent.
Applying: Synthesizer: Yield over conditionally compiled in invariant dimension stack indices and dimension transformati
on. It does not work, and I cannot get my head around it, but it is disabled with compiler switches.
Applying: Synthesizer: Push and pop in the Visitor in spots that seem to yield better invariant dimension stack indices,
 even though that feature does not work like that either.
Applying: Synthesizer: Use Time and Channel DimensionStack directly more often instead of through DimensionStackCollecti
on. Framework: Rename IsNotTypeException to InvalidTypeException.
Applying: Framework: Log SQL + some refactoring.
Applying: Synthesizer: Unbundle and Bundle with Position Transformations: Essentially it works.
Applying: Synthesizer: Range operator first version
Applying: Synthesizer: Range Operator: Simplified the calculation, but then realized the range is extrapolated linearly
out of the bounds.
Applying: Synthesizer: Round Operator: Corrections to the calculation: Return 0 if out of bounds, instead of linearly ex
trapolating. Round down instead of up or down. Sustain last value for the length of a step.
Applying: Synthesizer: Range Operator: Specialized OperatorCalculators
Applying: Synthesizer: Use DoubleHelper.IsSpecialNumber in OptimizedPatchCalculatorVisitor.
Applying: Synthesizer UI: Validation message cannot delete patch is not showing.
Applying: Synthesizer: Pianoish patch says 'index' out of range. It was an empty dimension stack, because bundle and unb
undle had their own dimension stacks in the OptimizedPatchCalculatorVisitor.
Applying: Synthesizer: Make a Scaler calculation variation that is faster when all inlets except the signal are constant
s, which happens a lot.
Applying: Synthesizer: Implement invariant dimension stack indices for Range, Bundle and Unbundle. (Invariant dimension
stack indices do not work yet, but I add the code everywhere anyway.)
Applying: Synthesizer: MakeContinuous and MakeDiscrete operators first draft. Not finished. Does not work yet.
Applying: Synthesizer: MakeContinuous and MakeDiscrete Operators: Finished preliminary business logic. It has not been t
ested yet, because I need a the presentation logic to easily do that.
Applying: Synthesizer: MakeContinuous and MakeDiscrete Operators: Presentation layer mostly done. Random, Resample and M
akeContinuous properties views were generalized to a WithDimensionAndInterpolation properties view. Still have to displa
y Operator Type correctly. Also: the calculation has still not been tested. Random operator tests seems to not work now
for some reason.
Applying: Synthesizer: MakeContinuous and MakeDiscrete Operators: Calculation works, but horribly breaks patterns, so ne
eds refactoring later. Show right OperatorType in UI for Properties views WithDimensionAndInterpolation.
Applying: Synthesizer: MakeDiscrete and MakeContinuous Operators: Reuse Resample OperatorCalculators in MakeContinuous_O
peratorCalculator instead of hacking in VisitBundle and VisitResample in the OptimizedPatchCalculatorVisitor.
Applying: Synthesizer: Use OperatorCalculatorFactory in Random OperatorCalculators to create Resample OperatorCalculator
, preventing many Random OperatorCalculator classes.
Applying: Synthesizer: MakeDiscreate and MakeContinuous Operators: Rename Unbundle properties view to properties WithDim
ensionAndOutletCount and use it for both Unbundle and MakeDiscrete.
Applying: Synthesizer: Move code file backups to archive.
Applying: Synthesizer: Give MakeContinuous a specialized Properties view. Correct calls to CanCastToNonNegativeInt32With
Max that passed count instead of max index.
Applying: whitespace
Applying: Synthesizer: MaxDiscrete operator first draft. Calculation not tested yet, some other rework remains. Also gen
eralized some validator code, make a general Properties view WithInletCount that is used for Adder and MaxDiscrete, for
the first time providing the possibility to change inlet count for Adder. Also: things started to complain about base li
braries being .NET 4.5, while higher assemblies were .NET 3.5. Problem solved in Synthesizer solution, but probably stil
l needs to be solved for other projects.
Applying: Small change to NotUniqueException message.
Applying: Synthesizer: MaxDiscrete Operator: A few optimized calculation variations. Not tested yet. VisitMaxDiscrete()
should still be simplified.
Applying: Synthesizer: MaxDiscrete Operator: Simplify VisitMaxDiscrete. Calculation not tested yet.
Applying: Synthesizer: MaxDiscrete: Give it a default outlet count of 3, instead of 16, tested and corrected the MaxDisc
rete calculations. Sort Inlets and Outlets by ListIndex in all the places in the OptimizedPatchCalculatorVisitor. Correc
t Presentation so operators with an alterative properties view are not also generated as a standard properties view.
Applying: Synthesizer: MakeDiscrete: More optimized calculation variations.
Applying: Synthesizer: MinDiscrete operator
Applying: Synthesizer: AverageDiscrete Operator: All code is there, but still needs to be tested here and there.
Applying: Synthesizer: MaxContinuous Operator: First draft. Forgot to give it a Signal inlet, though.
Applying: Synthesizer: MaxContinuous Operator: Add Signal inlet and test the calculation. Note that if from < till it wi
ll cause in infinite loop.
Applying: Synthesizer: MaxContinuous Operator: Handle reverse directions, mismatching directions and 'time' standing sti
ll.
Applying: Synthesizer: MaxContinuous Operator: Use SampleCount inlet instead of Step inlet.
Applying: Synthesizer: MinContinuous Operator
Applying: Synthesizer: MaxContinuous and MinContinuous: Share calculator code in a mutual base class.
Applying: Synthesizer: AverageContinuous Operator
Applying: Synthesizer: Rename aggregate followers
Applying: Add Roslyn source code to External Components
Applying: readme
Applying: Synthesizer: Rename TimeSliceDuration to SliceLength.
Applying: Synthesizer: SumDiscrete Operator + base calculation on a base class that used to be most of the code of the A
verage_OperatorCalculator.
Applying: Synthesizer: SumFollower Operator: Everything but the calculation.
Applying: Synthesizer: SumFollower calculation, reusing code from AverageFollower.
Applying: Synthesizer: Merge Add and Adder OperatorTypes into a single Add OperatorType.
Applying: Synthesizer: Rename Multiply to MultiplyWithOrigin.
Applying: Synthesizer: New Multiply with variable inlet count. Works, but special cases not handled.
Applying: Synthesizer: Multiply: Ignore const one.
Applying: Synthesizer: Multiply: Optimize by making calculators with x var inlets and 1 const inlet.
Applying: Synthesizer: Multiply: Lower amount of Mulitply OperatorCalculators to max 16 operands before resorting to an
array loop.
Applying: Synthesizer: MultiplyWithOrigin: Get rid of Multiply_NoOrigin OperatorCalculator variations and redirect to cr
eating a ‘normal’ Multiply operator calculators (without origin).
Applying: Synthesizer: Add OperatorCalculators: Make variations with x vars and 1 const, just like with the multiply ope
rator.
Applying: Synthesizer: Aggregates over Dimensions: SampleCount -> Step, Step Defaults to 1, From Defaults to 0. Changed
resource strings to new names while names in code have not changed yet. (Names like 'Sum over Dimension' instead of 'Sum
 Continuous'.)
Applying: Synthesizer: Aggregates over Dimensions: AggregateRecalculationEnum to switch behavior between recalculting Up
onReset or Continually. (Aggregates not called 'over Dimension'. They are still named 'Continuous'.)
Applying: Synthesizer: Do not allow non-filled in AggregateRecalculationEnum both in business logic and UI.
Applying: Synthesizer: Aggregates over Dimension: Rename 'Continuous' ones to 'OverDimension'.
Applying: Rename Synthesizer: Rename MaxDiscrete -> Max, MinDiscrete -> Min and AverageDiscrete -> Average.
Applying: Synthesizer: Aggregate Operators: Rename Continual to Continuous. Also has inactive, not working code trying t
o make Sum over dimension as fast as Unbundle and Add.
Applying: Synthesizer: Uncomment code that makes Sum over dimension as fast as Unbundle and Add, even though functionall
y those two behave different, because Sum does not maintain state for each of the dimension indices.
Applying: Synthesizer: Closest and ClosestOverDimension operators: first version (no calculation yet, a property box not
 there yet, not good default item inlet count.
Applying: Synthesizer: Closest and ClosestOverDimension Operators: Correct bugs and stuff.
Applying: Synthesizer: Closest and ClosestOverDimension Operator: Rename Signal inlet to Input.
Applying: Synthesizer: Closest Operator Calculations finished. ClosestWithDimension Calculations not programmed yet.
Applying: Synthesizer: Closest Operator: Validate minimum of 3 inlets, otherwise Closest does not make sense. Handle emp
ty items collection in the OptimizedPatchCalculatorVisitor. (When nulls are excluded, you could still end up with less t
han 2 items.)
Applying: Synthesizer: Closest Operator: OperatorCalculator variation that takes var input and two const items.
Applying: Synthesizer: Copy code from JJ.Framework.Mathematics to JJ.Business.Synthesizer for inlining. Also add Aggress
iveInlining to code copied from NAudio.
Applying: Synthesizer: ClosestOverDimension: Program the calculation.
Applying: DOES NOT WORK: Synthesizer: ClosestOverDimension to recalculate collection upon Reset(), but aggregate upon Ca
lculate(). Calculation does not work yet. Previous version of these code files are still stable.
Applying: Synthesizer: MakeDiscrete property box did not remember Dimension, which was an error in the UserControl's App
lyControlsToViewModel, but also the HashSet of OperatorTypeEnums_WithTheirOwnPropertyViews in ViewModelHelper in the Pre
senter layer was wrong.
Applying: Synthesizer: Made Dimension Undefined possible in all dimension-bound operators, because it is either everywhe
re, or allow nowhere, otherwise the operators cannot cooperate with eachother.
Applying: Synthesizer: ClosestOverDimension: Correct collection length: from 0 to 3 in doubles has length 3, but in inte
gers has length 4.
Applying: Synthesizer: ClosestOverDimension: Slightly rewrote BinarySearch, but it does not work yet.
Applying: Synthesizer: ClosestOverDimension: BinarySearch seems to wok better, but has a lot of redundancy and algorithm
ically looks a lot like what I already had.
Applying: Synthesizer: ClosestOverDimension: BinarySearch seems to work and look reasonably clean, but I feel very insec
ure about what happens if half way means a fraction, that is just truncated to an integer.
Applying: Synthesizer: ClosestOverDimension: Made BinarySearch even faster and moved to framework (and then copied it to
 JJ.Business.Synthesizer again to promote inlining).
Applying: Synthesizer: Aggregates over Dimension: Rename AggregateRecalculationEnum to CollectionRecalculationEnum, beca
use that turned out to be what we need to do, once the Closest operator was put into the mix.
Applying: Synthesizer: Closest and ClosestOverDimension Operators: Add missing mentioning of 'RUN UTILITY' in the SQL Sc
ripts.
Applying: Synthesizer: ClosestExp and ClosestOverDimensionExp first draft (calculations still wrong).
Applying: Synthesizer: ClosestExp and ClosestOverDimensionExp: Correct Maths.LogRatio so it uses division instead of sub
traction.
Applying: Synthesizer: ClosestExp: Make other calculators with simpler logarithmic comparisons. Not thoroughly tested ye
t.
Applying: Synthesizer: ClosestOverDimensionExp: Calculators added. Not really tested.
Applying: Synthesizer: ClosestOverDimensionExp: Pre-calculate logs, try and to avoid processing. I replaced 3 logs by 1
log and an exp. Not done trying stuff yet.
Applying: Synthesizer: ClosestOverDimensionExp: Tried to replaced a pow by a multiply, but that was a math error. n to t
he 2nd is not the same as 2 to the nth. This does not have the error anymore, but code that abstracts Log and Pow, but I
 will probably get rid of that code in a moment.
Applying: Synthesizer: ClosestOverDimensionExp calculation (same as 2 check-ins ago).
Applying: Synthesizer: Correct issues with ClosestOverDimension calculation's edge case where item count is negative. So
rt and SortOverDimension Operators: First draft of one of the calculations. All other parts of the architectural layerin
g yet to come.
Applying: Synthesizer: Sort and SortOverDimension Operators: All the pieces in the architecture, except the calculations
.
Applying: Synthesizer: SortOverDimension: Test and fix the calculation with CollectionRecalculation UponReset.
Applying: Synthesizer: SortOverDimension: Calculation with continuous CollectionRecalculation.
Applying: Synthesizer: Sort Operator: Mostly the addition of calculation code, but it won't work yet, like this.
Applying: Synthesizer: AggregateCalculator.Closest and ClosestExp methods need to take length, to prevent a property inv
okation. Also checked other places where I use an array length.
Applying: Synthesizer: Make Operator.Data validation more reusable.
Applying: Synthesizer: Put code validating each Operator.Data key into separate validators for better reusability and mo
re readability of the main validators.
Applying: Synthesizer: Resample CubicSmoothInclination interpolations did not work, because Epsilon differences in x wil
l make interpolations trip and a signal stuck at NaN for the whole note (any note). Replaced Double.Epsilon with a very
small positive value 1E-24. Also applied the change to the Resample calculation with Hermite interpolation.
Applying: Synthesizer: Migrate MultiplyWithOrigin to Multiply operators.
Applying: Synthesizer: Let OperatorDataValidator verify that all allowed data keys exist, next to all data keys are with
in the allowed set. Correct the missing ListIndex data key in the Range operator with a data migration procedure.
Applying: Synthesizer: Data Property stability: Avoid using OperatorWrappers in validators, but use DataPropertyParser o
r Operator entity directly. Reset operator still cannot be created and parse errors are still possible.
Applying: Synthesizer: Data Property Stability: Add TryParse methods to the DataPropertyParser, so validators can more e
asily call that to get a value that might not even parse to an int or double.
Applying: Synthesizer: Presentation: Show DefaultValue in Inlet Caption if inlet not filled in.
Applying: Synthesizer: Rename some OperatorCalculator classes.
Applying: Synthesizer: Presentation: Operator Captions should show operator type for Curve, PatchInlet, PatchOutlet, Sam
ple and other operators, even when they also display a custom name with it.
Applying: Synthesizer: Presentation: DocumentTree view: Leave out Root Document Node.
Applying: Synthesizer: Presentation: Display DefaultValue in PatchInlet Operator Captions.
Applying: Synthesizer: DefaultValues for standard operators. They are filled in upon creation, but not validated or migr
ated (yet).
Applying: PREVIOUS DOES NOT BUILD. Synthesizer: Correct namespace typo PatchManager.
Applying: Synthesizer: Default values for standard operators: Get rid of DefaultValue for loop ReleaseEnd and NoteDurati
on. Change presentation of default inlet value from "(0)" to ( = 0). Loop calculation crashed, because _dimensionStack w
as not assigned.
Applying: Synthesizer: Several Filter OperatorTyps added, but not the calculations yet.
Applying: Synthesizer: Filters: Calculations with ManyConstants
Applying: Empty project JJ.Framework.Synthesizer
Applying: Synthesizer: Rewrite NAudio's BiQuadFilter a little.
Applying: Synthesizer: Try make HighPassFilter and LowPassFilter faster by using the filter variables only once every 10
0 samples.
Applying: Synthesizer: Give LowPassFilter and HighPassFilter a BandWidth inlet.
Applying: Synthesizer: Rename CopiedCode namespace to CodeCopies.
Applying: Synthesizer: Rename filter frequency variables. Also rename a OperatorCalculatorHelper helpe method that affec
t many OperatorCalculators code files.
Applying: Synthesizer: Filters: Rename ShelfSlope to TransitionSlope and rename ShelfFrequency to TransitionFrequency.
Applying: Synthesizer: Filters: Let filter calculation use actual sampling rate.
Applying: Synthesizer: Filters: Make SamplesBetweenAppyFilterVariables depedent on sampling rate and configurable Second
sBetweenAppyFilterVariables. Do it for AllPassFilter, HighPassFilter and LowPassFilter. The other filters do not have ca
lculations yet that allow varying the filter variables.
Applying: Synthesizer: Give BandPassFilterConstantPeakGain an OperatorCalculator with variable input.
Applying: Synthesizer: Filters: Try base classes for the HighPassFilter OperatorCalculators.
Applying: Synthesizer: Filters: Calculations with variables and base classes for the calculations for AllPassFilter, Ban
dPassFilterConstantPeakGain, BandPassFilterConstrantTransitionGain, HighPassFilter, LowPassFilter and NotchFilter. But n
ot yet the HighShelfFilter, LowShelfFilter and PeakingEQFilter.
Applying: Synthesizer: Filters: Add calculators that take variables for HighShelfFilter, LowShelfFilter and PeakingEQFil
ter.
Applying: Synthesizer: Filters: Call it ‘AllVars’ if it is all vars. Don’t call it ‘ManyVars’ then;
Applying: Synthesizer: Get rid of OperatorType Filter.
Applying: Synthesizer: Rename OperatorData section of the validators to DataProperty.
Applying: Delete empty project JJ.Framework.Sound.
Applying: Synthesizer: Filter: Use _biQuadFilter.ResetSamples.
Applying: Synthesizer: Filters: Clip upper frequency to below nyquist, or filter will fail with 0 sound.
Applying: Synthesizer: Presentation Refactoring: Add id parameter to OperatorProperties Close and LoseFocus actions to a
void a query to get the visible properties view model.
Applying: Synthesizer: Let ann OperatorPropertiesUserControls use base class OperatorPropertiesUserControlBase
Applying: Synthesizer: Move AutomaticallyAssignTabIndexes call to base class OperatorPropertiesUserControlBase.
Applying: Synthesizer: Put SetTitles call in base class OperatorPropertiesUserControlBase
Applying: Synthesizer: Presentation Refactoring: Remove null-checks from ApplyControlsToViewModel and ApplyViewModelToCo
ntrols.
Applying: Synthesizer: UI refactoring: OperatorPropertiesUserControlBase: Move from derived classes to the base class: t
he TableLayoutPanel and expose a method to add controls to it, positioning it and automatically assigning tab indexes.
Applying: Synthesizer: UI Refactoring: Make positioning of OperatorPropertiesUserControls a little better.
Applying: Synthesizer: UI Refactoring: Split off PropertiesUserControlBase class from OperatorPropertiesUserControlBase
and use it for AudioOutputPropertiesUserControl.
Applying: Synthesizer: UI Refactoring: Use PropertiesUserControlBase for AudioFileOutput, Curve, Document and Node.
Applying: Synthesizer: UI Refactoring: I do not need the type argument with the base UserControl classes. So do not make
 base UserControl classes generic or abstract, which makes the strange inheritance trick obsolete that stopped the desig
ner from tripping over generics and abstract classes, which is cannot handle.
Applying: Synthesizer: UI Refactoring: Use PropertiesUserControlBase for Patch, Sample and Scale PropertiesUserControls.

Applying: Synthesizer: UI Refactoring: Get rid of _userControlTuples in MainForm now that you can just check the base ty
pe to see if it is a PropertiesUserControlBase.
Applying: Synthesizer: Rename Narrower to Squash.
Applying: Synthesizer: Get rid of SlowDown and SpeedUp operators. Stretch and Squash replace it after I also let them tr
ack phase or shift origin.
Applying: Synthesizer: Move backup code files to Archive.
Applying: Synthesizer: Hide Squash and Stretch inlet Origin if dimension not time and not filled in.
Applying: Synthesizer: Stretch and Squash: Fix vector graphics bugs with hiding and showing inlet based on dimension's b
eing Time.
Applying: Sythesizer: Fix wrong operator message prefix in validation.
Applying: Synthesizer: Migrate Delay and Earlier operators to Shift operators.
Applying: Synthesizer: Shift, Delay and Earlier Mention data migrations in the SQL script.
Applying: Synthesizer: Get rid of code for Delay and Earlier operators.
Applying: Synthesizer: Add Dimension property to Spectum operator.
Applying: Synthesizer: Give Cache inlets the names Start and End instead of StartTime and EndTime. Also correct the cach
e pre-calculation, which was broken. Also change some more occurrences of StartTime and EndTime with the Spectrum operat
or to Start and End.
Applying: Synthesizer: Dimensional Processing: First version of displaying operators with different dimensions with alte
rnate colors.
Applying: Synthesizer: Make Curve, Sample and CustomOperator OperatorWrappers a little stricter about the underlying ent
ity's existence.
Applying: Synthesizer: UI Refactoring: Use ID in properties Close and LoseFocus actions for entities other than Operator
s, and remove methods DocumentViewModelHelper.GetVisible.. for those actions.
Applying: Synthesizer: UI Refactoring: Split off base class DetailsOrPropertiesUserControlBase from PropertiesUserContro
lBase.
Applying: Synthesizer: UI Refactoring: CurveDetailsUserControl to use DetailsOrPropertiesUserControlBase. Correct bug De
tailsOrPropertiesUserControlBase.OnLoad did not call base.OnLoad.
Applying: Synthesizer: UI Refactoring: PatchDetailsUserControl to use DetailsOrPropertiesUserControlBase.
Applying: Synthesizer: UI refactoring: Make DocumentProperties available from Menu in place of the root document node in
 the DocumentTree.
Applying: Synthesizer: UI refactoring: correct bug that PatchDetails diagram is not displayed below the title bar, but p
art behind it.
Applying: Synthesizer: Refactoring: PatchManager side-effects and validations less conditional and more self-sufficient.

Applying: Synthesizer: Fix some inlet/outlet matching issues: conversion was done wrong way around of of new PatchInlets
 and PatchOutlets Properties on one hand and the PatchDetails on the other, making ListIndexes not available at the righ
t time. Also the CustomOperator_OperatorValidator was too strict as to not allow obsolete inlets and outlets.
Applying: Set more projects to .NET 4.5. Remove ValidatorBase overloads with type argument.
Applying: Synthesizer: Clear up some code for Inlet-Outlet matching. Fixed some bugs regarding it. Many bugs around Inle
t-Outlet matching remain.
Applying: Synthesizer: Chicken and egg problems: Convert PatchDetails before OperatorProperties again, because OperatorP
roperties are leading compared to PatchDetails. However defer Operator delete operations to after converting PatchDetail
s and OperatorProperties.
Applying: Synthesizer: InletOutletMatching bugs: - When PatchInlet’s distinction is only by ListIndex, I cannot see that
 in the Operator Caption.
Applying: Synthesizer: PatchValidator_IsOperatorsListComplete, refactor PatchValidators, rename protected ValidatorBase.
Execute methods to ExecuteValidator, rename Node.Direction to Node.Slope. Remove property Channel.IndexNumber.
Applying: Synthesizer: Get rid of ToolTipFeatureEnabled setting.
Applying: Synthesizer: PatchDetails VectorGraphics: Make all the sub-converters use dictionaries.
Applying: Synthesizer: PatchDetails VectorGraphics: Add OperarorDimensionLabels: arrow + dimension name displayed below
the Operator Rectangle.
Applying: Synthesizer: PatchDetails VectorGraphics: Display Dimension name in the Operator Caption for Operator Types th
at have the word 'Dimension' in the name, for instance: "Get Dimension" -> "Get Time".
Applying: Synthesizer: PatchDetails VectorGraphics: Only apply color grades to very specific operator types.
Applying: Synthesizer: PatchDetails VectorGraphics: Dimension arrow should be shown only when it is the same category of
 operators as the ones that get a color grade.
Applying: Synthesizer: PatchDetails VectorGraphics: Hack in showing dimension undefined as an arrow under the operator w
ithout a dimension name.
Applying: Synthesizer: PatchDetails VectorGraphics: Fix bugs that caused operator rectangle to disappear and reappear, b
ut not connected most of its children. The deletion of vector graphics elements was naive. It deleted everything for an
operator ID when something with an operatir ID was deleted. In this case the operator rectangle was deleted, because the
 dimension label was deleted. Nested loops were introduced. Look into performance later.
Applying: Synthesizer: PatchDetails Vector Graphics: Remove nested loops from vector graphics element deletion phase.
Applying: Synthesizer: PatchDetails VectorGraphics: Get rid of strange lookups for existing elements, that might not pro
duce unique results. We have Dictionaries and HashSets now to do lookups for existing items.
Applying: Synthesizer: PatchDetails VectorGraphics: Remove dirty solution for displaying an arrow without a name for dim
ension Undefined.
Applying: Synthesizer: Rename HarmonicNumber to Harmonic.
Applying: Synthesizer: Get rid of some obsolete Reample OperatorCalculators. Also make OperatorCalculatorHelper.AssertDi
mensionStack_ForReaders and OperatorCalculatorHelper.AssertDimensionStack_ForWriters the same method OperatorCalculatorH
elper.AssertDimensionStack.
Applying: Synthesizer: Presentation: Display entity counts with DocumentTree nodes.
Applying: Synthesizer: Presentation: Patch tree node should display the number of underlying samples and curves.
Applying: Synthesizer: Presentation: Fix bug: Adding the first patch to a document crashed after first having added othe
r entities.
Applying: Synthesizer: Fix bug: CurveList Close does not work. The MainPrenter action did not call the right partial pre
senter action.
Applying: Synthesizer: Migrate_OperatorData_RenameDimensionHarmonicNumberToHarmonic
Applying: Synthesizer: PatchDetails VectorGraphics: Put more property assignments in the insert, rather than update phas
e. Make Bezier control points' parent the other outer Bezier point, so the coordinates can be specified as e.g. (0, CONT
ROL_POINT_DISTANCE).
Applying: Synthesizer: Make NoiseCalculator use config settings for SamplingRate and CachedSeconds.
Applying: Synthesizer: Make curviness of Beziers in PatchDetails dependent on distance between connections. This is done
 by determining the distance between operators using the entity model in ToViewModel. This requires adapting the entity
to view model conversion, the view model to vector graphics conversion. Because we now use EntityPositions for convertin
g to InletViewModel and OutletViewModel, we need EntityPositionManager in more places. For this purpose EntityPositionMa
nager was refactored to give it Get and TryGet methods, next to the already existing GetOrCreate. Refactored ToViewModel
 parts that convert / refresh OperatorViewModel so it always includes using the EntityPositions. Earlier these methods w
ere variations that did not use the EntityPositions, because in our earlier use case they were not necessary, but this c
onflicts with new needs, so we scratch all the WithoutEntityPositions stuff. EntityPosition was given a DebuggerDisplay.

Applying: Synthesizer: Feature switch ExecuteOperatorMoveActionWhileDragging.
Applying: Synthesizer: CurveDetails: Avoid x and y range of 0, by correcting ScaleWidth and ScaleHeight to non-zero.
Applying: Synthesizer: Rename Time and Value to X and Y in the CurveDetailsViewModelToDiagramConverter.
Applying: JJ.Framework.Presentation.Drawing: Correct bounds before drawing things. Programmed bounds checks but still ge
t overflow error in case of extreme values.
Applying: Synthesizer: JJ.Framework.Presentation.Drawing does not give seem to give overflow errors anymore now I use bo
unds like E-9 instead of E-12.
Applying: Synthesizer: And Operator: Reduce OperatorCalculator variations, using the fact that if one of the operands is
 const, the result is always either zero or the other operand.
Applying: Synthesizer: And Operator: Simplify if-structure in PatchCalculatorVisitor.
Applying: Synthesizer: Give Operator a reference to a Dimension instead of a DimensionEnum value encoded in the Data pro
perty. Also correct the bug that dimension arrows are not shown in PatchDetails.
Applying: Synthesizer: Remove no longer used wrapper instantiations from OptimizedPatchCalculatorVisitor. Simplify ToEnt
ity code regarding enum-like types using null-conditional operators and EnumExtensions.
Applying: Synthesizer: Create Number operators for every inlet of a new operator.
Applying: VectorGraphics: Get rid of implicit interface IGesture and replace it with a GestureInternals class exposed th
rough GestureBase.Internals.
Applying: Synthesizer: Refactor ShowNodeProperties gesture in Synthesizer.VectorGraphics.
Applying: Synthesizer: Remove some outcommented code and other trivial things.
Applying: UNSTABLE. Synthesizer: Start at giving dimensions to standard operators' inlets and outlets. Does not build, b
ut need to check in, because laptop battery about to be empty and no charger available. Also make ShowPatchProperties a
double click gesture on the PatchDetails background, instead of opening PatchProperties along with opening PatchDetails.
 Also refactor other VectrorGraphics gestures to be more consistent.
Applying: UNSTABLE. Synthesizer: In progress of assinging dimensions to standard operators' inlets and outlets. Refactor
ed most methods of PatchManager.CreateOperator.cs.
Applying: Synthesizer: Dimensions for standard operators' inlets and outlets: validation and data migration.
Applying: Synthesizer: Move backup code files to Archive.
Applying: Synthesizer: Get rid of PhaseShift Inlets
Applying: Correct Add OperatorCalculators with Consts. They did a multiply. Refactor partial operators and Random to Res
etNonRecursive at construction.
Applying: Synthesizer: Correct bug that Square and Pulse produced wave forms out-of-phase with a Sine wave.
Applying: Synthesizer: Eliminate some calculators for Equal and NotEqual Operators, that were redundant: the const-var v
ariation can stand in for the var-const variation if you just switch the constructor arguments.
Applying: Synthesizer: Eliminate Or OperatorCalculators. First of all: the const-var variation and var-const variation c
an be replaced by just one of them, and switch the constructor arguments. But even simpler: you only need a calculator f
or the var-var combination, because in any other case the result is either 1, 0, operandA or operandB.
Applying: Synthesizer: Call ResetNonRecursive from constructors where applicable. Correct bug Closest and ClosestExp val
idation minimum number of inlets is 3 not 4 (GreaterThanOrEqual instead of GreaterThan). Correct bug SumOverDimension va
lidation uses the wrong expected outlet dimension,
Applying: Synthesizer: Give Pulse/Square calculators variations with width 0.5.
Applying: Synthesizer: Inlet and Outlet IsObsolete flag in entity model, update it in the business logic and display it
with orange color in vector graphics and with '(Obsolete)' in the tool tip.
Applying: Synthesizer: Inlet and Outlet IsObsolete: In Validation extract methods that check the obsolete flag, to simpl
ify the main flow. In vector graphics show the lines with an orange too, if connected to an obsolete inlet or outlet.
Applying: Synthesizer: InletOutletMatcher: Manage non-unicity of dimensions. Also other refactorings of that code. Custo
mOperator validation: Make messages clearer about properties not matching with underlying patch.
Applying: Synthesizer: Refactor AutoPatch, resolving the TODO's in the code, using clearer 'source', 'dest' and 'interme
diate' prefixes.
Applying: Synthesizer: Solve bug: DoubleClick on Operator Shows PatchProperties instead of OperatorProperties.
Applying: Synthesizer: Only show outlet tool tip if more than one outlet.
Applying: Synthesizer: Some OperatorWrapper refactorings: using expression bodied members and some some more *Inlet memb
ers.
Applying: Synthesizer: Refactor OperatorWrappers using expression bodied members and adding *Inlet properties.
Applying: Synthesier: Always show an arrow and the dimension name, even for Dimension Time and Undefined. The arrow is h
elpful in realizing a dimension is relevant. And it is not great how ambiguous it looks how Time and Undefined are repre
sented. It would also make the code around this simpler.
Applying: Synthesizer: For aggregates over dimensions display captions like 'Max', instead of 'Max over Time', because i
t already displays an arrow with the dimension name right under the operator.
Applying: Synthesizer: Solve bug: Deleting an operator attached to an obsolete inlet, does not update the diagram: the o
bsolete inlet seems to be removed, but the positions of the other inlets does not change. Until I click on the operator
again. Then the positions are straightened out.
Applying: Synthesizer: Increment PatchDetails RefreshCounter when you refresh OperatorViewModel.
Applying: Synthesizer: VectorGraphics: Possibility to prefer orienting tool tips of outlets below the mouse pointer. Wor
ks, but code could be made simpler.
Applying: First start with Code Analysers
Applying: Work on renaming and moving Analyser projects.
Applying: Moving JJ.Analysis projects.
Applying: Move backup code files to Archive.
Applying: Work on some simple naming analysers.
Applying: Analysers: Correct that e.g. a name starting with an underscore was seen as starting with an upper-case letter
.
Applying: Clean up analyser code a little.
Applying: Clean up code of Analysers a little.
Applying: Trying to make a null-check analyser (not finished).
Applying: Clean up some code in analyser PublicMethodParameterRequiresNullCheckAnalyzer.
Applying: Synthesize: VectorGraphics: Make ToolTipGesture positioning code better readable.
Applying: Synthesizer: Assert AudioFileOutput ChannelCount matches amount of IPatchCalculators upon AudioFileOutputCalcu
lator.WriteFile. Also correct ExpressionToTextTranslator in JJ.Framework.Reflection so it handles ArrayLength with a con
version expression.
Applying: Framework.Validation: Give IsEnum method a clearer message: 'not a valid choice', instead of just 'is invalid'
. Synthesizer: Remove unnecessary Get*Enum() validations and just validate that the enum-link entity reference is not nu
ll.
Applying: Analysers: Start at abbreviation casing analysers (not finished).
Applying: Analysers: Correct check for abbreviation capitals, to not allow 3 capitals in a row if it is at the end of th
e name. Also reorganize files a little.
Applying: Analysers: TypeName_AbbreviationCasing_Analyzer: Take interface type names into consideration. Also correct an
d extend the TestCode.
.git/rebase-apply/patch:19: trailing whitespace.
﻿namespace JJ.Analysis.TestCode
.git/rebase-apply/patch:20: trailing whitespace.
{
.git/rebase-apply/patch:21: trailing whitespace.
    internal class ClassWith_ClassName_WithTooManyCAPItalsInARow
.git/rebase-apply/patch:22: trailing whitespace.
    { }
.git/rebase-apply/patch:23: trailing whitespace.
}
warning: squelched 182 whitespace errors
warning: 187 lines add whitespace errors.
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Removing Analysis/JJ.Analysis.TestCode/ClassWith_ClassName_NotStartingWithUpperCase.cs
Applying: Analysis: InterfaceName_StartsWithI_Analyser and check it is an interface type differentl in TypeName_Abbrevia
tionCasing_Analyzer.
Applying: Make All solution build and run again.
Applying: Analysers: ConstantNames_AreUpperCaseOrSameAsValue_Analyzer. Also correct Field-related analysers so they do n
ot evaluate constants,
Applying: Analysers: CamelCase check for Parameters and LocalVariables.
Applying: Analysers: Checks for abbreviation casing for Parameters and LocalVariables. Also rename files to be more unif
orm.
Applying: Synthesizer: Auto-Delete Owned Number Operators along with the owner operator.
Applying: Synthesizer: Do not auto-create numers of empty inlets of OperatorTypes PatchInlet and PatchOutlet.
Applying: Synthesizer: Only auto-create Number operators for inlets that have default values.
Applying: JJ.Framework.Presentation.Drawing: Dispose Graphics objects (Pens, Brushes, Fonts and StringFormat.
Applying: VectorGraphics: Circularity check
Applying: Move backup code to Archive.
Applying: Synthesizer: Case-insensitive patch grouping and inlet-outlet matching.
Applying: Synthesizer: Give Min and Max operators specialized calculators optimizing for a few specific cases.
Applying: Synthesizer: Rename Manager's Validate* methods to Save*. Move BiQuadFilter to Calculation namespace.
Applying: Synthesizer: Rename AutoPatchPreview to ShowAutoPatch. Implement AutoPatchDetailsClose action.
Applying: Synthesizer: More DebuggerDisplays for the entities.
Applying: Analysers: Check if fields are private or protected.
Applying: Framework: Make 'Distinct' with Delegate Much Easier, Synthesizer: Manage Document Grouping in Business not Pr
esentation
Applying: Framework: VectorGraphics: Use SideEffects for constraints on diagram background instead of throwing directly
in property setter. Clean Up Models Code with C# 6 Features.
Applying: Framework: VectorGraphics: Clean Up Code with C# 6 Features
Applying: Synthesizer: Business: Validation: Unicity checks case-insensitive
Applying: Synthesizer: Business: SideEffects: Name Generation Exists Check Case-Insensitive
Applying: Synthesizer: Business: SideEffects: Put the essential logic of GenerateName SideEffects in a helper method, so
 it is not repeated.
Applying: Synthesizer: Presentation: ViewModels: Use Dictionaries to Prevent Sequential Lookups (In Progress)
Applying: Synthesizer: Presentation: ViewModels: Use Dictionaries to Prevent Sequential Lookups. Do it for OperatorViewM
odels and NodeViewModels.
Applying: Add original Red-black_tree code to External Components.
Applying: Synthesizer: Business: Ran code analysis over the code, made some trivial corrections: removed some unused var
iables, turned some things into expression-bodied members, added some argument checks, added some forgotten return state
ments.
Applying: Synthesizer: Presentation: Inlets and Outlets: No DisplayName for the Obvious Inlets and Outlets. First draft
that hides inlet captions for some specific operator types.
Applying: Synthesizer: Presentation: Inlets and Outlets: No DisplayName for the Obvious Inlets and Outlets: Only hide th
e name, not the other parts of the caption. Make it         OperatorTypeEnums_WithHiddenInletNames, not OperatorTypeEnum
s_WithInletCaptions.
Applying: Synthesizer: Presentation: Inlets and Outlets: No DisplayName for the Obvious Inlets and Outlets: Hide specifi
c OperatorTypes’ outlets if not present in a set of OperatorTypeEnums_WithVisibleOutletNames. But the original ‘hide sin
gle outlets’ rule still applies to CustomOperators. That way ‘Set Dimension’s single passthrough outlet is still shown a
nd Unbundle and MakeDiscrete’s multiple outlets are hidden.
Applying: Synthesizer: Presentation: Inlets and Outlets: No DisplayName for the Obvious Inlets and Outlets: Rename Outle
ts of Operators with visible Outlet names (coincidentally the Passthrough Operators).
Applying: Synthesizer: Solve crash trying to show SampleProperties, CurveProperties and CurveDetails inside ChildDocumen
ts due to a programming error in ViewModelSelector.
Applying: Synthesizer: Scales and Tones: Presentation: ToneGridEdit: Read-Only Frequency Column
Applying: Synthesizer: Presentation: Get Rid of ViewModelSelect.GetVisible* Methods
Applying: Synthesizer: Presentation: ViewModels: Use Dictionaries to Prevent Sequential Lookups: Get rid of many sequent
ial lookups in ViewModelSelector (not done yet).
Applying: Synthesizer: Presentation: ViewModels: Use Dictionaries to Prevent Sequential Lookups: Get rid of even more se
quential lookups in the ViewModelSelector.
Applying: Framework: Rename EntityNotFoundException to NotFoundException. Synthesizer: Reorganize ViewModelSelector.
Applying: Synthesizer: Make EventArgs<T> and use it in DetailsrPropertiesBase<TKey>.
Applying: Synthesizer: Presentation: Move OperatorPropertiesViewModel dictionaries from PatchDocumentViewModel to Docume
ntViewModel.
Applying: UNSTABLE: Synthesizer: Data Refactoring out ChildDocument concept. With this changeset you can still run Migra
te_Move_CurvesSamplesAndPatch_FromChildDocuments_ToRootDocuments.
Applying: Synthesizer: Data: Remove Document.GroupName, Document.ParentDocument and Document.ChildDocuments
Applying: Synthesizer: UsedIn Feature: DocumentManager.GetUsedIn methods, CurveGrid a UsedIn column.
Applying: Synthesizer: UsedIn Feature: Fix ugly code in CurveGridPresenter: Use a DTO for better separation of concerns
Presenter, Business and ToViewModel.
Applying: Synthesizer: UsedIn Feature: Use new conversion to CurveGridViewModel in the conversion to DocumentViewModel a
nd delete the old CurveGrid-related ToViewModel methods.
Applying: Synthesizer: UsedIn Feature: Mention UsedIn in CurveLookup items.
Applying: Synthesizer: UsedIn Feature: Refactor CurveUsedInDto to a more general UsedInDto.
Applying: Synthesizer: UsedIn Feature: Move UsedInDto to Business layer and move it and existing DTO in Business layer f
rom the Dto namespace to to the Helpers namespace.
Applying: Synthesizer: UsedIn Feature: Move UsedInDto creation to busines layer so that code is not repeated multiple ti
mes in the presentation layer.
Applying: Synthesizer: UsedIn: Side-issue: Changing a Reference operator’s reference, now require updating grids and ref
erence operator property boxes, because UsedIn is used in there. Also fixed bug where delete patch caused ViewModelSelec
tor to use unformatted group <null> as a dictionary key.
Applying: Synthesizer: UsedIn Feature: If Curve not used in anything, don't show '(Used In: )' in the CurveLookup items.
 Also sort the concatenated used in items.
Applying: Synthesizer: UsedIn Feature: Display UsedIn in the SampleGrid. Also refactor UsedInDto to be better reusable;
it turned out an IDAndName in place of the entity itself is not a viable option; it has to be the entity itself.
Applying: Synthesizer: Side-issues around refactor out ChildDocuments: Use Document_SideEffect_CreatePatch in there: do
that for new documents by default. Call delete validator on Patch. Corrected PatchValidator_Delete; it did not execute t
he postponed execute. Also in the presentation layer auto-open the document you just created and auto-show DocumentGrid
after DocumentClose.
Applying: Synthesizer: UsedIn Feature: Added UsedIn column to the PatchGrid, but the code for it is ugly, because combin
ing grouping and used in, along with separation of business and ToViewModel, does not go elegantly.
Applying: Synthesizer: Bug: New Operator in new Patch gives cannot insert null error. It was because the operator proper
ty boxes were saved first instead of the patch details first.
Applying: Synthesizer: Remove unnecessary members from DimensionStackCollection. Remove deprecated members Dimension.AsX
DimensionInCurves and AsYDimensionInCurves that I forgot to remove earlier.
Applying: Synthesizer: Multi-Dimensional Processing: Data: Operator.CustomDimensionName: Add to data model and upward th
e stack up to user controls. Rework still remains.
Applying: Synthesizer: Presentation: Put Dimension properties in OperaratorPropertiesViewModelBase and generalize stuff
higher up the software stack too, reducing quite some WinForms UserControl code. For PatchInlet and PatchOutlet there is
 still a glitch. The symptom is that CustomDimensionName is shown for those, while they do not apply. In code a few hack
s are put in there to make it work differently for PatchInlet and PatchOutlet. This still has to be solved.
Applying: Synthesizer: Multi-Dimensional Processing: Control visibility of CustomDimensionName separate from standard Di
mension, for hiding CustomDimensionName in the PatchInletProperties and PatchOutletProperties views.
Applying: Synthesizer: Multi-Dimensional Processing: Operator.CustomDimensionName: Validate that CustomDimensionName is
null for certain operator types.
Applying: Synthesizer: Multi-Dimensional Processing: Named Dimensions: Get rid of view OperatorProperties_WithDimension,
 because the basic OperatorProperties view has dimensions now.
Applying: Synthesizer: Multi-Dimensional Processing: Remove Suffix _WithDimension from presentation objects.
Applying: Synthesizer: Multi-Dimensional Processing: Named Dimensions: Data: Rename Operator.Dimension to StandardDimens
ion. Did most of it. Some rework required.
Applying: Synthesizer: Multi-Dimensional Processing: Named Dimensions: Data: Rename Operator.Dimension to StandardDimens
ion: Rework: Mainly PatchApi.
Applying: Synthesizer: Patch Editor: Dimension Styling: Refactor Code that Determines Style Grade. Used more manageable
keys: strings, not objects. Centralized in MathHelper methods that spread one set over another. Not perfect yet, but som
e improvement.
Applying: Synthesizer: Patch Editor: Dimension Styling: Refactor Code that Determines Style Grade: The method looks much
 clearer now.
Applying: Synthesizer: Patch Editor: Dimension Styling: Refactor Code that Determines Style Grade: Move creating Dimensi
onViewModel to separate method. Solve crash by adding check that dimensionKeysToStyle is even filled in, and also make M
athHelper.Spread tollerant towards source span of 0.
Applying: Synthesizer: Patch Editor: Dimension Styling: Also Use Shades Brigher Than Neutral not Just Darker
Applying: Synthesizer: Multi-Dimensional Processing: Named Dimensions: Presentation: PatchInlet and PatchOutlet Properti
es Properties their own Dimension Properties: Not the StandardDimension and CustomDimension from the base class of the P
roperties view, because it is not polymorphically about the same property.
Applying: Synthesizer: Multi-Dimensional Processing: Named Dimensions: Presentation: Refactor Designer-Generated Code of
 OperatorPropertiesUserControlBase
Applying: Synthesizer: User Interface: Prevent Sequential Lookups with Dictionaries: Get rid CurveLookupItemRefresh and
SampleLookupItemRefresh, which do a sequential lookup and then a sort, while recreating the whole list might be better.
Turn collection inside ScaleGridViewModel into a dictionary.
Applying: Synthesizer: User Interface: Prevent Sequential Lookups by Visible Property: First version. Rework remains.
Applying: Synthesizer: User Interface: Prevent Sequential Lookups by Visible Property: Letting CloseOrLoseFocus return v
iewModel does not work, because in it RefreshDocumentViewModel replaces all view models, and leaves the original view mo
del that you return with Successful = false. The solution seems to be to not have CloseOrLoseFocus, only separate Close
and LoseFocus action methods. Happy refactoring. | It is asymmetrical that Show action does not assign the visible view
model. Yes dispatch does it, but it only does it because it first calls HideAll*ViewModels. | Non-abstract base class Op
eratorPropertiesViewModel is dangerous, because chance of using it polymorphically unintentially. Make an abstract Opera
torPropertiesViewModelBase and on top of it a sealed OperatorPropertiesViewModel, using the abstract type sparsely. | No
n-public new view model in OperatorPropertiesUserControl_* is not type safe enough. Should be public.
Applying: Synthesizer: User Interface: Prevent Sequential Lookups by Visible Property: MainPresenter.Refresh: Make Delet
eOperatorViewModels more efficient and handling viewModelDictionaries a little safer by assigning a variation at the beg
inning of methods.
Applying: Synthesizer: Multi-Dimensional Processing: Named Dimensions: Data: OperatorType.HasDimension
Applying: Synthesizer: Multi-Dimensional Processing: Named Dimensions: DimensionStackCollection and OptimizedPatchCalcul
atorVisitor adapations
Applying: Synthesizer: Multi-Dimensional Processing: Named Dimensions: Refactor OptimizedPatchCalculator.GetValue and Se
tValue Methods
Applying: Synthesizer: Name tollerance: Improve comparison and check for emptiness for names that the user fills in.
Applying: Synthesizer: Name tollerance: Correct faulty NameHelper.IsFilledIn method: it had a ! missing.
Applying: Synthesizer: UI Rework: Show Dimension Undefined / "" with non-neutral styling.
Applying: Synthesizer: Patch Editor: Dimension Styling: Custom and Standard Dimension Name Disambiguation
Applying: Move backup code files to archive.
Applying: Synthesizer: Discrete Processing: Add Suffix OverInlets to Respective OperatorTypes
Applying: Synthesizer: Discrete Processing: Rename Resample Operator to Interpolate
Applying: Synthesizer: Discrete Processing: Rename MakeDiscrete to DimensionToOutlets
Applying: Synthesizer: Discrete Processing: Rename MakeContinuous to InletsToDimension
Applying: Synthesizer: Discrete Processing: Rename Range operator to RangeOverDimension
Applying: Synthesizer: Discrete Processing: Operator RangeOverOutlets: Everything but the calculation and some refactori
ngs.
Applying: Synthesizer: Discrete Processing: Operator RangeOverOutlets: Calculations finished. Some refactoring remains.
Also made all unit tests in the Synthesizer solution succeed again. Fixed a problem JJ.Framework.Reflection's expression
 visitors. It could not handle Methods without parameters. Also wrote a test for checking out polymorphism and generics
with structs.
Applying: RangeOverOutlets: Presentation: Display numbers in outlet captions if inlets are all const. (First version, re
factoring required.)
Applying: Synthesizer: Discrete Processing: Operator RangeOverOutlets: Presentation: Refactor GetOutletCaption code, so
it calls a different method depending on the OperarotType.
Applying: Refactor away OperatorWarningValidator_Base_SpecificInletsFilledInOrHaveDefaults. Use OperatorWarningValidator
_Base_AllInletsFilledInOrHaveDefaults instead. This is legacy from when the ‘OrHaveDefaults’ was not part of its funtion
ality.
Applying: Synthesizer: Refactoring: Make base class for OperatorWrappers that just have inlets A and B and outlet Result
.
Applying: Synthesizer: Refactoring: Put a lot of repeated OperatorWrapper code in base classes.
Applying: Synthesizer: Refactoring: Create base class OperatorWrapperBase_VariableOutletCount and let 3 OperatorWrappers
 inherit from it, preventing some repeated code.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: CollectionRecalculation: Let ClosestOverDimension_O
peratorCalculator_Base delegate sampling and sample processing to SortOverDimension_OperatorCalculator_Base.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: CollectionRecalculation: Make SortOverDimension_Ope
ratorCalculator_Base and SumOverDimension_OperatorCalculator_Base more similar to eachother.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: CollectionRecalculation: Make MaxOrMinOverDimension
_OperatorCalculatorBase similar to the other samplers over dimensions.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: CollectionRecalculation: Add a ProcessFirstSample r
egions in the three samplers over dimension.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Make abstract class OperatorCalculatorBase_SamplerO
verDimension, generalizing the code of the MaxOrMinOverDimenion calculation and the SortOverDimension and the SumOverDim
ension calculations. (Rework still remains.)
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Small refactorings.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: LagBehind: Tiny changes in comment and white space
in the OperatorCalculators. Also handle dimension stack slightly more efficiently in Interpolate_OperatorCalculator_Herm
ite.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: LagBehind: Make Interpolate_OperatorCalculator_Herm
ite more similar to Interpolate_OperatorCalculator_CubicSmoothSlope by shifting x and y values over, once x1 has passed,
 instead of trying to reassign y values to new x values, awkwardly made equidistant using the new rate. You are still fa
king that the Hermite interpolation works with variable rates, but the result is still pretty smooth, unlike the previou
s version.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: LagBehind: Make code of Interpolate_OperatorCalcula
tor_CubicEquidistant similar to that of Hermite and CubicSmoothSlope calculators.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: LagBehind: Make Interpolate_OperatorCalculator_Cubi
cAbruptSlope more similar to the other Interpolation calculators.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Make Interpolate_OperatorCalculator_LineRememberX0
and Interpolate_OperatorCalculator_LineRememberX1 more similar to eachother. Use variable names in Interpolate_OperatorC
alculator_Block and Interpolate_OperatorCalculator_Stripe like x and y. Prepare for getting rid of Interpolate_OperatorC
alculator_LineRememberX0; Data migration procedure already programmed, but not yet run. Will run after code is refactore
d away.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Get rid of Interpolate_OperatorCalculator_LineRemem
berX0.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Rename ResampleInterpolationType.LineRememberT1 to
just Line.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Make Interpolate_OperatorCalculator_Line_ConstSampl
ingRate more similar to Interpolate_OperatorCalculator_Line_VarSamplingRate and actually faster than it, not slower. (No
t finished making it more similar, though.)
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Make Interpolate_OperatorCalculator_Line_ConstSampl
ingRate even more similar to Interpolate_OperatorCalculator_Line_VarSamplingRate. (Also, last checkin it was actually ta
ken in use. It was not actively used by calculations yet.)
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Make 4 and 3-point Interpolation OperatorCalculator
 code more similar to the 2-point ones.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Make Interpolate_OperatorCalculator_Block more simi
lar to Interpolate_OperatorCalculator_Hermite. Add AggressiveInlining attributes to more members of the Interpolate_Oper
atorCalculators. Use current Y in ResetNonRecursive in Interpolate_OperatorCalculators instead of assuming Y's start at
0. Use variable name x instead of position in the ResetNonRecursive methods.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Make Interpolate_OperatorCalculator_Block more simi
lar to Interpolate_OperatorCalculator_Hermite. Make Interpolate_OperatorCalculator_Stripe have its own implementation. I
t works, but Stripe seems to lag behind one sample more than I though it should.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Make Interpolate_OperatorCalculator_Stripe lag behi
nd a little less.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: Rename Interpolate_OperatorCalculator* classes to i
nclude the word 'LagBehind'.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: LagBehind: In the Interpolate_OperatorCalculator* c
lasses: Use SamplingRate in ResetNonRecursive methods, to use a better suitable sample distance. Fix some missing _dimen
sionStack.Pop calls. Replace some intermediate Pops and Pushes with intermediate dimensionStack.Set calls.
Applying: Synthesizer: Discrete Processing: Abstract Sampling Modes: LagBehind: Work on reverse time for block interpola
tion.
Applying: Synthesizer: Performance Upgrade: Inlining through Mutable Generic Structs: First draft of proof-of-concept te
st
Applying: Synthesizer: Performance Upgrade: Inlining through Mutable Generic Structs: First performance test comparing W
ithInheritance to MutableGenericStructs completed. It seems 2x as fast in this simple test.
Applying: Synthesizer: Performance Upgrade: Inlining through Mutable Generic Structs: Make an 8-partial test.
Applying: Synthesizer: Performance Upgrade: Inlining through Mutable Generic Structs: Let NotInlinedWithInheritance vari
ations of OperatorCalculators delegate to the trivial helpers, to be consistent with the InlinedWithStructs. Make more v
ariations of the tests by iterations and number of partials.
Applying: Synthesizer: Performance Upgrade: Inlining through Mutable Generic Structs: Move around with namespaces for Wi
thInlining and WithInheritance.
Applying: Synthesizer: Performance Upgrade: OperatorDto Structure: Make the Dto classes in the Demo project and a start
at some visitors.
Applying: Synthesizer: Performance Upgrade: OperatorDto Structure: Add visitation of Inlets to OperatorDtoVisitorBase
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Work in progress
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Demo project: finish OperatorDtoVisitorBase.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: In Demo project: Finish SpecializationDtoVisitor and c
hange OperatorDtoVisitorBase so that a method can return a (different) OperatorDto.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Demo Project: SpecializedDtoVisitor: Move NaN checks t
o more general visit method and do not repeat it in the specialized methods.
Applying: Synthesizer: Performance Upgrade: OperatorDto Structure / Visitors: Add more specialized Dto's, even though th
ey are simplified out. Split up the visitor specializing the Dto classes from a visitor that simplifies it, based on mat
hematical properties. Make a MathPropertiesDto that can be retrieved through a helper, rather than a visitor adding math
 properties to the other Dto's, because math properties can dynamically change and cannot be determined just once before
 hand, but need to be redetermined during the visitation process.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Program the DtoToCalculatorVisitor for the WithInherit
ance variation of the calculation structure. Remove AggressiveInlining from derived visitors. Just the innermost base cl
ass might benefit from AggressiveInlining. Shorten visitor parameter names to just 'dto', because that is more readable
in practive. Make specific overrides in SimplificationVisitor, rather than handing everything in the Visit*Base methods.
 Add specialized base visitors that do nothing other than make specific overloads sealed and throw NotSupportedException
s: after certain transformations, certain visit methods should never be reached, not overriden. Omit the suffix 'Value'
in the variables of the OperatorDtos.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Work on OperatorDtoToOperatorCalculatorVisitor WithStr
ucts: Program OperatorDtoToOperatorCalculatorTypeConverter. Think about VariableAssignment_OperatorDtoVisitor.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Work on instantiating and filling struct calculators i
n VariableAssignment_OperatorDtoVisitor.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Finish up the VariableAssignment_OperatorDtoVisitor (f
or the WithStructs variation of the calculations). Program tests to debug the visitors. Encountered some problems, that
have not been resolved with this check-in yet.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Make basic members DebuggerHidden, so debugging the re
cursive process becomes better folowable. Add some basic DebuggerDisplays so at least it shows the named type name inste
ad of the fully qualified one, which makes watches better overviewable. Outcommented the members in OperatorDtoVisitorBa
se_AfterSimplification, OperatorDtoVisitorBase_AfterSpecialization that threw NotSupportedException.
Applying: Synthesizer: Performance U is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3
/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
pgrade: OperatorDto Visitors: Demo Project: Correct the calculators from DTO after debugging for both WithInheritance an
d WithStruct variations. A lot had to change about the visitors, the calculator's inheritance structure. It was really i
mpactful, but the tests do not crash anymore.
Applying: Synthesizer: Performance Upgrade: Demo Project: OperatorCalculators: Give properties to WithStruct variations,
 and just use the fields privately.
Applying: Renames
Applying: Trivial things
Applying: Move backup files, correct JJ.sln and check if everything builds.
Applying: Remove namespace prefixes from folders (e.g. JJ.Framework.Validation sub-folder would be renamed to Validation
). Only corrected the JJ.sln. Other solutions still have to be repaired.
Applying: Correct the solutions so that they point to the shorter sub-folders of the projects.
Applying: Change text of CollectionEmptyException.
Applying: Rename SetText to SaveText. Still have to rename project folders.
Applying: Rename project folders from 'SetText' to 'SaveText'.
Applying: Synthesizer: Rename JJ.Demos.Synthesizer.Inlining to JJ.Demos.Synthesizer.NanoOptimization.
Applying: Correct solutions and rename folder of Synthesizer.NanonOptimization.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Demo Project: Move specialization to Number_OperatorDt
o_NaN, _One and _Zero to a separate visitor MachineOptimization_OperatorDtoVisitor. Tinker a little with the other visit
or code.
Applying: Synthesizer: Performance Upgrade: Inlining through Mutable Generic Structs: Extend the Tests in the Demo proje
ct so it differentiates between FromDto or NoDto. It seems that dynamically making a closed generic type does not give y
ou the inlining that using the literal type in C# does.
Applying: Synthesizer: Performance Upgrade: Inlining through Mutable Generic Structs: Make test to verify that indeed ru
ntime generics and compile time generics return the same Type object, but have different inlining.
Applying: Synthesizer Nano Optimization: Kind of messy support for 8-var add calculators from DTO. External Components:
Add soapobject code (soap object for Unity that I never used). Correct the Synthesizer Business's If Operator Calculator
s so that they do not calculate then's or else's if not needed.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Demo Project: Support variable amount of add operands
efficiently.
Applying: Synthesizer: Performance Upgrade: OperatorDto Visitors: Demo Project: Remove calculator interfaces for specifi
c amounts of vars.
Applying: Synthesizer: Performance Upgrade: OperatorDto Structure: Demo Project: Remove the InletDto class, because you
can directly point to the OperatorDto.
Applying: Synthesizer: Performance Upgrade: C# Generation: First version of some visitor code that does some C# code gen
eration.
Applying: Synthesizer: Nano-Optimization: Move backup code files to archive.
Applying: Synthesizer: Performance Upgrade: C# Generation: Demo Project: Working on C# code generation.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Fix order problem with Shift operator: visit dist
ance first, then generate code, then visit signal. Generate variables declarations at the beginning. Use some more C# 6
interpolated strings.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Let a lot of numbers in variable names start coun
ting at 1.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Reuse same variable input frequency for all parti
als.
Applying: Synthesizer: Nano-Optimization: C# Generation: Make an actual dynamic assembly out of the generated C# code.
Applying: Synthesizer: Nano-Optimization: C# Generation: Write a performance test for the WithCSharpCompilation variatio
n of hte calculation. It seems 4x as fast.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Include PDB in compilation output.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Get debugging the generated assemblies to work.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: No need to save the assembly and PDB to disk in o
rder to debug properly. You only need to save the code files.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Simplify code that calls upon Roslyn and extract
invariants around the compilation and make then static readonly.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Visitor: Simplify some names.
Applying: Synthesizer: Nano-Optimization: C# Generation: Make StringBuilderWithIndentation class and use it in the code
generation.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Include generating wrapper method, class, namespa
ce and usings in the visitor, not outside of it, where it also gets compiled.
Applying: Synthesizer: Nano-Optimization: C# Generation: Work on an example for generated code, where the sound is calcu
lated by chunk, without any method calls.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Move Operator Calculators from sub-namespace 'Ope
rator' to just the namespace 'Calculation', as to put PatchCalculators right next to it in the future, which is better f
or the demo project.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Turn example calculation by chunk into generating
 code. There is still a thinking error in there. I reallocate an array upon each call.
Applying: Synthesizer: Nano-Optimization: C# Generation: Calculation by chunk now does not reallocate the array all the
time.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Some improvements to the code structure.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Use VariableInput DefaultValues in generated code
.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: White box that the variable names are stored in c
amel case. Format the double literals so that they have exponential notation, to avoid integer divisions.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Add suffix 'CamelCase' to more members.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Prevent code repetition in the VisitShift* method
s.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Make code of the two ToCShapVisitors more similar
 in preparation of extracting a base class.
Applying: Synthesizer: Nano-Optimization: C# Generation: Demo Project: Move most code from the 2 ToCSharp visitors to a
mutual base class.
Applying: Synthesizer: Nano-Optimization: C# Generation: Rename a class.
Applying: Synthesizer: Nano-Optimization: Improve Parallelism: Just a couple of trivial code changes.
Applying: Synthesizer: Nano-Optimization: Improve Buffer Use: First-Order Channel and also write to the audio buffer dir
ectly without intermediate buffers. This also takes away a sequential part from the parallelism.
Applying: Synthesizer: Nano-Optimization: Improve Parallelism: Nano-optimize some things that only require micro-optimiz
ation.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: This time not in the demo project, but for real. Only a
 few Dto's programmed.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Make more DTOs.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Add a DTO for each OperatorType looking at OperatorWrap
pers for inspiration on the implementation: Done until ToggleTrigger in the order of OperatorTypeEnum.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Add a DTO for each OperatorType looking at OperatorWrap
pers for inspiration on the implementation.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Migrate Shift_OperatorDto variations from demo project
to business layer.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Add dimension properties.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Add information about what outlet is used to the multi-
outlet operator’s DTO’s.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Group toget is not a valid attribute name: External Com
ponents/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: External Components/FluentNHibernate/Source Code/1.3/.gitattributes:2
her multiple DTO classes in a single file for each OperatorType.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: More OperatorDtos based on the variations of the Operat
orCalculators. NOTE: Something is wrong with the demo project tests, making them fail.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors Prototype: Fix the crasing unit tests: visit Shift_Operat
orDto before you visit Shift_OperatorDto_VarSignal_VarDistance, becuase otherwise ClassSpecialization_OperatorDtoVisitor
 will not specialize Shift_OperatorDto, since it is already a Shift_OperatorDto_VarSignal_VarDistance.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Change Base class structure: make separate Input Operat
orDto properties leading, and the collection of InputOperatorDtos a virtual method. Not applied in all DTO's yet. Interm
ediate check-in.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: make separate Input OperatorDto properties leading, and
 the collection of InputOperatorDtos a virtual method.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Add more DTO's based on the set of calculator variation
s.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Add more DTO's based on the set of calculator variation
s.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Finished
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: OperatorDtoVisitorBase
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: OperatorToDtoVisitor (in progress)
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: OperatorToDtoVisitor: All methods implemented.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Make mutual types for Dimension properties.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: Use generalized private method to set dimension properti
es.
Applying: Rename project from JJ.Demos.Synthesizer.NanoOptimization to JJ.Business.Synthesizer.Tests.NanoOptimization. (
Have not moved the folder yet.)
Applying: Rename project from JJ.Demos.Synthesizer.NanoOptimization to JJ.Business.Synthesizer.Tests.NanoOptimization: M
ove the folder.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Rework the proto
type so that Add's Vars and Const are handled in a much easier way. This also required getting rid of the handling of po
lymorphism the prototype's OperatorDtoVisitorBase, making it much simpler.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Yield over code
from prototype for easier handling of Vars/Consts DTO variations of the Add operator.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor (in progress)
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor (in progress)
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: in progress.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor (in progress)
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Very few code
Applying: Open Source JJ.Framework and JJ Software Architecture
Applying: Open Source JJ.Framework and JJ Software Architecture: Moce JJ.Analysis to JJ.Framework.CodeAnalysis
Applying: Open Source JJ.Framework and JJ Software Architecture: Change folder 'External Components' to 'Third Party'.
Applying: Open Source JJ.Framework and JJ Software Architecture: Backed up NHibernate and related code with SQL Logging
in it.
Applying: UNSTABLE. Open Source JJ.Framework and JJ Software Architecture: Removed adapted NHibernate source code.
Applying: UNSTABLE. Open Source JJ.Framework and JJ Software Architecture: Add original NHibernate source code again.
Applying: Open Source JJ.Framework and JJ Software Architecture: Remove NHibernate SQL Logging from JJ.Framework.
Applying: Open Source JJ.Framework and JJ Software Architecture: Change KeyCodeEnum and MemberTypes_PlatformSafe to not
be copies from .NET Framework.
Applying: Open Source JJ.Framework and JJ Software Architecture: Mostly rename FluentValidator to VersatileValidator. Al
so added README.TXT and MIT LICENSE.TXT to the Framework folder.
Applying: Rename MIT LICENSE.TXT to LICENSE.TXT.
Applying: Open Source JJ.Framework and JJ Software Architecture: Make unit test succeed or be inconclusive even when dat
abase and service connections fail.
Applying: Open Source JJ.Framework and JJ Software Architecture: Move some backup code files to Archive folder.
Applying: Change JJ.Framework README.TXT.
Applying: Change JJ.Framework README.TXT and add THIRD PARTY LICENSE.TXT to reference additional license terms.
Applying: Fix JJ.Framework.Data.NHibernate references.
Applying: Fix references of JJ.Framework.Data.Tests.
Applying: Synthesizer: Nano-Optimization: Extend OperatorDto Structure of Stretch and Squash operators to have more math
ematical variations. Also implement the Visit_Squash_OperatorDto method in the ClassSpecialization_OperatorDtoVisitor. O
pen sourcing: Added the MODIFICATIONS.TXT to the SgmlReader third party component.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Implement Visit_
Stretch_OperatorDto.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Implement Visit_
Power_OperatorDto.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Implement Visit_
Shift_OperatorDto. Also do some trivial renames and such.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: More Visit metho
d implementations.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Implement Visit_
Reverse_OperatorDto, move ClosestOverInlets and ClosestOverInletsExp visitation to another visitor: the MachineOptimizat
ion_OperatorDtoVisitor.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Add cloning of d
imension properties to the sound operator visitation, because that was forgotten.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Implement Visit_
Round_OperatorDto.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Implement Visit_
Select_OperatorDto.
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: ClassSpecialization_OperatorDtoVisitor: Add forgotten Vi
sit_Select_OperatorDto* visit methods in the OperatorDtoVisitorBase.
Applying: SOME PREVIOUS CHECK-INS DO NOT BUILD. This was because of a not fully implemented rename of Round_OperatorDto_
VarSignal_ConstStep_ConstOffset. In ClassSpecialization_OperatorDtoVisitor the frequency math properties were not retrie
ved correctely many of the times. The math properties of the dto itself were used as the frequency math properties.
Applying: Synthesizer: Implement ClassSpecialization_OperatorDtoVisitor.Visit_SetDimenion_OperatorDto.
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor.Visit_Sample_OperatorDto.
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor.Visit_Interpolate_OperatorDto.
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor.Visit_Random_OperatorDto
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor.Visit_Scaler_OperatorDto
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor.Visit_RangeOverOutlets_OperatorDto.
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor Visit_Pulse_OperatorDto, Visit_RangeOverDimension_Operator
Dto
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor.Visit_Loop_OperatorDto
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor: Remove unnecessary local OperatorDtoBase variables. Perfo
rmance cost is outweighed by readability in this case.
Applying: Synthesizer: OperatorDto structure: remove references to entities. ClassSpecialization_OperatorDtoVisitor: Mak
e structure a little more consistent.
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor: For filters do not return SignalOperatorDto if it is cons
t, but return a filter-related DTO, because sich simplifications should be left up to another visitor.
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor: Small improvements to the consistency.
Applying: Synthesizer: Rename Divide Inlets to A and B
Applying: Synthesizer: Nano-Optimization: Rename Divide Inlets to A and B: Generalize code between the MultiplyWithOrigi
n and Divide operator types.
Applying: Move backup code files to Archive folder.
Applying: Synthesizer: OperatorDtoVisitorBase_AfterClassSpecialization
Applying: Synthesizer: Nano-Optimization: OperatorDto Visitors: MathSimplification_OperatorDtoVisitor: First draft.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Add helper methods for handling Vars_Consts operators (Add
 and Mulitply) so they share much of the code. Also implement for the Vars_Consts operators MinOverInlets and MaxOverInl
ets. Implement simple binary operators, except And and Or (Equal, NotEqual, LessThan, GreaterThan, LessThanOrEqual, Grea
terThanOrEqual, Power, Subtract). Simplify some code to not use many intermediate dto variables, which prevents using th
e wrong one, even though it harms debuggability a little.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: And and Or.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Shift operator and the Select operator's ConstSignal varia
tions.
Applying: Synthesizer: Extend OperatorDtoVisitorBase to include all newer DTO types. MathSimplification_OperatorDtoVisit
or: Include overrides even ones that do nothing but delegate to the base, so that it is easier to adapt if the base clas
s gets extra members. Hanlde identity property for addition and multiplication. Annotate more clearly what math transfor
mation is taking place.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Handle most ConstSignal calculation variations the same.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Trivial changes.
Applying: Synthesizer: Nano-Optimization: OperatorDto Structure: Add more ConstSignal OperatorDto variations.
Applying: Synthesizer: ClassSpecialization_OperatorDtoVisitor: Handle many new ConstSignal OperatorDto variations.
Applying: Synthesizer: OperatorDto Structure / ClassSpecialization_OperatorDtoVisitor: Create pre-calculatable OperatorD
to variations for ones that have signal but whose result would not be invariant when just signal is const.
Applying: Synthesizer: Visitors: Override all new DTO's (related to ConstSignal) in MathSimplification_OperatorDtoVisito
r, or seal them in OperatorDtoVisitorBase_AfterClassSpecialization. Also implement all ConstSignal visitations in MathSi
mplification_OperatorDtoVisitor and assume those return the literal signal, even though some of them will get alternate
implementation later.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor
Applying: Synthesizer: More Const OperatorDto variations for OverInlets operators, more DoNothing implementations to the
 MathSimplification_OperatotDtoVisitorBase for visitation of DTO's that eventually result in a calculator.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Handle most varations that will result in a calculator by
doing nothing.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Precalculate a little more.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Annotate with OperatorType names in comment.
Applying: Synthesizer: OperatorDto structure + visitors: Split up the Trigger OperatorDto's in Const/Var variations.
Applying: Synthesizer: Coalesce objects based on OperatorType Pulse to ones based on OperatorType Square. Also move some
 DTO's and Helpers to different namespaces.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: TimePower’s set of Dto’s were weird and so the calculator
names were unclear about what’s var and const.
Applying: Synthesizer: OperatorDto Structure: I was missing a DTO: RangeOverDimension_OperatorCalculator_WithConsts_AndS
tepOne
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Sync the NanoOptimization Test project's variation of this
 class with the Business layer variation of it.
Applying: Synthesizer: MathSimplification_OperatorDtoVisitor: Handle ZeroFrequency.
Applying: Synthesizer: OperatorDtoVisitorBase_AfterMathSimplification
Applying: Synthesizer: OperatorDtoVisitorBase_AfterMathSimplification
Applying: Synthesizer: MachineOptimization_OperatorDtoVisitor
Applying: PreProcessing_OperatorDtoVisitor
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Scaffolding
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Scaffolding
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Implement the first couple of methods.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: In progress...
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: In progress...
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: In progress...
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: In progress...
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: In progress...
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: The bulk of it is finished, but the special cases remain.
Applying: Trivial things
Applying: Architecture: JJ.Framework.Exceptions: Move all Exception types there. Did not rename the namespaces yet, but
everything works.
Applying: JJ.Framework.Exceptions: Rename namespaces and fix NHibernate-related assembly references.
Applying: JJ.Framework.Exceptions: Remove duplicate namespace references.
Applying: JJ.Framework.Exceptions: Correct solutions, adding this new assembly.
Applying: Move CollectionExtensions from JJ.Framework.Common to JJ.Framework.Collections
Applying: Some Readme's in JJ.Framework assemblies.
.git/rebase-apply/patch:28: trailing whitespace.
﻿
.git/rebase-apply/patch:29: trailing whitespace.
Building this project will produce an analyzer .dll, as well as the
.git/rebase-apply/patch:30: trailing whitespace.
following two ways you may wish to package that analyzer:
.git/rebase-apply/patch:31: trailing whitespace.
 * A NuGet package (.nupkg file) that will add your assembly as a
.git/rebase-apply/patch:32: trailing whitespace.
   project-local analyzer that participates in builds.
warning: squelched 31 whitespace errors
warning: 36 lines add whitespace errors.
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Applying: README's
Applying: Framework: Readme's
Applying: JJ.Framework.Reflection: Make ExpressionVisitors' Visitation Less Specific
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Implement and generalize Cache operator visitation.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Curve visitation + refactor Curve's underlying DTO structure
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Implement Visit_Sample_OperatorDto*.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor + Make order of Vars and then Const more consistent for Add, Multi
ply, MinOverInlets and MaxOverInlets.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Give phase tracking and origin shifting Stretch and Squash DTO's
dimension properties, even though they are in practive only about the time dimension.
Applying: Synthesizer: Noise and Random Improvements: Make NoiseCalculator instantiated again. All instances share the s
ame underlying noise data, but each have a different offset, to emulate different random sets.
Applying: Synthesizer: Noise and Random Improvements: Make random offset instance integrity better.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Noise and Random visitation + adaptation of CalculatorCache and D
TO's.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Finished the last visit methods, except for the 'special visitati
on' methods that will get their own visitor anyway.
Applying: Synthesizer: Rename samplingRate in filter OperatorCalculators to targetSamplingRate to differentiate it from
operators whose samplingRate is not the target samplingRate, e.g. the interpolator operator.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Make template method for the most typical OperatorDto processings
 to reduce code and prevent mistakes.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Make template method for a typical OperatorDto processing with a
DimensionStack to reduce code and prevent mistakes.
Applying: Synthesizer: OperatorDtoToCalculatorVisitor: Make template methods for SampleOperator visitation, since those
really only have 2 variations for 12 overloads.
Applying: Trivial things
Applying: Synthesizer: Move non-implemented special visitation methods from OperatorDtoToCalculatorVisitor to SpecialVis
itation_OperatorDtoVisitor. Fill OperatorDto's OutletListIndex properties in OperatorEntityToDtoVisitor. Simplify some O
utletIndex handling in the old PatchCalculatorVisitor.
Applying: Synthesizer: OperatorVisitors: Refactor Operator Visitation to Outlet Visitation for Operators with Multiple O
utlets
Applying: Framework: Minor MvcCollectionExtensions changs. QuestionAndAnswer: Correct the NHibernate persistence, both b
y implementing QueryOver queries as well as correcting some mappings.
Applying: Synthesizer: Comment out most previous DataMigrationExecutor methods.
Applying: Synthesizer: Refactor Away Bundle / Unbundle: Migrate them to InletsToDimension and DimensionToOutlets. Also m
ake a script to delete orphaned EntityPositions, that you can run from the DataMigration utility.
Applying: Synthesizer: Refactor Away Bundle / Unbundle: Register the data migrations in the SQL upgrade scripts.
Applying: Synthesizer: Refactor Away Bundle / Unbundle: Most things gotten rid of, but some optimizations still TODO.
Applying: Synthesizer: Correct more occurrences of the words 'Bundle' and 'Unbundle', which are obsolete.
Applying: Synthesizer: Refactor Away Bundle / Unbundle: Use some specialized calculators for InletsToDimension for Block
 and Stripe interpolation.
Applying: Synthesizer: OperatorDto Visitors: Special Visitation: Failed experiment trying to isolate the concept of writ
ing out Underlying Patches to DTO's in a separate visitor.
Applying: Synthesizer: OperatorDto Visitors: Special Visitation: Put writing out underlying patches in the OperatorEntit
yToDtoVisitor, because it is just 2 lines of code and much easier than trying to separate it into a different class.
Applying: Synthesizer: OperatorDto Visitors: • DimensionToOutlets (visitation with multiple outlets)
Applying: Synthesizer: OperatorDto Visitors: Special Visitation: RangeOverOutlets (visitation with multiple outlets)
Applying: Synthesizer: Coalesce NaN / Infinity of any (pre-calculated) input to NaN output.
Applying: Synthesizer: Special Visitation: Top-level PatchInlets (in progress)
Applying: Synthesizer: Special Visitation: Top-level PatchInlets in the new DtoToCalculator visitor. Also gave PatchInle
t_OperatorWrapper and PatchOutlet_OperatorWrapper the much needed helper properties, that take away confusion about wher
e to get DefaultValue and Dimension from.
Applying: Synthesizer: Use new calculation engine using DTO's (still a lot of bugs). You can switch back to the old work
ing calculation engine with a config setting. Correct some missing _stack calls in OperatorEntityToDtoVisitor (it is sti
ll not OK, though). Correct UI bug that you could not select an UnderlyingPatch for a CustomOperator, because the drop d
own as empty (view model was not assigned).
Applying: Synthesizer: Correct the bug that UI showed the text 'labelDimension' instead of 'Dimension' in the OperatorPr
operties_ForPatchInlet and OperatorProperties_ForPatchOutlet.
Applying: Synthesizer: OperatorDto Visitors: Add missing visitation of Power_OperatorDto_VarBase_Exponent2, 3 and 4.
Applying: Synthesizer: OperatorEntityToDtoVisitor: Put up defense against missing _stack pushes and pops, by overriding
the VisitOperatorPolymorphic and checking that stack count is exactly 1 more at the end than at the beginning. This lead
 to a missing stack pop in VisitHold.
Applying: Synthesizer: Visitors: Add stack count checks in Visit*Polymorphic methods. (Not applied consistently yet.)
Applying: Synthesizer: OperatorDto Visitors:  Add stack count checks in all relevant Visit*Polymorphic methods. Use a he
lper class to delegate to. The helper method does suffer from delegatis, but prevents repeated code.
Applying: Trivial changes
Applying: Synthesizer: Move backup code files to Archive.
Applying: Synthesizer: Migrate_SetInletDefaultValues (programmed, not run yet)
Applying: SOME PREVIOUS CHECK-INS DID NOT BUILD! Removed some references to non-existing code files. Strange, I am sure
that I tried to build it before, after removing code files.
Applying: Correct references to JJ.Framework.Exceptions, even though I am not sure what was wrong with them in the first
 place, just that Rebuild failed all the time.
Applying: Synthesizer: OperatorEntityToDtoVisitor: Coalesce null-inlets differently: Always use Inlet.DefaultValue if pr
esent. Most of the time coalesce to 0. For Multiply it coalesces to 1. For aggregates over inlets it does not get null-c
oalesced at all.
Applying: Synthesizer: OperatorEntityToDtoVisitor: Abstract the Inlet visit methods’ calls to ‘Process_Inlet_CoalesceToD
efaultOr0’, ‘Process_Inlet_CoalesceTo1’, ‘Process_Inlet_DoNotCoalesce’.
Applying: Synthesizer: OperatorEntityToCalculatorDirectlyVisitor: Replace null-coalescing Inlet inputs with less code.
Applying: Synthesizer: Give default values to inlets of Divide, MultiplyWithOrigin and OneOverX for multiplicative ident
ity. Also migrate the existing inlets' data.
Applying: Synthesizer: Visitors: Give loop a special inlet coalescing, for ReleaseEnd and NoteDuration, which should bot
h coalesce to quasi-infinity.
Applying: Synthesizer: Visitors: Generalize empty Inlet coalescing to a OperatorEntityVisitorBase_WithInletCoalescing ba
se class to prevent repeated code among the (two) concrete visitors that need it.
Applying: Synthesizer: Copy simpler handling of math properties for variable inlet count, from the business assembly to
the NanoOptimization tests.
Applying: Synthesizer: Rename some visitors in JJ.Business.Synthesizer.NanoOptimization.Tests.
Applying: Trivial change
Applying: Trivial change
Applying: Trivial change
Applying: Trivial change
Applying: Trivial change
Applying: Synthesizer: Nano-Optimization: ClassSpecialization-MathSimplification Chicken-and-Egg Problem: Solve it in th
e NanoOptimization.Tests project.
Applying: Synthesizer: ClassSpecialization-MathSimplification Chicken-and-Egg Problem: Solved with a few code lines: Let
 OperatorDtoVisitor_MathSimplification inherit from OperatorDtoVisitor_ClassSpecialization. In the OperatorDtoVisitorBas
e.VisitOperatorDto_Polymorphic keep revisiting until you do not get a different DTO instance back anymore, so that repla
cement DTO’s always get revisited.
Applying: Synthesizer: OperatorDtoVisitors: Remove visitation from derived classes, because now replacement DTO's are al
ways revisited by the OperatorDtoVisitorBase class.
Applying: Trivial changes
Applying: Rename project  JJ.Business.Synthesizer.Tests.NanoOptimization to JJ.Business.SynthesizerPrototype.Tests.
Applying: Fix some solution source control bindings after moving a project to different folder.
Applying: Synthesizer: Split up SynthesizerPrototype into multiple projects (in progress)
Applying: Synthesizer: Split up SynthesizerPrototype into multiple projects.
Applying: Synthesizer: SynthesizerPrototype projects: Remove empty folders and rename some namespaces and tests in accor
dance with the new project names.
Applying: SynthesizerPrototype: Remove unnecessary test variations
Applying: SynthesizerPrototype.Roslyn: Refactor so only a few classes need to be public and OperatorDtoToCSharpVisitor i
s not an abstract class, but better separated from OperatorDtoToOperatorCalculatorCSharpGenerator and OperatorDtoToPatch
CalculatorCSharpGenerator.
Applying: SynthesizerPrototype.WithInheritance: Encapsulate the classes better. For .WithStructs this is not possible, b
ecause concrete calculator types must be used in the .Tests project.
Applying: Synthesizer: Solve repeated code in OperatorDtoToCalculatorVisitor and OperatorEntityToCalculatorDirectlyVisit
or's Execute methods by delegating to VisitorHelper.
Applying: Trivial changes
Applying: Synthesizer: Power calculators were not all instantiated. Forgot to override Visit_Power_OperatorDto_VarBase_E
xponent2, Visit_Power_OperatorDto_VarBase_Exponent3 and Visit_Power_OperatorDto_VarBase_Exponent4 in OperatorDtoToCalcul
atorVisitor so now I implemented those.
Applying: Synthesizer: OperatorDto Visitors: Special Visitation: Reset operators.
Applying: Synthesizer: Presentation: Get rid of feature switch 'alwaysRecreateDiagram'.
Applying: Trivial changes
Applying: Synthesizer: Move Creating CacheCalculator to a separate visitor, even though it does not solve transformation
 of dimension values while caching.
Applying: Synthesizer: Try solving transformation of dimension values while caching. It did not work, so outcommented. B
ut I left in the refactorings of the Stretch OperatorCalculators so that they delegate to flatter calculation methods. I
 will a flat structure like that later anyway. Also renamed the namespace of CollectionExtensions and CollectionExtensio
ns_Recursive from Common to Collections. It was already moved to JJ.Framework.Collection before.
Applying: Synthesizer: OperatorDtoVisitors: Correct that Cache did not work, due to not cloning the dimension properties
 to the DTO.
Applying: Synthesizer: OperatorDtoVisitor_StackLevel
Applying: Synthesizer: C# Code Generation: Port prototype code to main business layer (even though generated code does n
ot work yet).
Applying: Synthesizer: C# Code Generation: Rework PatchCalculator abstractions, add preliminary instantiation of run-tim
e compiled calculator to PatchManager.CreateCalculator.
Applying: Synthesizer: Make HardCodedPatchCalculator available from the WinForms app.
Applying: Synthesizer: AudioOutput: Use AudioOutputApi for creating default AudioOutput at startup. Make some default va
lues configurable.
Applying: Synthesizer: C# Code Generation: Made generated code compilable in the business layer.
Applying: Synthesizer: C# Code Generation: Generated code now produres correct sound for the default sine patch, but onl
y in mono, not stereo.
Applying: Synthesizer: C# Code Generation: Make stereo work (write values in interleaved way to the buffer).
Applying: Remove unused usings from all code files.
Applying: Synthesizer: C# Code Generation: Implement Subtract.
Applying: Synthesizer: C# Code Generation: Implement comparative operators. Also remove variations on ProcessBinaryOpera
tor, because with a simple switching of 2 lines of code in the caller, I can accomplish the same effect.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Make comparative operator visit methods shorter by delegating more to
 private helpers. Make debug experience more optimal: DebuggerDisplay for ValueInfo. Some DebuggerHidden attributes on f
requently visited, very general methods.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Make more Visit methods single-line by delegating more to the private
 helpers.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Negative operator. Make Subtract visit methods shorter.
Applying: Synthesizer: C# Code Generation: Make white space and comment in generated code a little neater.
Applying: Synthesizer: C# Code Generation: Implement OneOverX operator.
Applying: Synthesizer: Implement IPatchCalculator.Calculate(time) in PatchCalculatorBase, delegating to the overload wit
h buffer, so it always work for backward compatibility, even though eventually you may want to refactor that method away
 anyway.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Absolute operator.
Applying: Synthesizer: C# Code Generation: Power operator implementation.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: For readability omit temporary variables for lines to add to StringBu
ilder, even though it makes debugging less easy.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Visit_Sine_OperatorDto_ConstFrequency_WithOriginShifting.
Applying: Framework: Correct references to JJ.Framework.Exceptions
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement MultiplyWithOrigin.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Divide operator.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Sine operator's misc calculation variations.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Not Operator.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Or Operator
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Or Operator
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Partly implement Square operator (the one with var frequency and phas
e tracking), generalizing the phase tracking of Sine and Square into a single method.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Finish the Square Operator implementation by abstracting the code for
 the Sine implementation.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: SawUp and SawDown Operator implementation.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Triangle Operator (even though something seems wrong with t
he output in a test document).
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Pulse Operator.
Applying: Synthesizer:OperatorDtoToCSharpVisitor: Implement the Stretch operator, even though a variable factor does not
 work due to the wrong DimensionStackLevel variables.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Refactor Stretch operator handling as to better prepare for reuse by
the implementation for the Squash operator.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement the Squash operator, even though with variable factor does
not work yet. (But that is related to a different buf in the use of dimension stack positions.)
Applying: Synthesizer: OperatorDtoToCSharpVisitor: o Origin variables are maintained per dimension stack position, but e
ach operator instance should have its own origin variable.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Refactor out redundant code by making Stretch and Squash DTO's inheri
t from OperatorCalculatorBase_VarFrequency where applicable.
Applying: Synthesizer: Correct the OperatorDtoVisitor_StackLevel so that it only increments the stack level when enterin
g the Signal inlet and not for the other inlets.
Applying: Synthesizer: Rename IOperatorDtoWithDimension to IOperatorDto_WithDimension.
Applying: Synthesizer: Correct OperatorDtoVisitor_StackLevel_PerDimensionWriter in the prototype project.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Multiple dimensions: GeneratePositionVariableNameCamelCase seems to o
nly take stack level into consideration, not dimension. + related changes.
Applying: Synthesizer: C# Code Generation: Added in a couple of hacks to make the generated variable names work for now,
 until a more robust solution is implemented.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Use Stack<string> instead of Stack<ValueInfo>. That is enough and sti
pulates everything is about strings in this class.
Applying: Synthesizer: Use Stack<string> instead of Stack<ValueInfo> in the prototype project.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Do not call the base visit method, but call visit on the operands exp
licitly. That makes it more obvious what happens.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Rename variables so that they do not have the suffix 'Name' or 'Liter
al', so the formulas pop out and look more like the eventual C# code.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Rename the variables ‘pos’ to ‘position’ and ‘prevPos’ to ‘previousPo
sition’.
Applying: Synthesizer: Apply restructurings of code style to SynthesizerPrototype project, that were already applied to
the main project.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Plat around with prefixes and numberings trying to get unique variabl
e names.
Applying: Synthesizer: Trivial things. JJ.Framework.Collections: Improve CollectionExtensions_Recursive.
Applying: Comment
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Work on making generated variable names unique.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Work on making generated variable names unique.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Generate variable names that are unique and clear and versatile.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Make Triangle calculation use several different variable names, now t
hat generating unique variable names is much more versatile. Also call GenerateUniqueVariableName directly instead of ca
lling GenerateOperatorVariableName.
Applying: Comment
Applying: Synthesizer: C# Code Generation: Replace the DTO's OperatorTypeName property with the non-ambiguous OperatorTy
peEnum.
Applying: Move code file backups to archive.
Applying: Remove empty source code folder.
Applying: Synthesizer: Make PatchCaculator GetValue and SetValue implementations more consistent: PatchCalculatorBase sh
ould implement GetValue(int), all GetValue methods are now non-overridable. Remove all the non-overridable GetValue meth
ods from the derived PatchCalculators and make their SetValue implementations call the base class consistently.
Applying: Synthesizer: C# Code Generation: Implement SetValue by Name method. Also split up single code generation metho
ds into several pieces.
Applying: Synthesizer: OperatorDtoToPatchCalculatorCSharpGenerator: WriteSetValueByDimensionEnumAndListIndex.
Applying: Synthesizer: OperatorDtoToPatchCalculatorCSharpGenerator: WriteSetValueByNameAndListIndex.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Preliminary code for gathering up extended dimension variable informa
tion.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Put DimensionVariableInfo in a single dictionary for both CustomDimen
sionNames and StandardDimensionEnums, just using a composite key, because that makes the code a little simpler.
Applying: Synthesizer: C# Code Generation: Add more dimension variable information to the OperatorDtoToCSharpVisitorResu
lt.
Applying: Synthesizer: C# Code Generation: Adapt local variable declaration and assignment to use the dimension variable
 information.
Applying: Synthesizer: C# Code Generation: Use dimension variables correctly as fields and local variables in the Calcul
ate method.
Applying: Synthesizer: C# Code Generation: Assign dimension values in the SetValue methods (next to the input variables)
.
Applying: OperatorDtoToPatchCalculatorCSharpGenerator: Change subdivision into SetValue method writing methods.
Applying: Synthesizer: OperatorDtoToPatchCalculatorCSharpGenerator: Pass visitorResult to WriteSetV is not a valid attri
bute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
alue* methods. Exclude dimensions without a dimension there, unless it is the anonymous dimension.
Applying: Synthesizer: Give OperatorDto's a DimensionStackLevel a consecutive sequence starting at 0 for each dimension,
 instead of one sequence for all the dimensions at the same time, which made certain assumptions elsewhere in code not w
ork.
Applying: Synthesizer: Now that DimensionStackLevel starts at 0 for each dimension, you can make the code easier that se
lects the first dimension variables.
Applying: Synthesizer: Turn Operator DTO's CustomDimensionName into CanonicalCustomDimensionName.
Applying: Synthesizer: Correct tiny error in handing CanonicalCustomDimensionName that resuled in no sound.
Applying: Synthesizer: C# Code Generation: Make dimension variables in generated code clearer by adding letters to the d
imension alias, and only using a number for the dimension stack level, so it is not confusing that they are two numbers,
 one of which part of the dimension alias, one of which the dimension stack level.
Applying: Synthesizer: Migrate_OperatorType_Select_ToSetDimension.
Applying: Synthesizer: Refactor Away Select Operator
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement GetDimension and SetDimension Operators.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Reverse Operator
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement Round Operator.
Applying: Some Resharper refactorings
Applying: Synthesizer: Program BiQuadFilterWithoutFields, but not used yet. Move around members of OperatorDtoToCSharpVi
sitor.
Applying: Synthesizer: Resharper: Apply implicit new array item types.
Applying: Synthesizer: C# Code Generation: Implement LowPassFilter_AllVars.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Implement HighShelfFilter's AllVars variation.
Applying: Synthesizer: C# Code Generation: Implement all the filter operators' AllVars variations.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Sort members by alphabet.
Applying: Synthesizer: C# Code Generation: Make filter variables a0, a1, a2, a3 and a4 local variables, not long lived v
ariables, remembered in fields. This only counts for the AllVars variations of the filter calculations.
Applying: Synthesizer: C# Code Generation: Preliminary implementation of the ManyConsts variation of the LowPassFilter.
However, this is not the final version, not only because it does not produce sound, but also because you could pre-calcu
late the filter coefficients at run-time-compilation-time.
Applying: Synthesizer: C# Code Generation: Implement LowPassFilter's ManyConsts calculation variation. The coefficients
in the filter calculation can be numeric literals inserted in the generated code. This also involved extending the prope
rties in some DTO's and yielding over infrastructure variables to those DTO's. It is yet to be applied to the other filt
er types. Later more infrastructure properties will be put in the DTO's too. Now that is only applied to the LowPassFilt
er's ManyConsts variation. Also renamed the DtoHelper to DtoCloner, which makes the numbero changes in code a little lar
ger.
Applying: Synthesizer: C# Code Generation: Implement all Filter's ManyConsts variations.
Applying: Synthesizer: C# Code Generation: Trivial adaptations and do not use _samplingRate or _nyquistFrequency fields
in generation code, because those can become number literals in the generated code.
Applying: Synthesizer: C# Code Generation: Use numeric literals for ChannelIndex and ChannelCount. Also fields from Patc
hCalculatorBase that were made obsolete by this.
Applying: Synthesizer: Prevent code repetition partially in OperatorDtoVisitor_MathSimplification regarding pre-calculat
ing filter coefficients.
Applying: Synthesizer: OperatorDtoToCSharpVisitor: Rename ProcessNumber to PutNumberOnStack and avoid it in places where
 you do not need the stack and there use CompilationHelper.FormatValue directly instead.
Applying: Resharpering
Applying: Resharpering: remove unused usings in Synthesizer.sln.
Applying: Resharpering Synthesizer.sln. Also fixed that CurveDetails Ad is not a valid attribute name: Third Party/Fluen
tNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
d and Remove buttons were missing.
Applying: Synthesizer.sln: Resharpering. Also solved bug that PatchDetailsForm could not be closed.
Applying: Synthesizer.sln: Resharpering
Applying: Synthesizer.sln: Resharpering
Applying: SOLVE BUILD ERROR: In JJ.Business.Synthesizer.SampleCalculatorFactory.
Applying: Synthesizer: C# Code Generation: Implement Scaler operator.
Applying: Synthesizer: Rename ArrayCalculatorBase.CalculateValue to Calculate.
Applying: ArrayCalculators: Got rid of a lot of the virtual method calling by using an interface and new methods instead
 of overrides. The 'older' calculation engines still have to go through an interface, but the future compiled mode opera
tion will be able to omit all virtual method calling when it comes to array calculators, making inlining possible.
Applying: Synthesizer: Use general ICalculatorWithPosition interface for CurveCalculators. Looked if CurveCalculators ha
d virtual method call problems, but they did not. Their virtual method calls were due to the virtual methods of the unde
rlying ArrayCalculators, which already did not have any virtual methods anymore.
Applying: Synthesizer Rename ISampleCalculator.CalculateValue to Calculate.
Applying: Synthesizer.sln resharpering.
Applying: Synthesizer: Refactor away (Optimized) CurveCalculators, using the ArrayCalculator abstractions directly to en
hance method inlining. Framework: Make AppSettings class handle nullable types better (untested! lazy programmer (me)).
Applying: Synthesizer: C# Code Generation: Implemented a lot of code for the Curve operator, but not entirely finished y
et.
Applying: Synthesizer: C# Code Generation: Curve calculator works, but not elegant yet.
Applying: Synthesizer: C# Code Generation: Generalize code around using Curve's ArrayCalculators to more general than ju
st Curve.
Applying: Synthesizer: C# Code Generation: Implement Noise operator, but not very elegantly.
Applying: Synthesizer: Mess around with the Random Calculator abstractions.
Applying: Synthesizer: C# Code Generation: Override all OperatorDtoToRawCSharpVisitor and throw NotImplementedExceptions
 to signal better which operator types are not implemented yet.
Applying: Synthesizer: Refactor away SampleCalculator abstractions replacing them totally by the ArrayCalculator abstrac
tions.
Applying: Synthesizer: Move some Calculation classes from a sub-namespace to the main Calculation namespace.
Applying: Move backup code files to archive.
Applying: Synthesizer: SampleCalculator abstractions: Rename some classes.
Applying: Synthesizer: C# Code Generation: Implement a few variations of the Sample operator calculation. Also refactor
generating calculator variable names and using the calculator cache accordingly.
Applying: Synthesizer: C# Code Generation: Samples: First draft of variation 'ConstFrequency_NoOriginShifting', which ha
s quite some code structure to it. It does run-time compile yet.
Applying: Synthesizer: C# Code Generation: Sample implementation (in progress).
Applying: Synthesizer: C# Code Generation: Sample implementation: Use CanCastToInt32 instead of CanCastToNonNegativeInt3
2WithMax, even that might not even be required.
Applying: Synthesizer: C# Code Generation: Sample implementation: Do not use CanCastToInt32, because in case of overflow
 nothing goes wrong.
Applying: Synthesizer: C# Code Generation: Sample implementation: remove some unused members.
Applying: Synthesizer: C# Code Generation: Visit_Sample_OperatorDto_ConstFrequency_StereoToMono_NoOriginShifting: First
draft. Does not work yet.
Applying: Synthesizer: C# Code Generation: Visit_Sample_OperatorDto_ConstFrequency_StereoToMono_NoOriginShifting: Can ru
n-time compile, but could be made simpler.
Applying: Synthesizer: C# Code Generation: Visit_Sample_OperatorDto_ConstFrequency_StereoToMono_NoOriginShifting finishe
d.
Applying: Synthesizer: C# Code Generation: Implementation of many variation of sample calculation. Not all tested, and a
 lot of code repetition should be solved.
Applying: Synthesizer: C# Code Generation: Sample implementation: Reorganize pieces of code to reuse pieces that repeat.

Applying: Synthesizer: C# Code Generation: Sample implementation: Separate the rate calculation from the phase calculati
on, in an attempt to discover generalizable repeated parts.
Applying: Synthesizer: C# Code Generation: Sample implementation: Separate out repeating code regarding rate calculation
s and phase calculations.
Applying: Synthesizer: C# Code Generation: Implement exponent operator.
Applying: Synthesizer: C# Code Generation: Some generalization of pieces of code.
Applying: Synthesizer: C# Code Generation: Work on generalizing phase tracking / origin shifting code generation.
Applying: Synthesizer: C# Code Generation: More generalized use of phase tracking and origin calculations.
Applying: Synthesizer: C# Code Generator: AverageOverInlets implementation.
Applying: Synthesizer: C# Code Generation: ClosestOverInlets implementation.
Applying: Synthesizer: C# Code Generation: Implement ClosestOverExp Operator. Correct the placement of operator name com
ment in the generated code. Sort the members of OperatorDtoToRawCSharpVisitor. Correct Scaler operator, because signal w
as pushed onto the stack instead of the output.
Applying: Synthesizer: Resharpering
Applying: Synthesizer: C# Code Generation: MaxOverInlets implementation. Also a lot of Resharper refactorings.
Applying: Synthesizer: C# Code Generation: MinOverInlets implementation
Applying: Synthesizer: C# Code Generation: Preliminary RangeOverOutlets implementation.
Applying: Synthesizer: C# Code Generation: RangeOverOutlets implementation finished.
Applying: Synthesizer C# Code Generation: RangeOverDimension operator implementation.
Applying: Synthesizer: C# Code Generation: DimensionToOutlets implementation.
Applying: Synthesizer: C# Code Generator: The operator title comments and enters were not placed correctly for dimension
 transformers.
Applying: Synthesizer: C# Code Generation: First draft of better Reset method implementation.
Applying: Synthesizer: C# Code Generation: Make generated Reset method code compile, but it does not function correctly
yet.
Applying: Synthesizer: C# Code Generation: Bugs regarding dimension transformation / reset methods: Rename GenerateOpera
torTitleComment to AppendOperatorTitleComment. Correct Shift operator calculation, that added, instead of subtracting. P
ut line generation right inside the AppendLine call again. Put non-recursive reset code earlier on in the reset code of
an operator, before calling the rest of the calculation, rename _sb to _sbCalculate. Still, not all bugs are fixed.
Applying: Synthesizer: C# Code Generation: Provide valueBefore and valueAfter to the ArrayCalculators. Try fix Stretch a
nd Squash WithPhaseTracking by shifting around writing lines to the Calculate and Reset methods respectively.
Applying: Synthesizer: C# Code Generation: StretchOrSquash with PhaseTracking: doe calculate StringBuilder calls separat
ely from Reset StringBuilder calls, because the order is so different. Do pre-generate the lines that they have in commo
n.
Applying: Synthesizer: ArrayCalculator does not have to have public fields. They can be properties, that redirect to the
 protected fields, because they are publically accessed only in a non-performance-critical part.
Applying: Synthesizer: C# Code Generation: Compile a patch only once per channel, not once per note per channel.
Applying: Synthesizer: Implement the Reset operation for filters, phase trackers and origin shifters.
Applying: Synthesizer: C# Code Generation: Implement Hold operator, but the code is terrible.
Applying: Synthesizer: C# Code Generator: Hold Operator implementation: Did it with a less serious hack than before. See
 comment in code.
Applying: Trivial things in Spectrum_OperatorCalculator.
Applying: Synthesizer: Rename Reverse's Speed operand to Factor.
Applying: Synthesizer: C# Code Generation: Implement reverse through DTO translation.
Applying: Synthesizer: C# Code Generation: Chance NoiseCalculator abstraction back to fully black-boxed version, instead
 of the NoiseHelper / NoiseInfo / NoiseCalculator abstractions that tried to awkwardly generalize it to handling array c
alculators. NoiseCalculator, though simple, neatly takes care of a few things that we then need not worry about, while s
till maintaining inlining capabilities.
Applying: Synthesizer: C# Code Generator: Remove redundant method for the Reverse operator.
Applying: Synthesizer: C# Code Generation: Random operator: Not so much code generation, but rewiring the random operato
rs with advanced interpolations to one with Stripe interpolation with an interpolator in front of it.
Applying: Synthesizer: OperatorDto pre-processing: Rewire the InletsToDimension operator variations with advanced interp
olations to one with stripe interpolation with an interpolator behind it.
Applying: Synthesizer: C# Code Generation: Generate code for the Random operator. (First draft. Does not work yet.)
Applying: Synthesizer: Compile all ArrayCalculators into the run-time compiled dll, not just a selection.
Applying: Synthesizer: C# Code Generation: Make instantiating ArrayCalculators from the generated code more robust, by u
sing the ArrayCalculatorFactory, instead of strange assumptions and magic conventions in the about constructor argument
lists.
Applying: Synthesizer: C# Code Generation: Random operator implementation: Apply phase tracking and usage of rate. Stopp
ing the work on random operator for now. The functionality of Random is still limited to block and stripe interpolation,
 but all the fine details about samplers and interpolators is postponed to a next project.
Applying: Synthesizer: C# Code Generation: OperatorDtoToRawCSharpVisitor: Move Process methods closer to their correspon
ding Visit methods.
Applying: Synthesizer: C# Code Generation: OperatorDtoToRawCSharpVisitor: Move some helper methods closer to where they
are used.
Applying: Sythesizer: DTO processing / C# Code Generation: Add and properly set ChannelDimensionStackLevel property. Als
o moved the DimensionStackLevel property from IOperatorDto / OpertorDtoBase to IOperatorDto_WithDimension + implementors
.
Applying: Synthesizer: Misc rework: Make MultiThreadedPatchCalculator’s _patchCalculators channel-first order + simplify
 its initialization.
Applying: Synthesizer: C# Code Generation: Solve repeated field handling code in AppendResetMethod and AppendCalculateMe
thod in OperatorDtoToPatchCalculatorCSharpGenerator.
Applying: Synthesizer: C# Code Generator: Move Process_StretchOrSquash_* methods closer to where they are used.
Applying: Synthesizer: C# Code Generation: OperatorDtoToRawCSharpVisitor: Rename a lot of simple methods' verbs from 'Ge
nerate' to 'Get'.
Applying: Synthesizer: C# Code Generation: OperatorDtoToRawCSharpVisitor: Sort helper methods and rename one more helper
's verb from 'Generate' to 'Get'.
Applying: Synthesizer: DTO Visitors / C# Code Generation: Fix that aggregate over inlets processing tripped over empty i
nlets. It is however fixed with an unwritten agreement between OperatorEntityVisitorBase_WithInletCoalescing and its der
ived classes.
Applying: Trivial changes
Applying: Synthesizer: Refactor away IPatchCalculator.Calculate(time), because in practice we always calculate whole buf
fers at a time, for performance. This required AudioFileOutputCalculatorBase to be refactored to calculate by chunk.
Applying: Synthesizer: OperatorDto processing: Full in TargetChannelCount in Sample_OperatorDto's. In AudioFileOutputCal
culatorBase solve unsafe cast from double to float. (Do a cast from float to double instead.)
Applying: Synthesizer: OperatorDto Structure: Use IOperatorDto in most places. Note that some unit tests still fail.
Applying: Synthesizer: Rename things like 'CubicInterpolation' to just 'Cubic'.
Applying: Synthesizer: Archive the (probably) never to be used code for polyphonic patch / single threading.
Applying: Rename an archive folder
Applying: Synthesizer: Presentation: Fix that property boxes did not show labels anymore.
Applying: JJ.Framework: Port lots of file-related framework elements from Circle code base to JJ code base.
Applying: JJ.Framework: Fix up clean-up code of JJ.Framework.IO.Tests.
Applying: JJ.Framework minor details
Applying: JJ.Framework.IO: Make tests not delete delete files and folders upon test setup anymore, because new paths are
 generated upon each test.
Applying: JJ.Framework.IO.Tests: Delete left-behind test files upon pre-build.
Applying: Synthesizer: Put some more members in Operator Wrappers, for convenience. Avoid ISideEffect variables. Make th
em new statements with immediate .Execute() method calls at the end of them.
Applying: Synthesizer: Trivials: OperatorDto's: Avoid some casts between OperatorDto types now that IOperatorDto is used
 primarily instead of OperatorDtoBase. Get rid of a _targetSamplingRate parameter here and there in the DTO processing,
where it is not needed anymore.
Applying: Synthesizer: DTO Processing: Use a more neutral ArrayDto in different places, instead of an ArrayCalculatorBas
e, to be able to make code handling arrays for sound more independent of the eventual output calculation format.
Applying: Synthesizer: DTO Processing / C# Code Generation: Use ArrayDto at more spots in an effort towards making less
dependent on the output calculators and more on just ArrayDtos.
Applying: Synthesizer: DTO Processing: Add ArrayDto properties to different OperatorDtos, fill them and clone them where
 appropriate. These properties are not yet used.
Applying: Synthesizer: C# Code Generation / DTO Processing: Use the ArrayDtos from the DTO's instead of using Calculator
Cache all over the place.
Applying: Synthesizer: C# Code Generation: InletsToDimension implementation + correct DimensionToOutlets (it was not tre
ated as a dimension tranformer).
Applying: Synthesizer: C# Code Generation: If Operator implementation+ correct faulty max note index bounds check in Mul
tiThreadedPatchCalculator.
Applying: Synthesizer: Prepare Loop_OperatorCalculator_* for porting to the code generator.
Applying: Synthesizer: C# Code Generation: Loop implementation (not perfect).
Applying: Synthesizer: C# Code Generation: Loop operator implementation: Put GetTransformedPosition call on one line in
the generated code.
Applying: Synthesizer: C# Code Generation: TimePower Operator implementation.
Applying: Synthesizer: C# Code Generation: Slight refactorings of Loop_OperatorCalculator_Helper.
Applying: Synthesizer: C# Code Generator: Generate loop calculation right inside the OperatorDtoToRawCSharpVisitor, inst
ead of delegating to a helper, because that saves us from calculating operand output at times it is not relevant (which
changes during the calculation).
Applying: Synthesizer: C# Code Generation: Give generated loop operator code proper indentation.
Applying: Synthesizer: C# Code Generation: SortOverInlets operator implementation. Finished porting it from the Operator
Calculator solution, but it worked strangely there too. For inlets go in, but a dimension comes out, and you cannot set
the dimension from the property box in the UI.
Applying: Synthesizer: C# Code Generation: Remove private classes OriginShiftingInfo and PhaseTrackingInfo from Operator
DtoToRawCSharpVisitor, since a string phase variable can be used instead.
Applying: Synthesizer: C# Code Generation: Strategic uninlining options can be turned on or off in the config file. It w
as quite some work and rendered 0% performance gain. Not entirely elegant, but acceptable and not worth spending another
 minute at.
Applying: Synthesizer: Libraries: Data access layer changed, working on Business layer. Also renamed changed CommonTitle
s to always go through CommonTitlesFormatter and renamed ValidatorBase.Object to ValidatorBase.Obj, which affects a lot
of code files.
Applying: Make accessing resource text simpler in JJ.Framework.Presetation.Resources and in Synthesizer (not finished).
Applying: Make working with string resources easier for Synthesizer, but also renamed the resource-related classes of JJ
.Framework.Valdiation.
Applying: Synthesizer / JJ.Framework.Presentation.Resources: Change some resource names.
Applying: Synthesizer: Clean up some resources, generalize some.
Applying: Synthesizer: Remove another unused resource.
Applying: Synthesizer / Resource Stri is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitat
tributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
ngs: Generalize some more resource strings to reusable solutions.
Applying: Framework: Rename ValidatorBase to ValidatorBase_WithoutConstructorArgumentNullCheck.
Applying: Framework: Add and use new ValidatorBase, that actually does an argument null check. This prevents false posit
ives about nullability from Resharper.
Applying: Synthesizer: Validation: Make Operator validation and warning validation non-recursive, because the flat list
of Patch will do.
Applying: Synthesizer: Generalize some resource strings.
Applying: Synthesizer: NotNull attributes in ResourceFormatter.
Applying: Synthesizer: Reworking user-friendly entity identifiers and validation message prefixes.
Applying: Synthesizer: Rework user-friendly identifiers and validation message prefixes.
Applying: User-friendly entity identifiers.
Applying: Synthesizer: Work on user-friendly entity identifiers.
Applying: Synthesizer: Improve user-friendly entity identifiers.
Applying: Synthesizer: Rename 'GetIdentifier' to 'GetUserFriendlyIdentifier'
Applying: Synthesizer: Improve string resources.
Applying: Synthesizer: Way better delete validation messages for Sample, Curve and Patch.
Applying: Synthesizer: Delete constraint details.
Applying: Synthesizer: Working on UI for libraries functionality.
Applying: Synthesizer: Libraries in DocumentTree view, first draft.
Applying: Synthesizer: UI: LibraryGrid
Applying: Synthesizer: UI: Generalize GridPresenter code.
Applying: Synthesizer: UI: Make GridPresenterBase code shorter by avoiding code repetition.
Applying: SafeFileOverwriter
Applying: Synthesizer: LibraryGridUserControl + generalized GridUserControlBase first draft.
Applying: Synthesizer: LibraryGridUserControl + GridUserControlBase.
Applying: Synthesizer: Improve GridUserControlBase and apply it in CurveGridUserControl.
Applying: Synthesizer: Improve GridUserControlBase + implementations.
Applying: Synthesizer: GridUserControlBase: Do forgotten  DataGridViewColumn.Width assignment.
Applying: Synthesizer: Refactor AudioFileOutputGridUserControl to use GridUserControlerBase.
Applying: Synthesizer: Base DocumentGridUserControl on GridUserControlBase.
Applying: Synthesizer: Base PatchGridUserControl on GridUserControlBase.
Applying: Synthesizer: Base SampleGridUserControl on GridUserControlBase. Also use nameof expressions to identify the co
lumn names in the GridUserControlBase-derived classes, which prevents errors.
Applying: Synthesizer: Base ScaleGridUserControl on GridUserControlBase.
Applying: Synthesizer: Replace GridUserControlBase protected method AddColumn by variations AddHiddenColumn, AddAutoSize
Column, AddColumnWithWidth and also still a simpler AddColumn method.
Applying: Synthesizer: Style SpecializedDataGridView better.
Applying: Synthesizer: LibraryGridClose action.
Applying: Synthesizer: Libraries: Lots of code for the LibrarySelectionPopup, but not the WinForms part yet.
Applying: Synthesizer: LibrarySelectionPopup (in progress)
Applying: Synthesizer UI: LibraryRemove user action, fix some bugs regarding Library UI elements.
Applying: Synthesizer: Libraries UI: Solve hacking in HigherDocumentID into empty LibrarySelectionPopupViewModel.
Applying: Synthesizer: Work around WinForms' bug that hidden ID column becomes visible (in the LibrarySelectionGridUserC
ontrol).
Applying: Synthesizer: Move entity classes from JJ.Data.Synthesizer namespace to JJ.Data.Synthesizer.Entities.
Applying: Synthesizer: Move classes from the JJ.Data.Synthesizer.DefaultRepositories assembly to the JJ.Data.Synthesizer
 assembly.
Applying: Synthesizer Architecture: Move classes in JJ.Data.Synthesizer.DefaultRepositories.Interfaces namespace to JJ.D
ata.Synthesizer.RepositoryInterfaces namespace.
Applying: Synthesizer: LibraryProperties view: ViewModel, ToViewModel, ToEntity and some refactorings and preparations.
Applying: Synthesizer Architecture: Simplify OperatorPropertiesPresenterBase in preparation for making an even more gene
ral PropertiesPresenterBase abstraction.
Applying: Synthesizer Architecture: Move code from OperatorPropertiesPresenterBase to PropertiesPresenterBase. Also remo
ve unused usings from JJ.Presentation.Synthesizer.
Applying: Synthesizer: Use PropertiesPresenterBase for all PropertiesPresenters. Also program the new LibraryPropertiesP
resenter, although I have not tested it.
Applying: Put backups after migrating JJ.Framework.sln in archive folder.
Applying: Finish up LibraryProperties view.
Applying: Synthesizer: Libraries UI: Include external patches in UnderlyingPatchLookup, based on an extension method Get
PatchesAndLowerDocumentPatches, which returns all patches that can be used.
Applying: Synthesizer: Libraries: Checked delete constraints on DocumentReferences and Patches regarding documents' abil
ity to link to eachother. Also automatically let Resharper join throw exceptions with assignments. That's why so many fi
les are changed.
Applying: Synthesizer: Libraries: Mention document information in Patch delete validation message if Patch is external.
Double click on library tree node now opens the library properties.
Applying: Synthesizer: LibraryPatchProperties view. In essense libraries works now.
Applying: Synthesizer: Libraries feature: Rename 'CurrentPatches' to 'Instrument'. Fix the clipped button text 'Add to I
nstrument'.
Applying: Synthesizer: Libraries: DocumentTree view: Some preparatory rework for introducing Patch groups into Library t
ree nodes.
Applying: Synthesizer: Libraries: Presentation: Small refactorings in preparation for Patch groups in Library tree nodes
.
Applying: Synthesizer: Library Patch Groups in UI work in essence.
Applying: Trivial refactorings
Applying: Synthesizer: Move more DocumentTreeViewModel creation code to RecursiveToDocumentTreeViewModelFactory.
Applying: Synthesizer: Solve bug that with new patch groups, opening the PatchGrid for that group did not work, because
the group key in the PatchGridViewModel was not formatted canonically.
Applying: Synthesizer: Generate message upon LibrarySelectionPopupOK and no library selected.
Applying: External components
Applying: Synthesizer: Presentation: UnderlyingPatchLookup: Add patch group name and library alias or name to the items.

Applying: Synthesizer: Libraries Feature: Patch.Hidden property so higher documents do not see it (not finished): Data l
ayer done. Business layer mostly skipped. Presentation layer: part done; added hidden property to PatchProperties view.
BUG fixed: LibrarySelectionPopup OK was broken. It did not close and the library was not added. Cause: CopyNonPersistedP
roperties was called after setting the successful flag, overwriting the successful flag. BUG fixed: DocumentTree view: l
ibrary patch nodes were no longer added to the parent node for patches that had a group.
Applying: Synthesizer: Libraries Feature: Patch.Hidden: Presentation: In higher documents, hidden patches from lower doc
uments should not be shown in both DocumentTree view and the UnderlyingPatchLookup.
Applying: Synthesizer: Libraries Feature: Presentation: Show number of patches in LibraryTreeNode Caption.
Applying: Synthesizer: Libraries Feature: Presentation: DocumentTree view: Show hidden patches in lighter color.
Applying: Synthesizer: Refactoring: Convert some property accessors to expression bodied members in JJ.Presentation.Synt
hesizer.WinForms.
Applying: Synthesizer: Libraries Features: Business: Validate Patch.Hidden so it cannot be set to true if externally in
use. (Works, but there is code duplication.)
Applying: Synthesizer: Libraries Feature: Solve some code duplication between PatchValidator_Delete and PatchValidator_H
iddenButInUse.
Applying: Synthesizer: Libraries Feature: Remove some more code repetition between PatchValidator_HiddenButInUse and the
 EnumerateDependentCustomOperators(Patch) extension method.
Applying: Synthesizer: Remove unused usings in some projects.
Applying: Synthesizer: Libraries Feature: Put unique check and 'document references itself' check in business layer:
Applying: Synthesizer: Libraries Feature: Unique check on Aliases.
Applying: Synthesizer: Libraries Feature: Show external usages of a patch in the Patch 'UsedIn' information. Also did so
me C# 7 refactorings, so that is why more files are affected.
Applying: Synthesizer: AutoPatch Save: Preparations, but it does not work yet.
Applying: Synthesizer: AutoPatchSave works. Had to include all the Operator properties boxes in the AutoPatch view model
 in order to save a complete Patch graph.
Applying: Synthesizer: Fix wrong switch statement, that had made run-time compilation once-per channel compile again onc
e per concurrent note per channel.
Applying: Synthesizer: Fix bug that SaveAutoPatch would close upon AutoPatchPopup even if there were validation messages
.
Applying: Synthesizer: AutoPatch: Make MoveOperator work and be saved along with SaveAutoPatch. Also attempt to make Sel
ectionOperator work in AutoPatchPopup, but it does not work yet. Bugs remain.
Applying: Synthesizer: AutoPatch: PatchPlay user action.
Applying: Synthesizer: AutoPatchPopup / PatchDetails still did not show Save button at the right time. Use SaveButton in
 Document Tree. Turn title bar buttons from PictureBoxes into Buttons so I get a hover style. Misc refactorings. Move Pl
ay button in PatchDetails from separate spot at bottom to the title bar buttons.
Applying: Synthesizer: PatchPlay / AutoPatch: More creatively combine signals in the patch. This among other things make
s it optional to select an operator. Rework remains.
Applying: Synthesizer: AutoPatch_TryCombineSignals refactorings: Remove last fallback to all patch operators' outlets in
 case no operator selected and no PatchOutlets. Always assign PatchManager.Patch, even when no suitable signal outlets f
ound (for consistency). Split private method AutoPatch_TryCombineSignals up into TryGetSignalOutletsFromOperator and Try
GetSignalOutletsFromPatch for more clarity and less magic.
Applying: Synthesizer: AutoPatch_TryCombineSignals: Clearer validation messages in case no appropriate outlets were foun
d. Architecture: Split Canonical Result classes into JJ.Framework.Business Result classes and JJ.Data.Canonical Result c
lass. That makes syntactic sugar belong/allowed in JJ.Framework.Business Results, while the canonical variation is only
a dumb DTO. Also did some architecture-wide refactorings with Resharper. That's why so many files are affected.
Applying: Synthesizer: Play actions in PatchProperties and LibraryPatchProperties. Unfortunately there is repeated code.
 It sparked ideas about more abilities in the auto-patching.
Applying: Synthesizer: More Play Buttons: Move infra code from Presenter layer to top-level project and reuse it for 3 P
lay actions. Only the TonePlay action has infra, that still needs to be moved out.
Applying: Synthesizer: More Play Actions: PatchGridPlay + extend the GridUserControlBase with adding Image columns, hand
ling keyboard and mouse events and have a PlayRequested event. SpecializedDataGridView now remembers the selected cell a
fter assigning a new DataSource. Also make the Play buttons in the ToneGridEdit look better.
Applying: Synthesizer: Presentation: OperatorPropertiesPlay action.
Applying: Synthesizer: More Play Actions: SamplePropertiesPlay.
Applying: Synthesizer: More Play Actions: SampleGridPlay.
Applying: Synthesizer: More Play Actions: LibraryGridPlay.
Applying: Synthesizer: More Play Actions: Randomize the played sound in LibraryGridPlay.
Applying: Synthesizer: More Play Actions: LibrarySelectionPopupPlay.
Applying: Synthesizer: Simplify the config setting names for the PlayActions' output file path and duration.
Applying: Synthesizer: More Play Actions: LibraryPropertiesPlay.
Applying: Synthesizer: More Play Actions: DocumentGridPlay.
Applying: Synthesizer: More Play Actions: DocumentPropertiesPlay.
Applying: Synthesizer: More Play Actions: CurrentInstrumentPlay. Also make CurrentInstrumentUserControl not so ugly.
Applying: Synthesizer: CurrentInstrument view: More spacing between the patches, so it is clearer which patch the remove
 button is about. Also made the font bold and made the title bar font match it.
Applying: Synthesizer: Make AudioOutputPresenter based on PropertiesPresenterBase. Results: Rename canonicals to get the
 suffix 'Dto', e.g. ResultDto. Make extension methods in JJ.Business.Canonical to convert from Validation framework to B
usiness framework and add 'helper' extensions for business framework too. Revert attempt for Randomizer.GetRandomItem to
 return null in case of value types, because nullability on reference and value types needs two generic method variation
s, but then it says they are ambiguous.
Applying: Synthesizer: Presenters: Make UpdateEntity not have to use the (weird) base.TemplateMethod.
Applying: Synthesizer: More Play Actions: AudioOutputPropertiesPlay.
Applying: Synthesizer: More Play Actions: DocumentTreePlay. Rework remains.
Applying: Synthesizer: More Play Actions: DocumentTreePlay rework: Selected item was not yielded over from user input to
 new view model. Apply the selected node in the view model to the tree view control.
Applying: Synthesizer: More Play Actions: DocumentTreePlay Patch Group.
Applying: Synthesizer: DocumentTreePlay LibraryPatchGroup + DocumentTreeSelectLibraryPatchGroup.
Applying: Synthesizer: More Play Actions: DocumentTreePlay Samples. (Play random sample.)
Applying: Synthesizer: More Play Actions: DocumentTreePlay Libraries. (Play random patch with signal outlet from random
library.)
Applying: Synthesizer: Presentation: LibraryPatchGrids. Some rework and debugging remains.
Applying: Synthesizer: LibraryPatchGrids: Groupless patch grid was never opened. Also if the groupless patch grid is emp
ty, it should still be generated.
Applying: Synthesizer: Libraries: DocumentRefresh action available in DocumentTree view. Document name in command line.
Applying: Synthesizer: Libraries, More Play Actions: Several different changes.
Applying: Missing png file with icon.
Applying: Synthesizer: More Play Actions: Refactoring: Move some grouping code from ToLibraryPatchGridViewModelDictionar
y to PatchManager.
Applying: Synthesizer: Libraries: Give LibraryPatchGrids more meaningful titles.
Applying: Synthesizer: Libraries: Turn 'hidden' parameter into mustIncludeHidden, because they were unclear.
Applying: Synthesizer: WinForms: Make Grids FullRowSelect by default, but for LibraryGrid and LibrarySelectionGrid turn
off FullRowSelect and make space bar respond different depending whether you are on the play cell or the open library ce
ll. Also turn FullRowSelect off for ToneGridEdit, otherwise it does not work. Auto-close app when command line arg docum
ent name does not exist. That is not perfect either, since it does not wait until the user has clicked OK on the message
 box showing that the document was found.
Applying: Synthesizer: Make it part of the Presenter layer that you can open the app with document name and closing it w
hen that document is not found after the user pressed OK on the message box. (Rework remains.)
Applying: Synthesizer: Solve some hacks in DocumentNotFound view.
Applying: Synthesizer: UI: Open Library in new Synth window from Document Tree.
Applying: Synthesizer: Allow opening a Document as well as a specific Patch from the command line.
Applying: Synthesizer: Open LibraryPatch in new Synth instance from DocumentTree.
Applying: Synthesizer: UI: Make dispatch mechanism for opening external documents and patches based on IDAndName, instea
d of ID's. Delegate these actions to presenters, so e.g. documentReferenceID translates to a DocumentToOpen, which makes
 it possible to generically handle the infra from the WinForms layer. By using both ID and Name it is easier to adapt to
 changes in the future.
Applying: Synthesizer: UI: Open (pop up) button in title bars of LibraryGrid and LibrarySelectionPopup.
Applying: Synthesizer: Libraries: UI: LibraryPatchProperties OpenExternally + misc refactorings.
Applying: Synthesizer: Libraries: UI: LibraryPatchGrid OpenItemExternally action.
Applying: Implement SingleOrDefaultWithClearException etc. and use in MainPresenter.Actions. ShowWithDocumentNameAndPatc
hName.
Applying: Synthesizer: UI: Make icon buttons not look clipped.
Applying: Synthesizer: Remove IPatchRepository.GetByName and TryGetByName, because they wouldn't return unique results.
Applying: Move loose backup source files to archive.
Applying: Synthesizer: Libraries: UI: Show Document AliasOrName in CurrentInstrument view in case of external patches.
Applying: Details
Applying: Synthesizer: Solve n+1 problem of Patch ToIDAndNameWithDocumentAliasOrName by using local function and a dicti
onary.
Applying: Synthesizer.WinForms: Make DocumentTreeUserControl's conversion TryGet-Insert-Update-Delete to prevent a lot o
f flashing and resetting the scroll position and remembering the 'expanded' state.
Applying: Synthesizer.WinForms: Make DocumentTree sort node lists if new ones were added. (Flaw: it also should be sorte
d when an item's name is changed.)
Applying: Synthesizer.WinForms: Make DocumentTree nodes sort when name is changed. Earlier it was only upon adding a new
 item.
Applying: Synthesizer: Presentation: Sort LibraryGrid by name. WinForms: Automatically expand certain nodes upon creatio
n. Existing nodes will keep their expansion state automatically, due to full-CRUD conversion from view model to controls
.
Applying: Synthesizer.WinForms: Opening the libraries within the same instance of Synth, but in a separate window. Built
 it in the WinForms layer, while it really belongs in the Presenter layer. Correct disappeared ConvertLibraryPatchGroup
TreeNode creation code.
Applying: Synthesizer: Correct bug that groupless patch grid could not be opened from document tree anymore.
Applying: Synthesizer: Curves at the Bottom: Not finished. Now it shows a single curve both in the center and at the bot
tom.
Applying: Synthesizer: User Interface: Curves at the Bottom: Multiple CurveDetails views can now be visible. Center Curv
eDetails view removed. CurveDetails visibility does not influence the visibility of views in the center anymore. CurveDe
tails views are ordered by name.
Applying: Synthesizer: User Interface: CurveDetails at the Bottom: Control CurveDetails splitter panel visibility based
on any CurveDetails visible.
Applying: Synthesizer: User Interface: Curves at the Bottom: Make splitter widths bigger and consistent. Leave out spaci
ng between individual CurveDetails views.
Applying: Synthesizer: UserControl: Split off ButtonBarUserControl from TitleBarUserControl.
Applying: Synthesizer: User Interface: Curves at the Bottom: Make title labels not visible and button bar BackColor Syst
emColors.Window, be it with a hack.
Applying: Synthesizer: User Interface: Curves at the Bottom: Solve hacks around the title bar's title being hidden and i
ts only occupying the width of the button bar.
Applying: Synthesizer: User Interface: Curves at the Bottom: Reintroduce spacing in between the CurveDetails views.
Applying: Synthesizer: User Interface: Curves at the Bottom: Watermark Titles.
Applying: Synthesizer: User Interface: CurveDetails: Hide axis lines if only just within the bounds of the BackGround re
ctangle. This prevents showing it when e.g. bottom bound is actually 0 but due to a margin, the x-axis is visible anyway
, thus making the axis visible obtrusively most of the time for no reason at all.
Applying: Synthesizer: User Interface: Show CurveProperties as well as CurveDetails upon opening a CurveGrid item.
Applying: Synthesizer: User Interface: Delete Buttons Everywhere: In all properties and details views. Did everything bu
t SampleProperties, ScaleProperties and DocumentTree.
Applying: Synthesizer: User Interface: Delete Buttons Everywhere: Refactor SampleGridDelete and ScaleGridDelete and add
SamplePropertiesDelete and ScalePropertiesDelete actions.
Applying: Synthesizer: User Interface: Delete Buttons Everywhere: Make PatchDetails Delete action delete the selected Op
erator, not the Patch.
Applying: Synthesizer: AutoPatch Improvements: RecreatePatchCalculator upon many data manipulation actions. Fix that Ton
ePlay uses the frequency correctly in case it uses the Current Instrument. The problem was that the TryAutoPatchWithTone
 did not make sense given the way patching works these days. Fixed crash of Patch UsedIn determination in case of uncomm
ented pending operator deletions. Fix that CreateDocumentSave showed message e.g. 'Audio Output is required.' Actually,
the problem was more general: fixed the assumption in TemplateMethod that there is an open document.
Applying: Synthesizer: Trivial details.
Applying: Synthesizer: UI: Distinction between NodeMoving and NodeMoved, so NodeMoving is fast, and NodeMoved can do a f
ull ViewModelToEntity conversion and RecreatePatchCalculator. Some refactoring would be appropriate.
Applying: Synthesizer: Refactor CurveDetailsPresenter action reducing code duplication using a TemplateMethod. Also refa
ctor NodeMoving and NodeMoved code duplication and view model translation handling.
Applying: Synthesizer: Tiny style changes. Renamed a variable.
Applying: Synthesizer: Comment.
Applying: Some auto-generated files in packages folders.
Applying: Trivial things
Applying: Trivial refactorings
Applying: Synthesizer.NAudio refactorings (in progress)
Applying: Refactoring Synthesizer.NAudio and Synthesizer.WinForms.Program.cs. (In progress)
Applying: Synthesizer: Move lots of code from Synthesizer.WinForms.Program to Synthesizer.NAudio.InfrastructureFacade. A
lso stop using ConfigurationHelper and use CustomConfigurationManager instead and make ConfigurationSection classes inte
rnal again.
Applying: Synthesizer: Make infrastructure objects longer lived and simpler to a certain extent. Also fix that you can c
hange the max concurrent notes without anything crashing.
Applying: Synthesizer.NAudio: Make TimeProvider not static.
Applying: Synthesizer.NAudio: Remember original notes in NoteRecycler when changing MaxConcurrentNotes. Do not reset tim
e to 0 in AudioOutputProcessor's Start and Stop methods, or you'll get to hear the notes that were at time 0 last time.
Applying: Synthesizer.NAudio: Make LibraryOpenExternally action not crash on trying to use the Midi devide that is alrea
dy in use.
Applying: Synthesizer.NAudio: Make MidiInputProcessor static and make document windows fight over it without errors occu
ring. The last one to update the infra simply wins.
Applying: Synthesizer.NAudio: Full blown thread-safety. Synthesizer.WinForms: Make Form 'activate' (getting focus) clain
 ownership of the infrastructure, incidentally also doing a refresh. Also fixed, that refresh reverted the data to the c
ommitted data and did not apply view model.
Applying: Synthesizer.NAudio: Ignore Audio device communication failures, instead of a hard thread exception and applica
tion halt. The more luxurious method would be to show validation messages, but that is a higher impact change. Also fixe
d AutoPatchSave action's not working. The 'wrong' DocumentRefresh method was called: the one that did a full ToEntity an
d something tripped over that. Anyway, the private DocumentViewModelRefresh method was to be called, which does not do a
 ToEntity.
Applying: Trivial
Applying: Synthesizer: Add more dimensions
Applying: Synthesizer: Dimensions: For Standard Operator Inlets and Outlets
Applying: Synthesizer: Bootstrapping: Rename Dimension X to Number.
Applying:
Applying: Synthesizer: Dimensions Radians and HighestFrequency. Code Generation: Initialize some dimension values upon R
eset (for instance ChannelIndex, but also SamplingRate and HighestFrequency). Move around some code in the OperatorDtoTo
RawCSharpVisitor.
Applying: Synthesizer: Make HighestFrequency and SamplingRate dimension always translate to a constant, so math optimiza
tion take place.
Applying: Synthesizer: PatchDetails: Make lines connected to the selected operator look thicker if. UnderlyingPatchLooku
p: Sort patches by name within the groups (they were in random order within a group). PatchManager.CreateOperator: Initi
alize PatchInlets and PatchOutlets with DimensionEnum.Number by default. Do note that this makes faulty behavior of Inle
tOutletMatcher more prominent, since it tries to match a lot of PatchInlets with the same CustomOperator inlet.
Applying: Synthesizer: Business: InletOutletMatcher: Keep a candidate list of inlets and outlets, so that e.g. inlets wi
th the same dimension do not get mapped to the same inlet, but get their own unique inlet. (The InletOutletMatcher will
e.g. pick an inlet by name or by dimension or by listindex, so unless you take an already matched inlet off the candidat
e list, you get the same dest inlet returned for multiple source inlets.)
Applying: Synthesizer: Trivial things.
Applying: Synthesizer: Fix JJ.Business.Synthesizer references to non-existent code files.
Applying: Synthesizer: Lots of refactorings around changing the InletOutletMatcher and bugs found. (Still not perfect.)
Applying: Synthesizer: InletOutletMatcher: Match in one direction only, because depending on the direction you could get
 different results in case of ambiguity and things missing at one end or the other. Bumped into massive chicken and egg
problem regarding delete operations in ToEntity, that totally surfaced as validation messages regarding mismatches in Cu
stom Operators and Underlying Patches, throwing me off my game!
Applying: Synthesizer: PatchCreate user action should automatically open PatchDetails and PatchProperties, not stay in P
atchGrid. Fix bugs in DocumentTreeUserControl when trying to select a TreeNode with a certain tag: type checks were not
always performed, making type casts fail.
Applying: Synthesizer: Remove unique constraints on Inlet and Outlet Names and ListIndexes.
Applying: Synthesizer: Rename OperatorHelper to InletOutletSelector.
Applying: Synthesizer: Remove unused usings from business layer.
Applying: Synthesizer: Use custom Tuple types in InletOutletMatcher.
Applying: Synthesizer: Bootstrapping: System Document Reference for All Documents. (Almost finished. Still want to merge
 SystemDocumentManager into just DocumentManager.) . Boostrap Absolute Operator. (Only a prototype, really. Not that wel
l structured at all yet. Work in progress...) Also refactored data framework a little bit.
Applying: Synthesizer: Bootstrapping: Merge SystemDocumentManager with DocumentManager.
Applying: Synthesizer: Bootstrap Absolute Operator: Make the presentation code neat.
Applying: Synthesizer: Boostrapping: Refactor GetOperatorTypeEnum and SetOperatorTypeEnum extension methods. Cache syste
m document. Fix bug that most simple OperatorProperties views could not be opened (typo with OperatorTypeEnums_WithoutAl
ternativePropertiesView).
Applying: Synthesizer: Boostrapping: Migrate UnderlyingPatchID from Data Key to Foreign Key
Applying: Synthesizer: Make OperatorType nullable, wipe it out for the Absolute operator. Bootstrap Absolute operator s
little more.
Applying: Synthesizer: Bootstrapping: Move Properties to PatchInlet.Inlet / PatchOutlet.Outlet: - Migrate ListIndexes fr
om Data property to Inlet and Outlet.
Applying: Synthesizer: PatchInlet/Outlet names from Operator to Inlet/Outlet (part done).
Applying: Refactor away Validator Execute methods. Do validations in the constructor instead.
Applying: Synthesizer: PatchInlet/Outlet names from Operator to Inlet/Outlet: the rest of the work.
Applying: Synthesizer: Refactor operator / underlying patch matching awesomely. Now that you can match inlets and outlet
s directly instead of with a different types for operator and underlying patch, the code looks way more straightforward
for InletOutletMatcher, PatchToOperatorConverter, AutoPatching and validating an operator against the underlying patch.
Applying: Synthesizer: InletOutletMatcher: Add matching by composite keys Name/ListIndex and Dimension/ListIndex. Also s
implify some names in PatchManager.AutoPatch.
Applying: Synthesizer: Bootstrapping: Inlet.WarnIfEmpty: Basics done.
Applying: Synthesizer: Put WarnIfEmpty warning validation in OperatorWarningValidator_Base.
Applying: Synthesizer: Make OperatorWarningValidator_Base not a base class, but a _Basic class, that is called explicitl
y in the Versatile validator and not used as a base class at all.
Applying: Synthesizer: ApplyExternalUnderlyingPatches upon DocumentOpen and DocumentRefresh.
Applying: Synthesizer: Make DocumentActivate do a refresh again, including ApplyExternalUnderlyingPatches. I decided I l
iked that.
Applying: Synthesizer: Turn handling MainForm_Activated on and off through config.
Applying: Synthesizer: At least show the warnings generated upon SaveDocument in a message box.
Applying: Synthesizer: Correct overwriting of OperatorType with CustomOperator in PatchToOperatorConverter.
Applying: Synthesizer: Bootstrapped the 'And' Operator.
Applying: Synthesizer: Change code that references OperatorTypeEnum.CustomOperator to code that rather uses UnderlyingPa
tch != null or no filter at all where appropriate. Also fix the circularity handling of underlying patches. Also fixed S
etOperatorTypeEnum bug that set UnderlyingPatch for System patches that were not finised, e.g. LowPassFilter.
Applying: Synthesizer: Bootstrapping: Inlet/Outlet NameOrDimensionHidden
Applying: Synthesizer: Boostrapping: Move generic GetInletDisplayName and GetOutletDisplayName from CustomOperator_Opera
torWrapper to OperatorWrapperBase. This is response to the OperatorWrapperBase crashing over not having a dimension for
one of the outlets or inlets. Fix bug that NameOrDimensionHidden was not applied for PatchOutlet. Just doing a full refr
esh at the end of the action helped.
Applying: Synthesizer: Bootstrapping: Patch.HasDimension, Operator.HasDimension, Patch.DefaultStandardDimension, Patch.D
efaultCustomDimensionName: First draft almost functional.
Applying: Synthesizer: Bootstrapping: Rework Patch.HasDimension, Operator.HasDimension, Patch.DefaultStandardDimension,
Patch.DefaultCustomDimensionName
Applying: Synthesizer: Bootstrapping: Sine
Applying: Synthesizer: Boostrapping: Refactor away Absolute_OperatorWrapper and And_OperatorWrapper.
Applying: Synthesizer: Bootstrapping: Comparative Operators
Applying: Synthesizer: Bootstrapping: Simpler Operators: Negative, Not, OneOverX, Or, Power, Subtract
Applying: Synthesizer: Split PatchManager into parts: AutoPatcher, PatchGrouper, OperatorFactory and keep mostly crud op
erations in the original PatchManager. Rework remains.
Applying: Synthesizer: Rename Inlet/Outlet ListIndex to Position
Applying: Synthesizer: Inlet/Outlet IsRepeating/RepetitionPosition
Applying: JJ.Framework.Validation: Remove constructor parameters, type arguments and distinction between 'WithoutArgumen
tNullCheck' and with argument null check.
Applying: Synthesizer: Sort Inlets and Outlets consistently everywhere.
Applying: Synthesizer: Boostrapping: Inlet/Outlet IsRepeating/RepetitionPosition: Tons of business logic and presentatio
n logic, except that changing inlets and outlets in the UI does not work yet.
Applying: Synthesizer: Refactor PropertiesPresenterBase for better separation  of phases, so you can execute business be
fore ToViewModel and NonPersisted after ToViewModel. Then make InletCount and OutletCount in OperatorPropertiesPresenter
Base work.
Applying: Synthesizer: Bootstrapping: Inlet/Outlet IsRepeating/RepetitionPosition: Allow IsRepeating to be edited for Pa
tchInlets and PatchOutlets. Correct some logic too, but PatchToOperatorConverters sets Inlet and Outlet count back to 1,
 because InletOutletMatcher says so.
Applying: Synthesizer: Bootstrapping: Repeating Inlets/Outlets: Change InletOutletMatcher. Make assignment of Repetition
Position in the PatchToOperatorConverter more robust. Add IInletOrOutlet to the entity model and with it generalize code
 in the InletOutletMatcher, generalize some EnumExtensions, SortExtensions, LinkTo and Unlink extension methods.
Applying: Synthesizer: Bootstrapping: Make CanSetInletCount and CanSetOutletCount correct and put in one place.
Applying: Synthesizer: Bootstrapping: Repeating Inlets/Outlets: Validate RepetitionPosition sequences are equal.
Applying: Synthesizer: Bootstrapping: Do not delete obsolete inlets and outlets if one of them is part of a repeat. Make
 Repeating Inlets and Outlets go obsolete as a group as a whole, so the sequence stays in tact when the underlying patch
 switches between IsRepeated and not IsRepeated.
Applying: Synthesizer: Bootstrapping: Repeating Inlets/Outlets: ReassignRepetitionPositions at the end of the loop of co
nverting Outlets or Inlets. Background: In the PatchToOperator converter the assignment of Repetition position was depen
dent on the result of the previous loop iteration, because the result of Sort() changes when Outlet data is changed.
Applying: Synthesizer: Bootstrapping: Remove bootstrapped operators from ViewModelHelper.OperatorTypeEnums_WithHiddenInl
etNames.
Applying: Prepare for publish to public Git repository (JJ.Framework, JJ.Demos, SaveText and JJ's Reference Architecture
)
Applying: Publish to Git.bat. Change Framework.sln: add new projects.
Applying: pause at end of Pubish to Git.bat.
Applying: JJ.Demos.sln
Applying: Remove separate Demo solutions.
Applying: Solution changes. Change license file location.
Applying: Modified 'Publish to Git.bat'. Add README.MD in root.
Applying: Resave SaveText.sln hopefully converting it permanently to a Visual Studio 2017 project. Publish to Git.bat ch
anged. README.MD changed.
Applying: Compress deployment files of SaveText.Unity.Offline.
Applying: Move non-compressed files of SaveText.Unity.Offline Deployments to the Archive.
Applying: Rename SaveText.sln to JJ.SaveText.sln. Change 'Publish to Git.bat' to include SaveText.Unity.Offline.
Applying: Synthesizer: Bootstrap the Add Operator
Applying: Synthesizer: Warn if Inlet Obsolete but in use. Correct Inlet and Outlet Captions that did not prefer the Name
 over the Dimension anymore.
Applying: Synthesizer: ‘Obsolete, but used’ warnings for outlets.
Applying: Synthesizer: InletOutletMatcher: Simpler matching alternative when going from only Non-Repeating to only Repea
ting and back, so conversion from inlets A and B go easily to a repeating inlet and back. In other cases still fall back
 to complex key mapping.
Applying: Synthesizer: Presentation: Make hiding captions of Inlets and Outlets dependent on NameOrDimensionHidden if th
ere is an underlying patch, otherwise use the deprecated ViewModelHelper HashSets. That is more consistent behavior than
 it was.
Applying: Synthesizer: Bootstrap Multiply Operator. Also: JJ.Framework.Business's Result classes have better DebuggerDis
plays now. Also extend OperatorWrapper_WithUnderlyingPatch_Inputs with getting stuff with multiplicity and nullability h
andling, and a SetMany method.
Applying: Remove reference to missing file.
Applying: Synthesizer: Bootstrapping: MultiplyWithOrigin: Everything but the calculation and the visitors.
Applying: Synthesizer: Bootstrapping: MultiplyWithOrigin: Bootstrap the calculation, the visitors, the code generation.
Applying: Synthesizer: Bootstrapping: Divide
Applying: Synthesizer: Bootstrapping: Create Operator from Document Tree View. Also made Document Tree title invisible,
to make room for the buttons, changed the caption of the Document Tree Menu Item. It used to say 'Document Explorer', bu
t now it just says 'Document Tree'. Also changed the order of the Menu Items.
Applying: Synthesizer: UI: Tooltips in button bars. Also rename RecursiveDocumentTreeViewModelFactory.
Applying: Synthesizer: Bootstrapping: Use localize DisplayName for patches in Document Tree in case of system patches. M
ake IsSystemDocument and IsSystemPatch extension methods for that. Also did some Resharper refactorings, which affected
some files.
Applying: Synthesizer: Bootstrapping: Less OperatorTypeEnum: UnderlyingPatch changeable for standard operators (unless t
hey have a specialized operator properties box). Changing from no-repeating-inlets-or-outlets to with-repeating-inlets-o
r-outlets still gives an error message.
Applying: Synthesizer: Boostrapping: Localized System Patch Names: Patch display names in the UnderlyingPatch drop down.

Applying: Synthesizer: Put ViewModel Value production in separate class ToViewModelValueHelper.
Applying: Synthesizer: Make ToViewModelValueHelper merge with the partial class ToViewModelHelper again, but still havin
g these methods in a separate file. It is too confusing to have a lot of different entry points for creating view models
.
Applying: Synthesizer: Bootstrapping: DivideWithOrigin / Less OperatorTypeEnum.
Applying: Synthesizer: Bootstrapping: DivideWithOrigin: OperatorFactory and PatchApi.
Applying: Synthesizer: Bootstrapping: Refactor away OperatorTypeEnum member DivideWithOrigin. UI: Remove Boostrapped ope
rators f is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
rom ToolBox.
Applying: Synthesizer: Bootstrap OneOverX Calculation
Applying: Synthesizer Boostrap Operators: If, Noise, Pulse, SawDown, SawUp, Square and Triangle.
Applying: Synthesizer: Move backup files to Archive.
Applying: Synthesizer: Bootstrap Filters (except calculations)
Applying: Synthesizer: Bootstrapping: Use Resources for DisplayNames of Inlets and Outlets with System UnderlyingPatches
.
Applying: Synthesizer: Bootstraping: Aggregates over Inlets (and Outlets)
Applying: Synthesizer: Bootstrapping: Rework Repeating Inlet/Outlet Captions
Applying: Refactor sorting Inlets and Outlets.
Applying: Synthesizer: Bootstrapping: InletsToDimension, DimensionToOutlets
Applying: Synthesizer: Bootstrapping: InletsToDimension, DimensionToOutlets
Applying: Synthesizer: Bootstrapping: InletsToDimension, DimensionToOutlets: Clean up unnecessary code files.
Applying:
Applying: Fix bug: SetInletCount does not work for mixed Repeating/NonRepeating.
Applying: Synthesizer: Before Bootstrapping ChangeTrigger, PulseTrigger, ToggleTrigger, Hold, GetDimension, SetDimension
, Round, Spectrum
Applying: Synthesizer: Bootstrapping: ChangeTrigger, PulseTrigger, ToggleTrigger, Hold, GetDimension, SetDimension, Roun
d, Spectrum
Applying: Framework: Turn a lot of ReflectionHelper methods into extension methods.
Applying: Framework: Remove reference to non-existing code file.
Applying: Update JJ.Framework.Reflection's README.MD.
Applying: Framework: Get rid of validation keys.
Applying: Get rid of reference to missing file.
Applying: Zip TryUnityWww's iOS deployment files.
Applying: Move loose backups of code files to Archive. Change README.MD of JJ.Framework.Validation.
Applying: Correct references to non-existent code files.
Applying: Synthesizer: Bootstrapping: Cache, Curve, Interpolate, Number, Sample Operators
Applying: Synthesizer: Bootstrapping: Exponent, Reverse, Scaler, Shift, Squash, Stretch, TimePower. Except for the calcu
lations.
Applying: Synthesizer: Bootstrapping: Exponent, Reverse, Scaler, Shift, Squash, Stretch, TimePower: Boostrap the calcula
tion.
Applying: Synthesizer: Bootstrapping: Loop, PatchInlet, PatchOutlet, Random, Reset
Applying: Synthesizer: Refactor away CustomOperator, refactor out OperatorType and simplify validators, entity wrappers,
 etc. now there is not distinction between UnderlyingPatch and OperatorType anymore.
Applying: Synthesizer: Bootstrapping: Use a single class for what is now PatchInlet_OperatorWrapper and PatchOutlet_Oper
atorWrapper.
Applying: Removing a lot of JetBrains [NotNull] and annotations and such. They do not do what I want.
Applying: Synthesizer: Dimension Inherit + InheritExtensions, but not yet used in the rest of the logic.
Applying: Synthesizer: Bootstrapping: Dimension Inherit: Use InheritExtensions everywhere in the code, where appropriate
.
Applying: QuestionAndAnswer: Correct Flag and Unflag actions' crashing. Correct crash displaying QuestionEdit with Flags
.
Applying: Synthesizer: Bootstrapping: Use CallerMemberName in OperatorFactory
Applying: Synthesizer: Show '(inherit)' where appropriate in the UI. Also make sure PatchInlet.Inlet and PatchOutlet.Out
let have special fallbacks in the InheritExtensions.
Applying:
Applying: Synthesizer: Bootstrapping: TimePower Calculation
Applying: Synthesizer: Bootstrapping: Faster Boolean Logic (in progress)
Applying: Synthesizer: Boostrapping: Faster Boolean Logic: C# code generation seems to work. Rework remains.
Applying: Synthesizer: Bootstrapping: Faster Boolean Logic (done)
Applying: Synthesizer: Bootstrapping: Calculation: Reuse Results: Some preparations.
Applying: Deleted bins from external components
Applying: Synthesizer: Nano-Optimization: Reuse Results: First draft.
Applying: Synthesizer: Nano-Optimization: Reuse Results: Split up OperatorDtoVisitor_OperationIdentities and OperatorDto
Visitor_Deduplication. Program OperatorDtoVisitor_Deduplication (not debugged).
Applying: Synthesizer: OperatorDtoVisitor_OperationIdentities: Handle DimensionToOutlets and refactor a little.
Applying: Synthesizer: Result Reuse: Simplify OperatorDtoVisitor_OperationIdentityAssignment. Not finished yet.
Applying: Synthesizer: Result Reuse: The OperationIdentities assigned were like call stacks. The innermost operations ge
t a long path, while the outermost operations should get the longest path. Solution: assign functions-like strings Multi
ply(Sine(440),2) instead of quasi-paths like Multiply|Sine|Number-440|Number-2. It does not work yet, because only Opera
torDto's are used as arguments, not the double properties in the DTO's.
Applying: Synthesizer: Result Reuse: Not finished. Introduce a collection of InputDtos in all OperatorDto classes to be
used by OperatorDtoVisitor_OperationIdentityAssignment so that you can quasi-polymorphically use const and var input inp
ut. Then reuse variable names in the OperatorDtoToRawCSharpVisitor if calculation already written out. Though not elegan
t, it is a lower impact short-term solution.
Applying: Synthesizer: Result Reuse: Make _Zero OperatorDto variations include that zero in the InputDtos.
Applying: Synthesizer: Result Reuse: Make Numbers and DimensionToOutlet OutletPosition play a role in the OperationIdent
ity. (Even though this does not work yet.)
Applying: Synthesizer: Result Reuse: Tried to make dimension transformations part of the operation identity, but this pr
oved so much more difficult then when dimension transformations were simply input of the operators that use them.
Applying: Synthesizer: DTO Variation Elimination: First 'draft': Major refactorings, but still more simplification to be
 done. And testing.
Applying: Synthesizer: OperatorDtoToRawCSharpVisitor: Correct Round operator's code generation.
Applying: Synthesizer: Test and correct the OperatorEntityToCalculatorDirectlyVisitor regarding empty inlet coalescing.
Applying: Synthesizer: Bootstrapping: DTO Variation Elimination: Refactor away Trigger_OperatorDto variations.
Applying: Synthesizer: DTO Variation Elimination: Refactor away comparative operator DTO variations.
Applying: Synthesizer: DTO Variation Elimination: Refactor away Negative operator DTO variations.
Applying: Synthesizer: Refactor away Not operator DTO varations.
Applying: Synthesizer: Refactor away Or operator DTO variations.
Applying: Synthesizer: Refactor away Subtract operator DTO varaitions.
Applying: Synthesizer: Refactor away Power operator DTO variations.
Applying: Synthesizer: Refactor away If operator DTO variations.
Applying: Synthesizer: Refactor away ConstSound variations of Filter operator DTO's and the Spectrum operator DTO.
Applying: Synthesizer: Refactor away Spectrum operator DTO variations.
Applying: Synthesizer: Refactor away _ZeroFrequency operator DTO variations.
Applying: Synthesizer: Refactor away many Pulse operator DTO variations.
Applying: Synthesizer: Refactor away _NoCurve and _NoSample operator DTO variations.
Applying: Synthesizer: DTO Variation Elimination: Rename many _SoundVarOrConst_OtherInputsVar to _SignalVarOrConst_Other
InputsVar (so replace 'Sound' by 'Signal'), that accidentally got replaced with a too rigorous find and replace. Also re
move dimension list index handling from Squash and Stretch Operator Calculators for readability.
Applying: Synthesizer: DTO Variation Elimination: Generalize Commute in OperatorDtoVisitor_MathSimplification and use Dt
oCloner to clone OperatorID instead of doing it explicitly.
Applying: Synthesizer: C# Code Generator: Handle const and vars the same by calling GetLiteralFromInputDto and doing tha
t in the helper methods delegated to instead of outside those methods (using the old explicit calls to _stack.Pop(), Vis
it_OperatorDto_Polymorphic and PutNumberOnStack). Also simplified and generalized a few stretches of code generation. Co
rrected error that Const frequency was simplified to a 0, instead of ConstZero frequency being converted to 0. Side note
: It turns out I was testing on the wrong calculation engine for a while. Silly.
Applying: Synthesizer: Bootstrapping: Reverse Operator Calculation
Applying: Synthesizer: Code Generation: Too many tabs were generated since using string.Join instead of a loop, an Appen
dTabs+Append was replaced by AppendTabs+AppendLine which should just have been an AppendLine.
Applying: Synthesizer: Bootstrapping: SawDown Calculation, Remainder Primitive Operator.
Applying: Synthesizer: Bootstrapping: SawDown Calculation, Remainder Primitive Operator: Forgot to check in OperatorEnti
tyVisitorBase.
Applying: Synthesizer: Bootstrapping: SawUp Calculation
Applying: Synthesizer: Correct faulty SetDimension handling in OperatorDtoToRawCSharpVisitor making the incorrect dimens
ion stack positions be used. Correct unnecessary handling of Absolute operator in OperatorDtoVisitor_ClassSpecialization
Base, which kept creating new InputDto's which the base visitor thought now thinks is reason to keep reprocessing each n
ew dto it keeps getting back. Correct wrong assumption about Remainder's 0-property when b is const 1. That is correct f
or whole numbers, but not for broken numbers (0.5 % 1.0 != 0).
Applying: IMPORTANT: Synthesizer: Faster Pulse code moved to archive. Pulse is now slower! Bootstrapped the Pulse and Sq
uare calculations.
Applying: white space
Applying: Synthesizer: Eliminate Add and Multiply DTO variations.
Applying: Synthesizer: Changed IOperatorDto.Inputs from IEnumerable<> to IReadOnlyList<>.
Applying: Synthesizer: Eliminate MinOverInlets DTO variations also change VarsConstsDto and its usage.
Applying: Synthesizer: Eliminate MaxOverInlets_OperatorDto variations.
Applying: Synthesizer: Eliminate AverageOverInlets DTO variations.
Applying: Synthesizer: Small DTO simplifications for AverageOverInlets, InletsToDimension and SortOverInlets.
Applying: Synthesizer: Eliminate Operator DTO variations for ClosestOverInlets and ClosestOverInlets(Exp). Put Aggregate
Info directly in the OperatorDto instead of recreating it all the time.
Applying: Synthesizer: Eliminate OperatorDto_RangeOverOutlet variations. Refactored the OperatorDtoVisitor_MathSimplific
ation and OperatorDtoVisitorBase a lot so that it actually goes depth first again and recalculates dto.AggregateInfo bef
ore revisitation, so it gets a change of simplifying math more than one level deep. Simplified OperatorDtoVisitor_MathSi
mplification so that Process_Nothing decisions get no code. (Earlier having that code had its benefits, but not anymore.
)
Applying: Synthesizer: Eliminate DTO variations with ConstSignal. Keep ConstSignal variations where they actually make t
hings easier, usually if an operator still has other DTO variations it makes math simplification code easier. Also remov
e const-var DTO variations of Round, SetDimension, unneeded const-var variations for Squash and Stretch. Also eliminate
especially implemented DTO variations, where a standard base implementation will do. Simplify the visitor code according
ly. Also remove some OperatorCalculator variations.
Applying: Synthesizer: Simplify some operator DTO variations' names. Extend OperatorDtoVisitorBase_AfterMathSimplificati
on and OperatorDtoVisitorBase_AfterClassSpecialization
Applying: Synthesizer: Remove Number Operator DTO variations + calculator variations.
Applying: Synthesizer: DTO Variation Elimination: Generalize aggregate over inlet MathSimplification. Refactor the use o
f AggregateInfo.Const.
Applying: Synthesizer: Bootstrap Stretch operator calculation. Bootstrap calculations partially for the Sine, Sample and
 Triangle operators. Also extend JJ.Demos.Misc.CSharp7Tests.
Applying: Synthesizer: Bootstrapping: Make TransformationsToPositionInputs conversion so the graph becomes more like a m
athematical function, so OperationIdentity works, so Result Reuse works. Get rid of OperatorEntityToCalculatorDirectlyVi
sitor and Dimension Stacks in order to simplify calculator classes and make Cache operator possible in OperatorEntityThr
oughDtoToCalculator. Several corrections after testing. Still some bugs left.
Applying: Synthesizer: Bootstrapping: DimensionStack Elimination: Made the Cache calculator work. (Bugs remain.)
Applying: Synthesizer: Rename CalculationMethodEnum.EntityThruDtoToCalculator to CalculatorClasses.
Applying: Synthesizer: Code Generator: Eliminate dimension variables. Just use variable inputs instead.
Applying: Synthesizer: Remove DimensionStackLevel variables from DTO's and visitors.
Applying: Synthesizer: DTO processing: Remove int OperatorID property and use string OperationIdentity instead.
Applying: Refactor away Seconds/Samples BetweenApplyFilterVariables
Applying: Synthesizer: DTO Visitors: AlreadyProcessed checks, which prevent duplicate processing in case of convergent s
tructures.
Applying: Synthesizer: Fix bug with InletsToDimension. We now have InputsExceptPosition and Position properties in the D
TO's, so the processing can distinguish them well, and OperatorEntityToDtoVisitor has custom handling for it.
Applying: Synthesizer: TransformationsToPositionInputs: Make Spectrum calculator work. Correct SetDimension operator han
dling.
Applying: QuestionAndAnswer: SQL file to Inspect Questions with Categories.
Applying: Synthesizer: Fix that loop did not give sound. QuestionAndAnswer: Small corrections.
Applying: Synthesizer: Make OperatorDtoVisitor_TransformationsToPositionInputs more readable.
Applying: Synthesizer: Make OperatorDtoVisitor_TransformationsToPositionInputs more readable by annuling with NaN. Then
remove the NaN check from MathSimplification so any input NaN does not mean ouput is NaN.
Applying: Make some accessors expression bodied.
Applying: Trivials, minor refactorings, backups of loose code files.
Applying: GetImplementations in ReflectionExtensions now also looks at indirect base classes to get the implementation o
f. CollectionExtensions_Recursive now handles circular references gracefully and are also (untestedly) faster, due to us
ing a single HashSets instead of nested enumerables, and because of IList-based overloads that use 'for' instead of fore
ach.
Applying: Include JJ.Framework.Collections.Tests in Synthesizer.sln.
Applying: Backup of loose source file
Applying: Synthesizer: SetDimension_OperatorDto: Solve ambiguity between the Number property and the Position property.
EntityToDto: Fill in NaN for the Positions.
Applying: Synthesizer: Add Position Dimension. GetDimension and SetDimension: Make Number input and output Inherit inste
ad and make the default dimension Position.
Applying: Synthesizer: Rename GetDimension and SetDimension to GetPosition and SetDimension.
Applying: Refactor Away LibraryPatchGrid Views
Applying: Synthesizer: DocumentTree AddToInstrument User Action: Works but still some styling needed.
Applying: Make AddToInstrument/Piano icon fit the style better.
Applying: Synthesizer: Make PatchProperties AddToInstrument button in title bar instead of below the properties.
Applying: Synthesizer: Refactor Away LibraryPatchProperties Views
Applying: Synthesizer.WinForms: Remove JetBrains.Annotations reference.
Applying: Move LibraryPatchProperties files to archive.
Applying: Synthesizer: LibraryAdd and LibraryRemove user actions in DocumentTree
Applying: Synthesizer: Bootstrapping: Refactor Away LibraryPatchGrid View
Applying: Synthesizer: Clean up LibraryAdd, LibraryRemove and AddToInstrument actions after refactoring.
Applying: Synthesizer: PatchDetails AddToInstrument Action
Applying: Synthesizer: DocumentTree PatchCreate action.
Applying: Synthesizer: DocumentTree DeletePatch Action + pass some business objects to presenter constructors.
Applying: Synthesizer: Bootstrapping: UI: Show Patch UsedIn under tooltip in DocumentTree.
Applying: Synthesizer: UI: Show Patch UsedIn under tooltip in DocumentTree: Put tool tip formatting in ToViewModelHelper
 not Presenter. Put ToolTip assignment from view model to control in ApplyViewModelToControls instead of right inside th
e NodeMouseHover event.
Applying: Synthesizer: UI: DocumentTreeUserControl;: Use ToolTip for better control over time-outs. (The intrinsic toolt
ip of TreeView auto-hides it, while you are still studying its contents.)
Applying: Synthesizer.Presentation: Refactor away PatchGrid view. Remove deprecated code (using mostly Visual Studio cod
e analysis and also Reshaper for a few things).
Applying: Small QuestionAndAnswer changes.
Applying: Synthesizer: Sample sole ownership: Migrate_FromOperator_Data_ToSample_Operator. Also Position controls with c
ode for SimpleFileProcessControl/Form, because Windows 7 DPI scaling keeps messing up the positioning if I use docking a
nd anchoring.
Applying: QuestionAndAnswer: Simplify entity class code.
Applying: Sample sole ownership. Ton of refactoring. Some edge cases remain.
Applying: Synthesizer: Sample Sole Ownership: Initialize Name and OriginalFileName upon Sample Operator Create.
Applying: Refactor out Synthesizer.Api and Synthesizer.Memory.
Applying: Synthesizer: Remove some empty folders.
Applying: Synthesizer: Migrate_FromOperator_Data_ToOperator_Curve.
Applying: Framework: Move common simple conversions into new assembly JJ.Framework.Conversions as the SimpleTypeConverte
r class. Catch WebExceptions in SetText tests and Assert.Inconclusive.
Applying: Framework: Move common simple conversions into new assembly JJ.Framework.Conversions as the SimpleTypeConverte
r class. (forgot to save an check in some csprojs)
Applying: Correct references from JJ.Demos.ReturnActions.* to Mvc 4.0.0.1 which were referencing version 4.0.0.0.
Applying: Architecture: Bulk-switch projects of Synthesizer.sln to C# 7.1, or actually to latest minor version of C#.
Applying: Synthesizer: Bootstrapping: Curve Sole Ownership. Main work done.
Applying: Synthesizer: Improve performance of NonPersisted user actions.
Applying: Synthesizer UI: CurveDetailsExpand and OperatorPropertiesExpand actions. Clean up obsolete UsedIn code. Correc
t DocumentTreeHoverPatch in that was treated as a NonPersistedAction, even though it is not, which kept the DocumentTree
ViewModel's Successful flag false, which kept giving DocumentTreeUserControl focus, which prevented ShowOperatorProperti
es gesture events from going off. Also made the Succesful flag true by default in a lot of places, just to prevent some
trouble.
Applying: Synthesizer UI: Immediately do an OperatorExpand after creating an operator, which also shows the CurveDetails
 immediately after creating a Curve operator.
Applying: Synthesizer UI: Use ExecuteNonPersistedAction more in MainPresenter, making redirect actions much faster.
Applying: Synthesizer UI: Hand-program positioning of DiagramControl in PatchDetailsUserControl.
Applying: Synthesizer UI: Refactor PatchDetailsPresenter to use normalized code from a base class as much as possible.
Applying: Synthesizer UI: Make CurrentInstrumentPresenter code shorter, by using a base class.
Applying: Synthesizer UI: GridPresenterBase: Split virtual CreateViewModel into GetEntity and ToViewModel.
Applying: Synthesizer UI: Generalize GridPresenterBase and DetailsAndPropertiesPresenterBase into EntityPresenterBase, E
ntityReadPresenterBase and EntityWritePresenterBase.
Applying: Synthesizer UI: Rename EntityReadPresenterBase to EntityBaseWithoutSave and rename EntityWritePresenterBase to
 EntityBaseWithSave.
Applying: Synthesizer UI: Make CurveDetailsPresenter use PresenterBaseWithSave.
Applying: Synthesizer: Fix bug PatchManager.DeleteOwnedNumberOperators: collection was modified in foreach. Solved by do
ing the Enumerable ToArray. + Trivials.
Applying: Synthesizer UI: Rename some presenter base classes to reflect better what they are. I was opening the wrong cl
ass files due to the imprecise name.
Applying: Synthesizer UI: Make the 'two kinds' non-persisted actions less ambiguous in the base Presenters.
Applying: Synthesizer UI: Move code of some user actions from MainPresenter to sub-presenter and avoid boilerplating for
 CurveDetails, ScaleGrid and ToneGridEdit. Also give ToneGridEdit a base class avoiding more boilerplating.
Applying: Rename EntityPresenterBaseWithSave and EntityPresenterBaseWithoutSave to EntityPresenterWithSaveBase and Entit
yPresenterWithoutSaveBase,
Applying: Synthesizer: Base LibrarySelectionPopupPresenter on EntityPresenterWithoutSaveBase and reduce boilerplating. A
lso override Show and make it unsupported for presenters that have a Load action instead (that is incompatible by signat
ure to the Show action). Give Result classes a constructor that takes params string[] for syntactic sugar.
Applying: Trivial corrections.
Applying: Synthesizer UI: CurrentInstrument: Get rid of Show and Close actions. Always show if document open. Also do no
t show system's namespace.
Applying: Synthesizer UI: CurrentInstrument: Tooltips for the buttons.
Applying: Synthesizer UI: Rename action AutoPatchPopupShow to CurrentInstrumentExpand, because that is the user action.
The consequence is that the Auto-Patch popup shows.
Applying: Synthesizer UI: CurrentInstrument: MoveBackward and MoverForward actions that are actually available in the Wi
nForms layer.
Applying: Synthesizer UI: CurrentInstrument partial: Make move buttons visible or invisible if already at the outermost
left or right side.
Applying: Synthesizer UI: CurrentInstrument: Use patch display name. (In case of system patches, this will use resource
strings.) Hide expand and play icons if no items.
Applying: Synthesizer UI: Never hide CurrentInstrument view. (Do not hide if no document open. Since when no items, it d
oes not display anything anyway andthe menu bar looks different when I hide it, and I do not like that.)
Applying: Synthesizer UI: CurrentInstrument: PlayItem user action.
Applying: Synthesizer: CurrentInstrument: Put back buttton at the left of the text. Also do some code-base wide resharpe
r refactorings.
Applying: Synthesizer: BUG: AutoPatching multiply gave exception, because the repeated multiply inlets were cloned to th
e auto-patch’s PatchInlets, including a repetition position, which makes no sense for PatchInlets
Applying: Synthesizer: User Experience Improvement: In the UI, call PatchInlet Input and PatchOutlet Output. Also move C
urveValidators to a different namespace.
Applying: Synthesizer: User Interface: Switch properties upon select, instead of double click or enter. (Not perfect yet
.)
Applying: Synthesizer UI: Determine panel visibility in presenter layer, not WinForms layer.
Applying: Synthesizer UI: Switch properties upon select, instead of double click or enter: Distinguish between *Properti
esShow and *PropertiesSwitch.
Applying: Synthesizer Vector Graphics: Get rid of some specialized gesture classes, which are no more than a double clic
k gesture, really.
Applying: Synthesizer: Vector Graphics: Rename gestures ShowOperatorProperties* to ExpandOperator*.
Applying: Synthesizer: PatchDetailsSelect switches to PatchDetailsProperties (click on PatchDetais background).
Applying: Synthesizer UI: More user actions: CurveSelect (clicking the background of CurveDetails), NodePropertiesExpand
, which expands and selects anything related to it (CurveDetails, PatchDetails) Demos.Misc: Some tests for retrieving ap
p settings from loaded config (not standard app.config or web.config).
Applying: Synthesizer UI: PatchPropertiesExpand action.
Applying: Synthesizer UI: Expand button in PatchDetails.
Applying: Synthesizer UI: CurrentInstrumentExpandItem
Applying: Synthesizer UI: DocumenTree LibraryPatch enter key or double click means CreateOperator if a patch is open.
Applying: Synthisizer: Deprecate Sample.IsActive and Sample.OriginalLocation
Applying: Rename Patch's DefaultStandardDimension to StandardDimension and DefaultCustomDimensionName to CustomDimension
Name.
Applying: Synthesizer: BUG: User action LibraryPatch OpenExternally did not work anymore.
Applying: Synthesizer: Check for Unsaved Changes: Set the IsDirty flag, but do not check it yet and no program navigatio
n yet.
Applying: Synthesizer UI: Check for unsaved changes: SaveChanges dialog and response to it (not finished e.g. MainWindow
 close does not do a check).
Applying: Synthesizer UI: Check for Unsaved Changes: Handle FormClosing.
Applying: Synthesizer UI: Check for Unsaved Changes: Dirty check upon DocumentCreate. Move some code from MainForm_FormC
losing to MainPresenter.
Applying: JJ.Demos.Misc.ConfigurationTests
Applying: Synthesizer UI: Check for Unsaved Changes: Make play actions read action instead of write actions so you do no
t get a save changes message by just playing something.
Applying: Synthesizer UI: Check for Unsaved Changes: Get rid of PatchDetailsLoseFocus action and make PatchDetaisPresent
er an EntityPresenterWithoutSave instead of WithSave. This might take care of the unnecessary save changes question when
 opening a doc with a single patch in it.
Applying: Synthesizer UI: Undo first draft (does not work very well yet).
Applying: Synthesizer: Undo: Draft of using ViewModelState.OriginalState for undo. Also make some DebuggerDisplays.
Applying: Synthesizer: Undo: Assign ViewModel's control properties in the Undo and Redo actions. Also make RefreshIDProv
ider instead of RefreshCounter++ so you can get a unique RefreshID while not having one to begin with. Correct DebuggerD
isplay for AudioOutputPropertiesViewModel so it shows the name of the SpeakerSetup, not the class.
Applying: Synthesizer: Make Redo work by maintaining Undo/Redo items with OriginalState and NewState instead of just Ori
ginalState.
Applying: Synthesizer: Undo: Tried distinguishing between insert, update and delete operations in Undo and Redo actions,
 but really the state maintained is not enough for really handling all three. Just update works, really.
Applying: Synthesizer: Undo: Use polymoprhic UndoItemViewModels (even though only the updates get undone and redone corr
ectly still). Also Removed InvalidTypeException and replaced them buy the use of UnexpectedTypeExceptions or IsNotTypeEx
ceptions.
Applying: JJ.Framework.Common: Remove trivials. Synthesizer: Undo: Make names of properties of Undo*ViewModels more cons
istent.
Applying: StringExtensions_Split and CsvReader trivial refactorings.
Applying: Synthesizer: Make Undo/Redo delete operations work a little. For Operators and Patches it sort of works, but t
he action roundtrip is a little hacky.
Applying: Tabbify entire code base's .cs files.
Applying: Synthesizer: Refactor delete operation undo/redo: Put Undo code in separate partial class for MainPresenter, i
ncluding state gathering. Give ExecuteDeleteAction a UndoDeleteViewModel parameter.
Applying: Synthesizer: Undo: Support DocumentTreeRemove action. Also remove redundant ToEntity in Undo, which seemed to
cause some bugs.
Applying: Synthesizer: Play around with some code cleanup from ReSharper.
Applying: Synthesizer: Undo/Redo for Create actions (tests do not all succeed yet)
Applying: Synthesizer: Correct crash in LibrarySelectionPopupOK caused by faulty undo handling. Correct Crash when chang
ing AudioOutput properties going from Mono to Stereo or back, because MultiThreadedPatchCalculator.CloneValues did not c
onsider differences in channel count and gave an index out of range exception. Change default SamplingRate in config to
48000, because somehow 44100 gives artifacts in a sine wave on my new Marshall speaker.
Applying: Synthesizer: Fix broken undo/redo update action.
Applying: Synthesizer: Undo: Normalize some code in MainPresenter.Undo and MainPresenter.Redo.
Applying: Synthesizer: Undo: Move some more code from supposedly generalized handling, to specialized methods behind a c
ase switch, so I can be more selective about what to do in case of a an UndoOrRedoDeletion and UndoOrRedoInsertionOrUpda
te. Implement UndoRedoDeletion for Libraries.
Applying: Synthesizer: Undo: Solve spread responsibility of the MainPresenter's Create actions' undo history management.
 Move some AudioFileOutputCreate code from MainPresenter to the partial presenter.
Applying: Synthesizer: Rename MainPresenter.ExecuteWriteAction to ExecuteUpdateAction and change order of these template
 methods.
Applying: Synthesizer: Undo: Generalize MainPresenter ExecuteCreateAction, ExecuteUpdateAction, ExecuteDeleteAction by d
elegating most work to an ExecuteWriteAction template method.
Applying: Synthesizer: Undo: Add Curves and Nodes state to undo history of Patch.
Applying: Trivials
Applying: Synthesizer: Undo: Include auto-created number operators in DocumentTreeNew's undo state. Also tried including
 auto-updated derived operators, but did not work yet; it would bluntly delete derived operators upon undo, instead of u
pdate them. Extended UndoCreateViewModel with multiple EntityTypesAndIDs instead of just one. Added some syntactic sugar
 in ToViewModel / MainPresenter.
Applying: Synthesizer: Undo: Find solution for including auto-updated derived operators in undo mechanism. Basically Ref
reshDocument upon restoring specific ViewModels in that are in the undo state.
Applying: Synthesizer: Undo: Small refactorings.
Applying: Synthesizer: Undo: SampleFileBrowserOK action now includes auto-generated number operators in the undo state.
Applying: Synthesizer: Undo: Put auto-created number operators first in undo state items, so that main created operator
is dispatched last, and put on top upon Redo. Make DebuggerDisplay for EntityTypeAndIDViewModel.
Applying: Synthesizer: Undo: SampleFileBrowserOK: Put main created operator last in the undo state items, so it gets dis
patched last, so its property box is put on top. That already worked, but now the ordering was moved to a spot that actu
ally had something to do with the undo items.
Applying: Synthesizer: Refactoring: Move IsOwned functions to OperatorExtensions, instead of spread over the place.
Applying: Synthesizer: Undo: Include Owned Operators in OperatorDelete: Kinda works, except for crash OperatorProperties
Delete that was already in there. OperatorDeleteSelected does work.
Applying: Synthesizer: Undo: Comment.
Applying: Synthesizer: Undo: GetPatchStates had better delegate to GetOperatorStates and GetOperatorStates should includ
e NodeProperties.
Applying: Synthesizer: Undo: ChangeSelectedNodeType: Solved worst undo problem (not all). Undo state was incorrect, beca
use in this case new state is not in user input. Solved by custom handling the undo item.
Applying: Synthesizer: Undo: ChangeSelectedNodeType edge cases: * Undo item's CurveDetails had the right new state, but
NodeProperties did not. Solved by refreshing before creating undo item. * Give MainPresenter a template method ExecuteSp
ecialUpdateAction, for cases where userInput is not the final state of the action.
Applying: Synthesizer: Small Rework: Make Document.AudioOutputID unique and not null. Change order of deleting AudioOutp
ut and Document to not cause update with null value. Add forgotton Squash_OperatorDto_FactorZero handling to _delegateDi
ctionary in OperatorDtoVisitorBase. Change use of VoidResultDto to VoidResult for DocumentManager.DeleteWithRelatedEntit
ies and ScaleManager.SaveTone. Remove redundant ToArray in MainPresenter.General.cs GetOperatorIDsToDelete. Solve except
ion in Undo OperatorProperties Update: OriginalState was not filled in in ToViewModel for OperatorPropertiesViewModel.
Applying: Synthesizer: Reintroduce Curve GenerateName SideEffect, since now you cannot distinguish them easily in the Cu
rveDetails. Not perfect yet. Documentless patches will crash. In practice this might happen only in tests.
Applying: Synthesizer: Put Curve Generate Name side effect in the CurveManager.Create method again (be it only in one ov
erload that takes Document) instead of executing it explictly in places. Reengineer Curve.Create overloads to use C#7 tu
ples instead of NodeInfo classes, so calling them looks prettier. The overloads that take node information will not take
 Document, so will not generate a name, while the overload that does not take node information will. This (unintuitive?)
 asymmetry prevents some overload hell.
Applying: Synthesizer: Move CurveManager.GetEquidistantPointsOverX to MathHelper.SpreadDoubles, also renaming the other
spread variations in MathHelper.
Applying: Typo cause build failure.
Applying: Synthesizer: Trivials
Applying: Synthesizer: MidiMapping: Data Layer
Applying: Synthesizer: MidiMapping: Business Layer: Order LinkTo methods by alphabet.
Applying: Synthesizer: MidiMapping: Business Layer: LinkTo methods
Applying: Synthesizer: MidiMapping: Business Layer: Reorder Unlink methods
Applying: Synthesizer: MidiMapping: Business Layer: Unlink methods
Applying: Synthesizer: MidiMapping: Business Layer: Reorder cascading code
Applying: Synthesizer: MidiMapping: Business Layer: Cascading
Applying: Synthesizer: MidiMapping: Business Layer: Sort RepositoryWrapper members.
Applying: Synthesizer: MidiMapping: Business Layer: EnumExtensions and a few resource strings.
Applying: Synthesizer: Rename MidiMappingElement properties
Applying: Synthesizer: MidiMapping: Business Layer: More resource strings, basic validations. Validate ID > 0 for all en
tities too.
Applying: Synthesizer: MidiMapping: Business Layer: more validations, warning validators, more resource strings, better
UserFriendlyIdentifier for MidiMappingElement.
Applying: Synthesizer: MidiMapping: Business Layer: SideEffects
Applying: Synthesizer: Rename Managers to Facades.
Applying: Synthesizer: MidiMapping: Business Layer: * rename Managers to Facades * update reference architecture documen
tation accordingly * program MidiMappingFacade * adapt ScaleFacade + usage
Applying: Synthesizer: MidiMapping: Presentation Layer: DocumentTree MidiMapping Nodes
Applying: Synthesizer: MidiMapping: Presentation Layer: Make the main node display “MIDI”, not “MIDI Mappings”
Applying: Synthesizer: MidiMapping: Presentation Layer: DocumentTree: Merge New, Add and Create operations into a single
 Create action for less confusion.
Applying: Synthesizer: MidiMapping: Presentation Layer: DocumentTreeSelectMidi action.
Applying: Synthesizer: MidiMapping: Presentation Layer: Make MainPresenter.DocumentTreeCreatePatch delegate its work to
DocumentTreePresenter.
Applying: Synthesizer: MidiMapping: Presentation Layer: DocumentTreeCreateMidiMapping (no undo yet)
Applying: Synthesizer: MidiMapping: Presentation Layer: Sort MainPresenter.Actions DocumentTree actions by alphabet. Boi
lerplating for DocumentTreeCreateMidiMapping Undo.
Applying: Synthesizer: MidiMapping: Presentation Layer: DocumentTree: SelectMidiMapping action. Also sort some members.
Applying: Synthesizer: MidiMapping: Presentation Layer: DocumentTree DeleteMidiMapping action. (Still throws exception t
hat there is no MidiMapping entity, because there is no MidiMappingDetail view yet.)
Applying: Synthesizer: MidiMappingDetails and MidiMappingElementProperties: ViewModels, ToViewModel, ToEntity (not finis
hed)
Applying: Synthesizer: Make PositionViewModel so OperatorViewModel and MidiMappingElementViewModel can both use the same
 code for it.
Applying: Trivial
Applying: Synthesizer: MidiMappingDetails and MidiMappingElementProperties Presenters. Refactor EntityPresenterWithSaveB
ase to have only an abstract Save method, not a virtual Save and SaveWithUserInput method.
Applying: Synthesizer: EntityPositions Strongly Linked
Applying: Framework: VectorGraphics: Ellipse Elements + refactoring.
Applying: Synthesizer: References to deleted file made build fail.
Applying: Synthesizer: MidiMappingDetails: Fix bugs in CreateMidiMaping and DeleteMapping and their Undos
Applying: Synthesizer: MidiMappingDetails VectorGraphics: First draft
Applying: Synthesizer: MidiMappingDetails VectorGraphics: Circles and Labels.
Applying: Synthesizer: MidiMappingDetails VectorGraphics: Close action, MoveElement action, structure styling, draw dent
 in circles to indicate it is a knob,  make styling prettier.
Applying: Synthesizer: MidiMappingDetails VectorGraphics: ElementCreate action.
Applying: Synthesizer: MidiMappingDetails VectorGraphics: SelectElement action.
Applying: Synthesizer: MidiMappingDetails VectorGraphics. Build failed due to reference to deleted code file.
Applying: Synthesizer: MidiMappingDetails DeleteElement action. Refactor existing Delete actions (names, event binding p
atterns). Fix exception upon NodeDelete in case no node selected.
Applying: Trivial rework
Applying: Synthesizer.VectorGraphics: Refactor away VectorGraphicsTagHelper. Tags do not need parsing, they can just be
ints. Faster and easier. Maybe not for debugging, but the code looks clenaer.
Applying: Synthesizer: MidiMappingDetails VectorGraphics: Prettier selected element borders.
Applying: Synthesizer: MidiMappingElementPropertiesUserControl first draft.
Applying: Synthesizer: VectorGraphics: Make MidiMappingDetails ExpandElement gesture work (with mouse, keyboard still do
es not work). Refactor Expand gestures, so different vector graphics views use the same gesture classes to expand their
elements.
Applying: Synthesizer: MidiMappingElementPropertiesUserControl: A whole lot more controls with binding (not finished).
Applying: Synthesizer: MidiMappingElementPropertiesUserControl: Add controls for MinDimensionValue and MaxDimensionValue
.
Applying: Synthesizer: * MidiMappingElementPropertiesUserControl: Bind the Close, Delete, Expand and LoseFocus events. (
Expand does not work yet.) * Make ToViewModel for properties views tolerant towards parents being null because of the de
lete actions' creating a view model for already deleted entities. (Kind of an error in generalizing action method code,
but a working resolution for now, instead of more error prone / laborious refactoring.)
Applying: Synthesizer: MidiMappingElementPropertiesUserControl: * Move controller value range checks from warning valida
tor to validator. (It was so inconsistent with the other range checks that is was confusing.) * Correct DispatchMidiMapp
ingElementPropertiesViewModel: It used the wrong dictionary key, making the UI whine about validation errors you just co
rrected.
Applying: Synthesizer: * MidiMappingElement_SideEffect_SetDefaults had    FromDimensionValue and TillDimensionValue swit
ched around. * Fixed resource typing 'mim or max'.
Applying: Synthesizer: MidiMappingElementPropertiesUserControl: Use a central ScaleLookup and have it update at the righ
t times.
Applying: Synthesizer: MidiMappingElementProperties Expand action: make it work with just a single ID, not also the pare
nt ID.
Applying: Synthesizer: MidiMappingDetailsSwitch action, redirected to under DocumentTreeSelectMidiMapping.
Applying: Synthesizer: MidiMappingElementPropertiesUserControl: Part done with view model validation of numbers edited a
s free text. The trouble that remains is that it will wipe out invalid values, instead of leaving it in tact for you to
correct.
Applying: Synthesizer: MidiMappingElementPropertiesUserControl: Do not wipe out invalid text input in case of validation
 messages, so the user can correct the entered text.
Applying: Synthesizer: MidiMappingCalculator: First version. Not in use yet nor tested, but should convert MIDI values t
o synthesizer variables.
Applying: Synthesizer: MidiMappingCalculator.ToAbsoluteControllerValue
Applying: Synthesizer: SystemFacade: Move the code around getting entities from the System document from DocumentFacade
to this separate facade. Actually use the cached system patches, instead always getting it again from the current contex
t. This was originally done to prevent crashes linking togeher entities from different contexts, but that just made the
caching not work. To prevent this, get the UnderlyingPatch by ID in a more strategic place. Also removed inverse propert
y Patch.DerivedOperators to prevent these crashes, and because it performs badly anyway.
Applying: Synthesizer: SystemFacade: Refactor caching behavior. MidiMappingElementPropertiesUserControl: Group together
properties in a practical way.
Applying: Synthesizer: MidiMappingElementPropertiesUserControl: Make FromTillUserControl to put more properties on a sin
gle line.
Applying: VectorGraphics: GridSnapGesture + apply to Synthesizer MidiMappingDetails view.
Applying: VectorGraphics: Make clipping text optional so Synthesizer MidiMappingDetails looks better. Also makes other S
ynthesizer Vector Graphics looks better where abbreviation would replace a lot of text with '...' in case of poor text w
idth estimation.
Applying: Framework: Change namespaces JJ.Framework.Presentation.* to JJ.Famework.*, e.g. JJ.Framework.Presentation.Vect
orGraphics => JJ.Framework.VectorGraphics. (Did not move the folders yet.)
Applying: Framework: Rename "Framework\Presentation.XXX" folders to "Framework\XXX" and change solution files with Notep
ad++.
Applying: Framework.VectorGraphics: Inject text measurer for precise text sizes. (Wrapper not taken into consideration y
et.) (System.Drawing can provide precise measurement, while I myself can make but rought estimates, which suck a little.
)
Applying: Synthesizer: TextMeasurers: Take text wrapping into consideration, so it affects the text height. Apply it in
Synthesizer's MidiMappingDetails view. Also program the ApproximatingTextMeasurer so that it does primitive text wrappin
g estimation.
Applying: Synthesizer: MidiMapping: Small presentation rework: MidiMappingDetails: * Automatically open properties box u
pon CreateMidiMappingElement. * Make 'WaterMarkTitle' displayed at the top a darker color. MidiMappingElementProperties:
 * 'Needlessly' correct textBoxWidth to a minimum of 1 in the FromTilUserControl. * Move ControllerValues controls one g
roup of properties over. * Replace label text 'Custom Dimension Name' with just 'Dimension Name'.
Applying: Synthesizer: Add the word 'Midi' to the Midi-related properties of MidiMappingElements, because this helps bot
h user and programmer see which values are part of the MIDI protocol, for when you are less familiar with it, or too tir
ed to easily see the difference anymore.
Applying: Synthesizer: MidiMappingDetails: Grey out inactive MidiMappingElements.
Applying: Synthesizer: MidiMappingDetails: Make inactive MidiMappingElements precisely half the opacity of active ones,
also giving the selected inactive style a consistent look.
Applying: Synthesizer: Rename some StyleHelper properties in the VectorGraphics.
Applying: Synthesizer: Upon MidiMappingElement create, instead of redirecting to MidiMappingElementPropertiesShow, redir
ect to MidiMappingElementExpand, so next to properties being shown, the new element also automatically gets selected.
Applying: VectorGraphics: Do not derive GridSnapGesture from GestureBase and add note about how to use it in the class s
ummary. Move AbsoluteCenterX and AbsoluteCenterY calculations from MidiMappingDetailsUserControl to the VectorGraphics A
PI.
Applying: Synthesizer: Make MidiMappingCalculator code dumber by putting some logic in MidiMappingElementExtension metho
ds instead.
Applying: Synthesizer: Make MidMappingCalculator code even dumber by making even more MidiMappingElementExtension method
s.
Applying: Synthesizer: MidiMappingCalculator: Lower GC-pressure, but by doing so, make it thread-unsafe. Do put somethin
g about that in the class summary.
Applying: Synthesizer: MidiMapping: Rework Validators: if 'from' is filled in then 'till' should be too and the other wa
y around.
Applying: Synthesizer: Improve MidiMappingElement's long UserFriendlyIdentifier. Move most GetCaption code for the Vecto
r Graphics MidiMappingElements to GetUserFriendlyIdentifierShort in the business layer and improve it, so more types of
mappings get a meaningful short description. MidiMappingElementExtensions.HasToneNumbers to not look if Scale is null, b
ecause scale should fall back to the default scale eventually.
Applying: Synthesizer: Improve MidiMappingElements DebuggerDisplay. Even though it can get a bit long now, it starts wit
h the most important details, which should be handy.
Applying: Synthesizer: Let MidiInputProcessor Use MidiMappingCalculator (+rework the calculation).
Applying: Synthesizer: Midi Mapping Rework: * Cache tone frequencies in MidiInputProcessor. * Display ToneNumbers in Ton
eGridEdit. Make ToneGridEdit look a little better.
Applying: Synthesizer: Scale Tones Rework: * Make Scale.BaseFrequency not nullable. * Add Tone Extensions GetCalculatedO
ctave and GetOrdinal. * Display Ordinal column in ToneGridEdit. * Improve default fractions in Tone_SideEffect_SetDefaul
ts_Factor. * Improve Tone_SideEffect_SetDefaults_LiteralFrequency making ToneCreate generate incremental tones for the L
iteralFrequency Scale, that are consistent with the other scale types.
Applying: Synthesizer: MIDI Mapping: Do not display scaling range for short user-friendly identifiers, because they don'
t have any meaning unless you show both source and dest ranges.
Applying: Synthesizer: MIDI Mapping: Remove complicated unnecessary checks in UserFriendlyIdentifier.
Applying: Synthesizer: MidiMapping: Replace some foreach loops with for loops.
Applying: Synthesizer: Move OperatorDto's to their own sub-namespace, in preparation of making even more Dto's for MidiM
apping calculations.
Applying: Synthesizer: Use DTO's in MidiMappingCalculator instead of entity proxy classes, that already lost their conne
ction to the database.
Applying: Synthesizer: MidiMapping: Include MidiMappings and MidiMappingElements in the eager-loading DocumentRepository
.TryGetComplete.
Applying: Trivials
Applying: Synthesizer: MidiMapping: Small UI bugs: * Deleted MIDI Mapping Details would stay visible after deletion. * S
cale lookup in MidiMappingElementProperties needs empty item and its value was not updated properly when switching betwe
en MidiMappingElements.
Applying: Delete Third Party\Roslyn. Get used to not having everything in your code base. Use their git repo if needed.
Applying: Synthesizer MidiInputProcessor: Make it an instance class instead of a static one.
Applying: Framework: Vector Graphics: Picture Elements: First draft.
Applying: Framework.VectorGraphics: * Make TextMeasurers return C#7 tuples. * Make Picture.UnderlyingPicture of type obj
ect, not the complicated wrapper construction. * Give PictureStyle some preliminary, yet unused properties. * Moved some
 preliminary complicated image processing boilerplating immediately to Archive.
Applying: Framework.VectorGraphics: * PictureStyle properties: Clip, Scale and Opacity. They work. * Put more in DrawerB
ase, making the System.Drawing-specific implementation just handle the primitives. * Still has some unused code in it.
Applying: ReSharper refactorings.
Applying: Framework.VectorGraphics: Clean up some unused code. Put bounds correction mostly in CalculationVisitor, inste
ad of DrawerBase.
Applying: VectorGraphics: Make BoundsHelper correct to mere 100,000'nds not 1,000,000,000'ths.
Applying: Synthesizer: MidiMapping: CurrentInstrument Vector Graphics first draft
Applying: Get rid of some ReSharper warning.
Applying: Synthesizer: CurrentInstrument View: Put height and width constants in StyleHelper.
Applying: Synthesizer: MidiMapping: CurrentInstrument View: Try programming the (unfinished) vector graphics code more l
ike a component, than a converter.
Applying: Some ReSharper refactorings.
Applying: Synthesizer: Port CurrentInstrumentUserControl to CurrentInstrumentElement (WinForms component to VectorGraphi
cs component). (First draft)
Applying: Synthesizer: Reprogram CurrentInstrument with VectorGraphics API: Positioning trivials.
Applying: Synthesizer: CurrentInstrument View Redesign: Some renames from 'Control' to 'Element'.
Applying: Synthesizer: * Make CurrentInstrumentElement work in WinForms a little. * Style it a little bit better. Framew
ork.VectorGraphics: * Rework some ElementPosition properties. * Make drawing and calculation work a little for composite
 elements. Still a lot that does not work well.
Applying: JJ.Framework.VectorGraphics: * Element parent constructor argument, parent not nullable, Diagram immutable. *
Cascadedly dispose element children. * CoordinateIndicator drawing to visualize positioning and invisible elements (bett
er then occasional ShowInvisibleElements functionality). * Synthesizer.VectorGraphics: Split ToolTipGesture into ToolTip
Element and ToolTipGesture * CurveDetails ToolTips are broke, though.
Applying: JJ.Framework.VectorGraphics: Correct problem that would show all points even when invisible, making ugly bezie
rs. Correct bug with the sizing of the CurveDetails view's tool tips. Correct Element.Diagram and Element.Parent non-nul
lability. It crashed with a null Parent upon moving a child from one parent to another. Add assertion that Parent and Ch
ild must have same Diagram.
Applying: Synthesizer.VectorGraphics: Make ToolTipGesture work with fixed text, instead of just non-obvious SetToolTip m
ethod and ToolTipRequested event. Try make CurrentInstrumentElement ToolTips work. Does not work well yet, because the T
oolTips show outside the bounds of the diagram.
Applying: Synthesizer.VectorGraphics: Give ToolTip preferred positioning more options so you can choose to put it at the
 left or the right, so that it works for the CurrentInstrument view. Still have to position it further to the left and r
ight, though.
Applying: Synthesizer.VectorGraphics: Position ToolTips in CenterLeft and CenterRight better, including the corrections
if out of bounds. (They shouldn't just hang to the left or right of the mouse cursor, they should be positioned to the l
eft or right of the hovered element.)
Applying: Synthesizer.VectorGraphics: Improve icon button positioning of CurrentInstrument view. Framework.VectorGraphic
s: Generalize DebuggerDisplays better.
Applying: JJ.Framework.VectorGraphics: Correct ElemenPosition.RelativeCenterX and RelativeCenterY with aid of a unit tes
t.
Applying: JJ.Framework.VectorGraphics: Get rid of Elementbase._isDisposing. Those are replaced by internal NullifyDiagra
m() and NullifyParent() methods.
Applying: Synthesizer: Lots of code for displaying CurrentInstrument Scale and MidiMappings, even though those are not a
ctually displayed yet.
Applying: Synthesizer: CurrentInstrument bar: Show default Scale and default MidiMapping.
Applying: * Synthesizer.VectorGraphics: Left align CurrentInstrument MidiMapping elements, while still right-aligning th
e Patch elements. * Synthesizer: Finetune positioning of CurrentInstrument vector graphics elements. * JJ.Framework.Vect
orGraphics: Finetune the coordinate indicators: Separate control over displaying coordinate indicators for composites an
d primitives. Do not show coordinate indicators for invisible elements (but do show them for elements with invisible sty
le, because those can still be interacted with).
Applying: Synthesizer CurrentInstrument bar: Rename MidiMappingElement variables to MidiMapping, because that is the ent
ity type that is used.
Applying: Synthesizer: * CurrentInstrument bar: Dislay current Scale and current MidiMapping upon OpenDocument instead o
f upon add first Patch. * Do not show delete buttons for MidiMappings in CurrentInstrument bar.
Applying: Synthesizer.VectorGraphics: Make accidental disposal of ToolTipElement better and prevent it from jumping arou
nd when deleting and redistributing elements.
Applying: Synthesizer: Make CurrentInstrumentExpandPatch work for opening external patches, instead of throwing an excep
tion on them.  Also made MainForm.Events more concise by executing side effects in the TemplateActionHandler. (Lack of c
hoice = guarantees.) Also to open an external patch in a new window upon CurrentInstrumentExpandPatch.
Applying: Rename CurrentInstrument view to CurrentInstrumentBar.
Applying: Synthesizer: Underscores in the MainPresenter.Actions.cs methods.
Applying: Rename "Publish to Git.bat" to "Prepare Publish to Git.bat"
Applying: * JJ.Framework.VectorGraphics: Refactor CalculationVisitor.PostProcessCurve to not recreate the generated elem
ents every time, only delete and create a curve segment's lines and points if needed. Also try to make it faster by reme
mbering property values in local variables. * JJ.Framework.VectorGraphics: CoordinateIndicatorHelper: Take invisibility
of parents into consideration to hide CoordinateIndicators. * JJ.Framework.Collections: SelectAncestors and SelfAndAnces
tors extension methods + unit tests.
Applying: JJ.Framework.VectorGraphics: Optimize bezier curve calculation and drawing.
Applying: JJ.Framework.VectorGraphics: FlowPositionerLeftAligned and FlowPositionerRightAligned. JJ.Framework.Mathematic
s: Correct Randomizer. Apparently GetDouble with min and max never worked?
Applying: JJ.Framework.VectorGraphics: Flow Positioners: Vertical spacing and horizontal spacing.
Applying: Rename 'Prepare Publish to Git.bat' to 'Prepare Publish to GitHub.bat'.
Applying: JJ.Framework: Move a text stuff from JJ.Framework.Common to JJ.Framework.Text.
Applying: Publish JJ.Framework.Text on NuGet as a test. Resharper refactorings.
Applying: Publish JJ.Framework.Text to NuGet as a test.
Applying: JJ.Framework.VectorGraphics: Correct small programming error in FlowPositionerRightAligned. Change the graphic
s in the test forms for it to become more apparent whether it is correct.
Applying: JJ.Framework.VectorGraphics: Give IPositioner an overload that takes an Element collection, for much easier us
e with vector graphics elements.
Applying: Synthesizer: VectorGraphics: Make CurrentInstrumentBar make use of the FlowPositionerRightAligned and FlowPosi
tionerLeftAligned. Not finished.
Applying: * JJ.Framework.VectorGraphics: Try to correct that FlowPositioners put first item on second row if it does not
 fit in the row. (Does not work correctly yet.) * JJ.Framework.Synthesizer: Give most buttons icons in CurrentInstrument
Bar an ligher shade of gray. * Make CurrentInstrumentBar size with amount of rows. (Revealed space still has an odd colo
r.) * JJ.Framework.Text.1.0.0.41311.nupkg
Applying: Rename JJ.Framework.Common's README.MD to .TXT.
Applying: Play around with NuGet packages: Publish JJ.Framework.PlatformCompatibility and e.g. include code's XML docume
ntation in it.
Applying: JJ.Framework.VectorGraphics: Correct that FlowPositioners put first item on second row if it does not fit in t
he row. Made it much simpler so less prone to programming error.
Applying: Framework: * Publish .Common to NuGet. * Make .Common not dependent on .PlatformCompatibility. * Remove obsole
te .PlatformCompatibility methods. * Add some missing non-essential files.
Applying: Publish JJ.Framework.Reflection on NuGet. This is the first package I publish that has dependencies.
Applying: Missing NuGetTest packages.config.
Applying: NuGet packaging of JJ.Framework components.
Applying: JJ.Framework.Exceptions: * Refactor * USe a T4 Text Template for many simple exception types. * Give Comparati
ve exceptions a base class. * Null tolerance towards exception constructor arguments. * Some unit tests.
Applying: JJ.Framework.Exceptions: Generically unit test all SimpleExceptionWithExpressionBase-derived exceptions.
Applying: JJ.Framework.Exceptions: Extend ComparativeException capabilities: each of the 2 operands can now be a value,
name, expression with control over showing the value of either of the expressions.
Applying: JJ.Framework.Exceptions: Make NotFoundException and NotUniqueException more versatile. Lots of unit tests. Min
or refactorings and improvements. JJ.Framework.Text: Overloads for TrimStartUntil and TrimEndUntil with char as the unti
l. Correct the summaries of those methods. They all said 'right', while some of them should have said 'left'.
Applying: JJ.Framework.Exceptions: Reengineer UnexpectedTypeException and IsNotTypeException a little.
Applying: JJ.Framework.Exceptions: string name constructor parameters for the IsNotTypeExceptionj and IsTypeException.
Applying: JJ.Framework.Exceptions: NuGet deployment files.
Applying: Move NuGetTest.sln to root.
Applying: Remove NuGetTest folder from root.
Applying: .tfignore.
Applying: Remove packages folder
Applying: Try to get TFS to ignore my NuGet packages folder.
Applying: Move code from JJ.Framework.Common to JJ.Framework.Conversion, extend it, and start unit testing it. Prelimina
ry NuGet packaging files for JJ.Framework.Conversion. Have not actually published it yet.
Applying: JJ.Framework.Conversion.Tests: Finish test passing invalid values to ParseNullable methods.
Applying: JJ.Framework.Conversion: Test_TryParse_NotNullable_WithFormatProvider.
Applying: JJ.Framework.Conversion: Make NumericParsers based on generated code with a T4 text template. Extend the Numer
icParsers with parsing for Decimal, Single, Int16, Int64.
Applying: JJ.Framework.Conversion: Improve unit tests for alternative NumberStyles. Make (generated) code of NumericPars
ers shorter. Adapt Synthesizer app to code changes. Fix NuGet references in Synthesizer solution. JJ.Framework.Common: A
dd SetThreadCultureName back with an obsolete flag.
Applying: JJ.Framework: Put the NuGet packaging script in one .ps1 file for all the components. Put all component packag
es in a single Releases folder. Package JJ.Framework.Conversion.
Applying: JJ.Framework.Conversion: SimpleTypeConverter: Made en-US not the default for when you do not pass a format pro
vider. Use the current culture for that.
Applying: JJ.Framework.Conversion: Update readme and nuspec.
Applying: JJ.Framework.Conversion.1.0.6636.36531.nupkg
Applying: NuGet package JJ.Framework.Testing.
Applying: NuGet publish JJ.Framework.Testing.
Applying: Publish JJ.Framework.IO on NuGet.
Applying: Trivials.
Applying: Change NuGet package version from 1.0.* to 1.1.*
Applying: Make AssemblyInfo version wildcards go 1.1.* again, instead of 1.1.0.*. It seemed to cause newer versions woul
d with a lower version number, because the Revision number (the 4th number in the version number) does not always go up.
 It seems it goes up, until it doesn't. And then you also need that 3rd number, the Build number.
Applying: Change icon for nuget packages.
Applying: Add jj-icon-64x64.png again, so links to it to GitHub don't break on nuget.org
Applying: NuGet publish JJ.Framework.Collections.1.1.6637.34225.nupkg
Applying: NuGetTest JJ.Framework.Collections.1.1.6637.34225.nupkg
Applying: * JJ.Framework.Exceptions: Make ComparativeExceptions determine mustShowValueA and mustShowValueB automaticall
y, not by passing these Booleans explicitly. * JJ.Framework.Reflection: ReflectionHelper.IsSimpleType.
Applying: JJ.Framework.Exceptions: Show invalid values in more types of Exception.
Applying: JJ.Framework.Exceptions: Make NotFoundException and NotUniqueException display value of non-unique item if it
is a simple type. Also normalize the display of values. It is always formulated as e.g. 'height of 0' in every message,
which simplifies the code.
Applying: JJ.Framework.Exceptions: SimpleExceptions and ExceptionsWithNameAndValue can be the same again, now including
the value has a generic solution.
Applying: JJ.Framework.Exceptions: Subdivide into sub-namespaces. Make BasicExceptions take object instead of string, so
 it can be anonymous type too. Make explanation of that indicator parameter better.
Applying: JJ.Framework.Exceptions: Enable more usage of anonymous types as indicators. Add text to explain about usage t
o the XML doc comment.
Applying: Trivials
Applying: JJ.Framework.Exceptions:More useful(?) member summaries.
Applying: NuGet release JJ.Framework.Collections.1.2.6640.39181.nupkg, JJ.Framework.Common.1.2.6640.39171.nupkg, JJ.Fram
ework.Conversion.1.2.6640.39176.nupkg, JJ.Framework.Exceptions.1.2.6640.39175.nupkg, JJ.Framework.IO.1.2.6640.39179.nupk
g, JJ.Framework.PlatformCompatibility.1.2.6640.39169.nupkg, JJ.Framework.Reflection.1.2.6640.39173.nupkg, JJ.Framework.T
esting.1.2.6640.39178.nupkg, JJ.Framework.Text.1.2.6640.38990.nupkg.
Applying: Now with the actual NuGet releast packages: JJ.Framework.Collections.1.2.6640.39181.nupkg, JJ.Framework.Common
.1.2.6640.39171.nupkg, JJ.Framework.Conversion.1.2.6640.39176.nupkg, JJ.Framework.Exceptions.1.2.6640.39175.nupkg, JJ.Fr
amework.IO.1.2.6640.39179.nupkg, JJ.Framework.PlatformCompatibility.1.2.6640.39169.nupkg, JJ.Framework.Reflection.1.2.66
40.39173.nupkg, JJ.Framework.Testing.1.2.6640.39178.nupkg, JJ.Framework.Text.1.2.6640.38990.nupkg.
Applying: Synthesizer.VectorGraphics: Tweak the CurrentInstrumentBar positioning and give some elements an opaque backgr
ound rectangle until it looks better.
Applying: JJ.Framework.VectorGraphics / JJ.Presentation.Synthesizer.VectorGraphics: Fix that CurrentInstrumentBar's last
 Patch item's MoveBack button did not work. Turns out VectorGraphics API's Element.Visible = false did not effectively m
ean Enabled is also false. Corrected some Enabled / Visible cascading in the CalculationVisitor and commented some code.

Applying: Synthesizer: Expose Library Scales and MidiMappings as tree nodes.
Applying: Synthesizer: Library TreeNodes for Scales & MidiMappings: Extract some methods.
Applying: Synthesizer: DocumentTree's LibraryScale and LibraryMidiMapping selection actions.
Applying: Trivials
Applying: Prepare Publish to GitHub.bat: Change absolute 'root' path.
Applying: Rename OneOff namespace to Utilities.
Applying: Utility CreateEmptyFileInEmtpyFoldersRecursive.
Applying: Repair references to JJ.Framework.Exceptions (again).
Applying: Extra README2.MD
Applying: Get rid of some Resharper warnings.
Applying: Synthesizer: DocumentTree tag matching for LibraryScale and LibraryMidiMapping nodes.
Applying: Synthesizer: DocumentTreeUserControl: Correct the tag matching of LibraryMidi and LibraryScale nodes in the fu
ll-CRUD conversion.
Applying: Synthesizer: DocumentTree Scale Nodes + Select & Show actions. Remove DocumentTree_SelectMidiMapping's automat
ically swiching MidiMappingDetails view.
Applying: * Synthesizer: Presentation: * ScaleCreate and ScaleDelete from DocumentTree instead of ScaleGrid. * Refactor
away ScaleGrid. * Framework: Fix invalid usings to changed JJ.Framework.Exceptions namespaces.
Applying: Synthesizer: Refactor DocumentTreeUserControls GetSimpleTreeNodeKeyIndicator: Use it more, rename it to have t
he word 'Simple' in it, to imply that it does not apply to all TreeNodes.
Applying: Synthesizer: Library Exposure of Scales and MidiMappings: Add actions to CurrentInstrumentBarPresenter. (Not f
inished.) Also in MainPresenter.Refresh.cs put an underscore before suffix _Refresh, so it is consistent with the naming
 of the other action methods.
Applying: Synthesizer: Change CurrentInstrumentBar's MidiMappings and Scale to a fallback to ones from the system docume
nt, instead of it being fixed to those out of the system document.
Applying: Synthesizer: Add actions to MainPresenter for adding Scale and MidiMappings to CurrentInstrument.
Applying: Synthesizer: Make actions work in the WinForms layer: CurrentInstrumentBar's ExpandMidiMapping, MoveMidiMappin
gBackward, MoveMidiMappingForeward, DeleteMidiMapping, MidiMappingDetails_AddToInstrument, ToneGridEdit_SetInstrumentSca
le, ScaleProperties_SetInstrumentScale.
Applying: Synthesizer: Make button visibility properties of base classes protected, so that designer files don't acciden
tally overwrite it, so that the ScaleProperties AddToInstrument button is visible.
Applying: Synthesizer: ScaleProperties_Switch upon DocumentTree_SelectScale.
Applying: Synthesizer: You can do a MidiMappingDetails switch on the tree nodes if the MidiMappingDetails screen is alre
ady open. Same form Scales' ToneGridEdits.
Applying: Synthesizer: Apply Current Scale and Current MidiMappings to infrastructure also when changed, instead of the
fixed Scale and MidiMappings from the System Document.
Applying: Change "Prepare Publish to GitHub.bat".
Applying: LICENSE.TXT, README.MD and trivials.
Applying: Synthesizer: Rename MidiMapping to MidiMappingGroup.
Applying: Synthesizer: Rename MidiMappingElement to MidiMapping.
Applying: Synthesizer: MidiMapping fields totally different + adapt all logic
Applying: Synthesizer: Rework after Simplify MidiMapping Model: * Trivials * Some forgotten resource strings * Simplify
UserFriendlyIdentifier. * Remove Scale.MidiMappings property. * Remove ScaleValidator_Delete. * Fix that EntityPresenter
s did not show short validation messages, only the long full-document validation messages. * Hide ControllerCode propert
y when MidiMappingType is not 'MidiController'. * TextBoxName was accidentally mapped to the Position property. * Apply
CultureCode from config again.
Applying: Synthesizer: MonitoringBar: Real time monitoring of MIDI values and dimension values. First working version.
Applying: Synthesizer: Replace left-over occurrences of 'MidiMappingElement' by 'MidiMapping'.
Applying: Synthesizer: Monitoring Bar: Make prettier.
Applying: Synthesizer: Monitoring Bar: Make prettier
Applying: Synthesizer: MonitoringBar: Make prettier.
Applying: Synthesizer: MidiBar: Reuse the same TextStyle instance for both labels.
Applying: Synthesizer: Delay Midi event MonitorBar updates
Applying: Synthesizer: MonitoringBar / DelayedControlInvoker: * Make delay configurable and set it to a nice 25 ms, beca
use 100 ms still seems too slow for the musician's and eyes and fingers. * Overwrite the action while interval is busy.
Don't delay overwriting the action. You want the last action.
Applying: Comment
Applying: Synthesizer: MidiInputProcessor: Move raising value change events outside the calculator lock.
Applying: Synthesizer: MonitoringBar: Show ellipsis when no Midi input received yet, instead of e.g. "MIDI:" and nothing
 behind it.
Applying: Synthesizer: Rename CurrentInstrumentBar to InstrumentBar.
Applying: Synthesizer: InstrumentBar: Correct responsive positioning.
Applying: Synthesizer: MidiMappingCalculato is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/
.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
r / MidiMappingProcessor: Better performance, by applying mappings more specifically and precalculating dictionaries. Gl
obally change most Union calls by Concat calls, since they are faster and usually what is intended.
Applying: Synthesizer: * Make IMidiMapping less luxurious. * Rename MidiMappingDto.Name to CanonicalName. * Make initial
 remembered controller values derived from patch calculator values.
Applying: Synthesizer: MonitoringBar: Display both absolute and relative controller values.
Applying: Synthesizer: MonitoringBar: Add tooltip that explains the how the relative and absolute controller values are
displayed. It stays always visible, though.
Applying: Synthesizer: MonitoringBar: Remove tool tip again (about how relative/absolute MIDI controller values are disp
layed). Not only did it not hide (bug), but it is so much text, it does not really help much. Yanking a controller and s
eeing what happens you should figure out eventually what's going on. The least relevant number is in braces and if you k
now what relative MIDI controller values are, you will get it.
Applying: Synthesizer: MonitoringBar: Move some value formatting from Presenter to ToViewModel namespace.
Applying: Synthesizer: Repeating octaves: ability to specify not all octaves and have it automatically complete it with
additional octaves.
Applying: Synthesizer: Remove some unnecessary ToneDto properties. Rename some Tone extension methods.
Applying: Synthesizer: Additional Dimensions: Octave, Ordinal, ToneValue, ScaleBaseFrequency
Applying: Synthesizer: Pass tone-related dimensions from MidiInputProcessor to PatchCalculator.
Applying: trivials
Applying: Synthesizer: VectorGraphics: Add strategic HeightChanged events to respond to InstrumentBar and MonitoringBar
height changes. The minimalist approach will keep complexity/performance impact away from the VectorGraphics API.
Applying: Synthesizer: WinForms: Make backcolor of Window normal so if the back is revealed when InstrumentBar becomes t
oo high, it looks normal. Also try to make the default width of the property box more normal.
Applying: Solve some (ReSharper) warnings.
Applying: Synthesizer: Calculation Engine: Remove uninlining code completely.
Applying: Synthesizer: Calculation Engine: Refactor away OperatorDtoVisitor_ProgrammerLaziness
Applying: Synthesizer: Simplify OperatorDtoVisitor_Rewriting (that works with the InletsToDimension and Random operators
).
Applying: Synthesizer: Fix use of DeleteButtonVisible property that made UserControl designers crash.
Applying: Synthesizer: * Bootstrapped the Random operator's being tied to an Interpolate operator. (Rework remains) * Si
mplified GetUsedIn: It no longer looks outside the context of the document, which is faster. It was unworkably slow for
the tooltip of the Input Patch in the System Document. * Fixed that new patches got canonical patch group name instead o
f friendly patch group name. * Published JJ.Framework NuGet packages for new StringExtensions.
Applying: Synthesizer: Rework bootstrapping Random operator wiring.
Applying: JJ.Framework.Text: Make obsolete TakeLeft and TakeRight cause compiler error, instead of just throwing an exce
ption at run time. Publish the change to NuGet.
Applying: CollectionExtensions.Zip (without resultant collection)
Applying: Synthesizer: DtoCloner slightly more efficient if source = dest.
Applying: Synthesizer: Refactor away ResampleInterpolationTypeEnum just using InterpolationType(Enum). In this, CubicAbr
uptSlope was totally removed and CubicEquidistant was demoted to a mere performance optimization. Turns out CubicEquidis
tant does not interpolate as well as I thought.
Applying: Synthesizer/Mathematics: Refactor Interpolator.
Applying: Synthesizer: Improve interpolation performance by pre-calculating coefficients at resample time, simplify DTO
variations with interpolation.
Applying: Synthesizes: Interpolate OperatorCalculators: Make abstract base class for shared stuff.
Applying: * Synthesizer * Implement backwards direction for all interpolators. * Fix the ticks in the sound when an inte
rpolate operator. * Some tests for checking the backward direction of linear interpolation, but they do not succeed yet.
 * Framework * NuGet publish JJ.Framework.Mathematics * Give it a nicer README.MD.
Applying: Synthesizer: Fix that Random did not use interpolation types other than Block, Stripe and Cubic. Line and Herm
ite were not used.
Applying: Synthesizer: Interpolators: Simplify usage of sampling rate or dx.
Applying: Synthesizer: Interpolate Operators: The first LookAhead variation of an interpolator. Rework remains.
Applying: * Synthesizer: Distinction between LookAhead and LagBehind interpolations: Most of the back-end done, except f
or the actual calculations. * Architecture: Process all (a ton of) ReSharper inspections on JJ.Business.Synthesizer.
Applying: Synthesizer: Rename LookAheadOrLagBehind to FollowingMode.
Applying: Resharper refactorings
Applying: Synthesizer: Interpolators: Mostly front-end for the FollowingMode property
Applying: Synthesizer: Interpolate Calculators: Solve VirtualMemberCallInConstructor crashes. Program Interpolate_Operat
orCalculator_Stripe_LookAhead.
Applying: Synthesizer: Abstractions for Interpolate Calculator: Cubic and Hermite, LookAhead and LagBehind. Almost works
, except for ResetNonRecursive, which initializes the samples wrong.
Applying: Synthesizer: Interpolate Calculators: Make ResetNonRecursive work for LookAhead 4-point interpolations.
Applying: Synthesizer Interpolate_OperatorCalculators: * Move code from 4Point base class to innermost base class. * Mak
e 2Point base classes, including a LagBehind and LookAhead variation. * Base Line interpolations on the 2Point base clas
ses. * Adapt the Block and Stripe classes to the base class changes. (Removing and reorganizing code.) * Make some imple
mentation methods sealed so implemented only once.
Applying: Synthesizer: Generalize 2X1Y Interpolator Calculators.
Applying: Misc SQL
Applying: VectorGraphics: Dispose Curve's CalculatedLines along with it.
Applying: Synthesizer Trivials
Applying: * QuestionAndAnswer: * Move some deprecated projects to Archive. * Make words import for learning words of lan
guages. * Correct ConverterBase, so that it recognizes HTTPS for converting links to URL's relative to a Source's URL. *
 Add some luxury to the CsvReader class. * Make QuestionAndAnswer.Mvc use nameof operator on Names constants. * Synthesi
zer: Generalize Follower sampling mechanism. It really saves a lot of repeated, subtle logic. (MinFollower and MaxFollow
er still show bugs, but I think it is the RedBlackTree that messes up, now that it is called with slightly different dat
a. Still under investigation.) * Reshaper refactorings (all over the place).
Applying: QuestionAndAnswer: some csproj/sln administration.
Applying: QuestionAndAnswer: csproj/sln administration
Applying: QuestionAndAnswer: More csproj/sln bureaucracy.
Applying: JJ.Demos.ReturnActions.MvcPostData: Remove unused references.
Applying: JJ.Demos.ReturnActions.MvcPostData: Remove unnecessary script.
Applying: JJ.Demos.ReturnActions.MvcPostData: Remove unnecessary BundleConfig code.
Applying: JJ.Demos.ReturnActions.MvcUrlParameter: Remove unused references, unused scripts and unnecessary BundleConfig
code.
Applying: JJ.Demos.ReturnActions.MvcUrlParameter: Inline out variables.
Applying: Resharper refactorings on the JJ.Demos.ReturnActions projects.
Applying: Rename Demos.ReturnActions projects, to having the word 'ViewMapping' in them.
Applying: Demos.ReturnActions*: Rename project folders after project renames.
Applying: QuestionAndAnswer: * TryGetCategoryByParentAndIdentifier from graph, not database. * TryGetByIdentifier => Try
GetManyByIdentifier. * Import: Allow configuring a category path instead of just a single category identifier. * Import:
 DutchToPolishFriendly split off from DutchToPolishHomeImprovement. * Import: Make LanguageCategoryDescriptionCorrector
to put those in the right place. * Demos.ReturnActions: Many different variations on using return actions in preparation
 of eliminating the 'ViewMapping' experiment. (Not finished) * SgmlReader: Remove accidentally generate is not a valid a
ttribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
 is not a valid attribute name: Third Party/FluentNHibernate/Source Code/1.3/.gitattributes:2
d Dispose method that threw a NotImplementedException. * JJ.Framework.Collections: Concat and Union overloads with param
s * ReSharper 'using' corrections (causing many changed files)
Applying: JJ.Demos.ReturnActions: Check in a load of missing files.
Applying: QuestionAndAnswer.sln: Correct source control bindings.
Applying: QuestionAndAnswer: * Merge some Resource files to a single place. * Move AppService and AppService.DemoClient
to Archive.
Applying: QuestionAndAnswer: Some ReSharper refactorings.
Applying: QuestionAndAnswer: Normalize string resources, putting more in CommonResources.
Applying: QuestionAndAnswer: Add Polish to the resource strings (automated translations). This does not take care of acc
usative forms of nouns.
Applying: QuestionAndAnswer: Add and use separate resource string for Polish accusative for the word Question and Catego
ries. Not sure how to translate it correctly though.
Applying: Demos.ReturnActions: Rename folders and namespaces properly. Share the same App_Start code among multiple .Mvc
 projects. Make JJ.Demos.ReturnActions.WithViewMapping.Mvc.UrlParameter start again. (It was probably the temporary IIS
files of IISExpress that were corrupted. But switched to Local IIS instead.)
Applying: Move some duplicate code from JJ.Demos.ReturnActions.NoViewModel.Mvc.UrlParameter to a more general spot.
Applying: Demos.ReturnActions: Move more repeated code to general places.
Applying: JJ.Demos.ReturnActions.NoViewMapping: Try use string returnActions.
Applying: * JJ.Demos.ReturnActions: Make custom-programmed ActionDispatcher. * Start at default authorization/authentica
tion error handling for MVC. * JJ.Framework.Mvc: ActionDispatcher refactoring: Use CallerMemberName to get the sourceAct
ionName parameter automatically * Rename IViewMapping.GetRouteValues to TryGetRouteValues to indicate you can return nul
l.
Applying: * Demos.ReturnActions: Work on default redirection of security errors and usage of web.config's customErrors.
* ReSharper refactorings.
Applying: Demos.ReturnActions: Work a little more on error redirects.
Applying: Correct JJ.sln, adding missing projects too.
Applying: Missing automaticaly copied files.
Applying: Convert project type of JJ.Framework.CodeAnalysis. (Lots of manual work.)
Applying: Upgrade NuGet packages (including migratation from MVC 4 ->  MCV 5.X) (rework remains)
Applying: Missing files
Applying: Update NuGet packages again.
Applying: Remove source code and 'installers' of NHibernate and FluentNHibernate from the source code. (Rework remains.)

Applying: Many ReSharper refactorings.
Applying: csproj's .NET 4.6.1
Applying: ReSharper refactorings
Applying: Rename EntityFramework5 to just EntityFramework.
Applying: Make most unit test pass again, including those that use EntityFramework.
Applying: Update some NuGet packages. Also made roslyn compilation of synth test projects work, but really just by clear
ing NuGet cache, cleaning solution, deleting bin folders and clearing ReSharper cache. (Error now gone about not found S
ystem.Collections.Immutable because it did not match version 1.2.1.0)
Applying: Mess around with Roslyn references.
Applying: At least Synth Roslyn compilation works again.
Applying: Upgrade to newest Roslyn and do a binding redirect to solve version conflict of System.Collections.Immutable i
n JJ.Presentation.Synthesizer.WinForms.
Applying: Demos.ReturnActions: A working variation without view mappings, with return actions managed at the MVC level,
with a custom action dispatcher, with error redirects, are also used for login redirects.
Applying: Make JJ.Demos.ReturnActions without view mapping: Make ActionDispatcher use ActionDispatcherBase.
Applying: JJ.Framework.Mvc: BasicHandleErrorAttribute: Handle the case where redirecting to the same error page over and
 over again would make the same ret upon ret upon ret stack up.
Applying: Remove references to missing files.
Applying: QuestionAndAnswer: * Remove ViewMapping and platform-independent action dispatching idea from the MVC app. * M
anage return actions mostly in the MVC layer. * Route authentication and authorization problems using exceptions. * Rout
e NotFoundException to a custom error page in the BasicHandleErrorAttribute. * This prevents return values of type objec
t in Presenter methods, because no longer can many methods return LoginViewModel or NotFoundViewModel. They just return
the main view model the Presenter is about. * Remove redundant action methods from Presenters.
Applying: Move ActionDispatcher/ViewMapping and related classes from Framework.Mvc and Framework.Presentation to a Demo
project's Framework assemblies.
Applying: Remove references to missing files.
Applying: Fix error redirects in ReturnActions demo.
Applying: Trivials
Applying: Set csproj C# version to latest minor, to have ReSharper not trip over it, preventing need for DotSettings for
 it.
Applying: Refactor away EntityStatusManagement from JJ.Framework.Business, giving QuestionAndAnswer its own custom Entit
yStatusManager class.
Applying: Make other solutions build after framework refactorings.
Applying: Get rid of some ReSharper warnings.
Applying: Trivials before GitHub publish.
Auto packing the repository in background for optimum performance.
See "git help gc" for manual housekeeping.
Enumerating objects: 104302, done.
Counting objects: 100% (10400/10400), done.
Delta compression using up to 12 threads.
Compressing objects: 100% (10387/10387), done.
Writing objects: 100% (10400/10400), done.
Total 10400 (delta 7848), reused 0 (delta 0)
Removing duplicate objects: 100% (256/256), done.
PS D:\Source\JJs Software\JJ git-svn-tf>

PS D:\Source\JJs Software\JJ git-svn git-tf 2> git remote remove jj-git-tf
PS D:\Source\JJs Software\JJ git-svn git-tf 2> git remote remove jj-git-svn
