<Configuration>
  <SharedSolutionTemplateManager>
    <LiveTemplates>
      <Template uid="03229c49-6943-46b2-ba6a-400ac9550f85" shortcut="pvt" description="New Test Case" text="[Test]&#xD;&#xA;public void $TESTNAME$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TESTNAME" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="96a2564d-d0cf-407c-a732-e2d23726bd29" shortcut="attprop" description="" text="public $string$ $PropertyName$&#xD;&#xA;{&#xD;&#xA;    get { return $attributes$.Get(x =&gt; x.$PropertyName$); }&#xD;&#xA;    set { $attributes$.Set(x =&gt; x.$PropertyName$, value); }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="PropertyName" expression="" initialRange="0" />
          <Variable name="string" expression="" initialRange="0" />
          <Variable name="attributes" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="bc721957-a213-4697-bdea-b61594bb5a69" shortcut="attisspec" description="If attribute is specified, write property" text="if ($mapping$.Attributes.IsSpecified(x =&gt; x.$property$))&#xD;&#xA;    $element$.WithAtt(&quot;$attribute$&quot;, $mapping$.$property$);" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="mapping" expression="" initialRange="0" />
          <Variable name="property" expression="" initialRange="0" />
          <Variable name="element" expression="" initialRange="0" />
          <Variable name="attribute" expression="decapitalize(property)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="48d05922-610b-4777-a30c-88c5ed5ae319" shortcut="specdef" description="IsSpecified definition" text="public bool IsSpecified&lt;TResult&gt;(Expression&lt;Func&lt;$mapping$, TResult&gt;&gt; property)&#xD;&#xA;{&#xD;&#xA;    return attributes.IsSpecified(property);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public bool HasValue&lt;TResult&gt;(Expression&lt;Func&lt;$mapping$, TResult&gt;&gt; property)&#xD;&#xA;{&#xD;&#xA;    return attributes.HasValue(property);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void SetDefaultValue&lt;TResult&gt;(Expression&lt;Func&lt;$mapping$, TResult&gt;&gt; property, TResult value)&#xD;&#xA;{&#xD;&#xA;    attributes.SetDefault(property, value);&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="mapping" expression="typeName()" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="deea9862-d955-4efa-aa35-16bae002f1c4" shortcut="test_inspector" description="Creates tests for an inspector property" text="[Test]&#xD;&#xA;public void $property$Mapped()&#xD;&#xA;{&#xD;&#xA;    mapping.$property$ = $value$;&#xD;&#xA;    inspector.$inspector_property$.ShouldEqual($value$);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;[Test]&#xD;&#xA;public void $property$IsSet()&#xD;&#xA;{&#xD;&#xA;    mapping.$property$ = $value$;&#xD;&#xA;    inspector.IsSet(Prop(x =&gt; x.$inspector_property$))&#xD;&#xA;        .ShouldBeTrue();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;[Test]&#xD;&#xA;public void $property$IsNotSet()&#xD;&#xA;{&#xD;&#xA;    inspector.IsSet(Prop(x =&gt; x.$inspector_property$))&#xD;&#xA;        .ShouldBeFalse();&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="property" expression="" initialRange="1" />
          <Variable name="value" expression="" initialRange="0" />
          <Variable name="inspector_property" expression="capitalize(property)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="db014878-7a5c-4594-848e-c8c34b19647f" shortcut="test_collection_inspect" description="" text="[Test]&#xD;&#xA;public void $collection$CollectionHasSameCountAsMapping()&#xD;&#xA;{&#xD;&#xA;    mapping.Add$collection_singular$(new $collection_mapping$Mapping());&#xD;&#xA;    inspector.$collection$.Count().ShouldEqual(1);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;[Test]&#xD;&#xA;public void $collection$CollectionOfInspectors()&#xD;&#xA;{&#xD;&#xA;    mapping.Add$collection_singular$(new $collection_mapping$Mapping());&#xD;&#xA;    inspector.$collection$.First().ShouldBeOfType&lt;I$collection_mapping$Inspector&gt;();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;[Test]&#xD;&#xA;public void $collection$CollectionIsEmpty()&#xD;&#xA;{&#xD;&#xA;    inspector.$collection$.IsEmpty().ShouldBeTrue();&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="collection" expression="" initialRange="1" />
          <Variable name="collection_singular" expression="" initialRange="0" />
          <Variable name="collection_mapping" expression="capitalize(collection_singular)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="deea9862-d955-4efa-aa35-16bae002f1c4" shortcut="test_inspector" description="Creates tests for an inspector property" text="[Test]&#xD;&#xA;public void $property$Mapped()&#xD;&#xA;{&#xD;&#xA;    mapping.$property$ = $value$;&#xD;&#xA;    inspector.$inspector_property$.ShouldEqual($value$);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;[Test]&#xD;&#xA;public void $property$IsSet()&#xD;&#xA;{&#xD;&#xA;    mapping.$property$ = $value$;&#xD;&#xA;    inspector.IsSet(Prop(x =&gt; x.$inspector_property$))&#xD;&#xA;        .ShouldBeTrue();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;[Test]&#xD;&#xA;public void $property$IsNotSet()&#xD;&#xA;{&#xD;&#xA;    inspector.IsSet(Prop(x =&gt; x.$inspector_property$))&#xD;&#xA;        .ShouldBeFalse();&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="property" expression="" initialRange="1" />
          <Variable name="value" expression="" initialRange="0" />
          <Variable name="inspector_property" expression="capitalize(property)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="db014878-7a5c-4594-848e-c8c34b19647f" shortcut="test_collection_inspect" description="" text="[Test]&#xD;&#xA;public void $collection$CollectionHasSameCountAsMapping()&#xD;&#xA;{&#xD;&#xA;    mapping.Add$collection_singular$(new $collection_mapping$Mapping());&#xD;&#xA;    inspector.$collection$.Count().ShouldEqual(1);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;[Test]&#xD;&#xA;public void $collection$CollectionOfInspectors()&#xD;&#xA;{&#xD;&#xA;    mapping.Add$collection_singular$(new $collection_mapping$Mapping());&#xD;&#xA;    inspector.$collection$.First().ShouldBeOfType&lt;I$collection_mapping$Inspector&gt;();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;[Test]&#xD;&#xA;public void $collection$CollectionIsEmpty()&#xD;&#xA;{&#xD;&#xA;    inspector.$collection$.IsEmpty().ShouldBeTrue();&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="collection" expression="" initialRange="1" />
          <Variable name="collection_singular" expression="" initialRange="0" />
          <Variable name="collection_mapping" expression="capitalize(collection_singular)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
    </LiveTemplates>
    <FileTemplates>
      <Template uid="482e6087-caae-4484-b5cc-d7b56a938201" shortcut="" description="Test Fixture Class" text="using NUnit.Framework;&#xD;&#xA;&#xD;&#xA;namespace $Testing_Namespace$&#xD;&#xA;{&#xD;&#xA;	[TestFixture]&#xD;&#xA;	public class $Test_Fixture_Name$&#xD;&#xA;	{&#xD;&#xA;		[Test]&#xD;&#xA;		public void $Test_Name$()&#xD;&#xA;		{&#xD;&#xA;			$END$&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <ProjectLanguageContext language="CSharp" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="Testing_Namespace" expression="fileDefaultNamespace()" initialRange="0" />
          <Variable name="Test_Fixture_Name" expression="getFileNameWithoutExtension()" initialRange="0" />
          <Variable name="Test_Name" expression="" initialRange="0" />
        </Variables>
        <CustomProperties>
          <Property key="FileName" value="Class" />
          <Property key="Extension" value="cs" />
          <Property key="ValidateFileName" value="False" />
        </CustomProperties>
      </Template>
    </FileTemplates>
  </SharedSolutionTemplateManager>
  <CodeStyleSettings>
    <ExternalPath IsNull="False">
    </ExternalPath>
    <Sharing>SOLUTION</Sharing>
    <CSharp>
      <FormatSettings>
        <ALIGN_MULTILINE_ARGUMENT>False</ALIGN_MULTILINE_ARGUMENT>
        <ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER>False</ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER>
        <ALIGN_MULTILINE_EXPRESSION>False</ALIGN_MULTILINE_EXPRESSION>
        <ALIGN_MULTILINE_PARAMETER>False</ALIGN_MULTILINE_PARAMETER>
        <ANONYMOUS_METHOD_DECLARATION_BRACES>NEXT_LINE</ANONYMOUS_METHOD_DECLARATION_BRACES>
        <BLANK_LINES_AROUND_FIELD>0</BLANK_LINES_AROUND_FIELD>
        <EMPTY_BLOCK_STYLE>TOGETHER</EMPTY_BLOCK_STYLE>
        <EXPLICIT_PRIVATE_MODIFIER>False</EXPLICIT_PRIVATE_MODIFIER>
        <INDENT_ANONYMOUS_METHOD_BLOCK>False</INDENT_ANONYMOUS_METHOD_BLOCK>
        <INDENT_EMBRACED_INITIALIZER_BLOCK>False</INDENT_EMBRACED_INITIALIZER_BLOCK>
        <INITIALIZER_BRACES>NEXT_LINE</INITIALIZER_BRACES>
        <KEEP_BLANK_LINES_IN_CODE>1</KEEP_BLANK_LINES_IN_CODE>
        <KEEP_BLANK_LINES_IN_DECLARATIONS>1</KEEP_BLANK_LINES_IN_DECLARATIONS>
        <MODIFIERS_ORDER IsNull="False">
          <Item>public</Item>
          <Item>protected</Item>
          <Item>internal</Item>
          <Item>private</Item>
          <Item>new</Item>
          <Item>abstract</Item>
          <Item>virtual</Item>
          <Item>override</Item>
          <Item>sealed</Item>
          <Item>static</Item>
          <Item>readonly</Item>
          <Item>extern</Item>
          <Item>unsafe</Item>
          <Item>volatile</Item>
        </MODIFIERS_ORDER>
        <PLACE_WHILE_ON_NEW_LINE>True</PLACE_WHILE_ON_NEW_LINE>
        <SPACE_AFTER_ATTRIBUTE_COLON>False</SPACE_AFTER_ATTRIBUTE_COLON>
        <SPACE_AFTER_TYPECAST_PARENTHESES>False</SPACE_AFTER_TYPECAST_PARENTHESES>
        <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
        <SPACE_BEFORE_TYPEOF_PARENTHESES>False</SPACE_BEFORE_TYPEOF_PARENTHESES>
        <STICK_COMMENT>False</STICK_COMMENT>
        <WRAP_LINES>False</WRAP_LINES>
      </FormatSettings>
      <UsingsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
        <ExceptionName IsNull="False">
        </ExceptionName>
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
        <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
        <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
        <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
        <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      </Naming2>
    </CSharp>
    <VB>
      <FormatSettings />
      <ImportsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      </Naming2>
    </VB>
    <Web>
      <Naming2 />
    </Web>
    <Xaml>
      <Naming2 />
    </Xaml>
    <XML>
      <FormatSettings />
    </XML>
    <GenerateMemberBody />
    <Naming2>
      <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
      <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      <ExceptionName>ex</ExceptionName>
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
      <UserRule Inspect="False" Prefix="" Suffix="" Style="aa_bb" StaticnessKind="Static, Instance" AccessRight="Private, Protected, ProtectedInternal, Internal, Public" Description="MSpec naming">
        <ElementKinds>
          <Kind Name="Machine.Specifications_Behavior" />
          <Kind Name="Machine.Specifications_Context" />
          <Kind Name="Machine.Specifications_Specification" />
          <Kind Name="Machine.Specifications_SupportingField" />
        </ElementKinds>
        <ExtraRule Prefix="" Suffix="" Style="Aa_bb" />
      </UserRule>
    </Naming2>
  </CodeStyleSettings>
</Configuration>