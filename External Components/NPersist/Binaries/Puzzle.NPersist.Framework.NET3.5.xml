<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzle.NPersist.Framework.NET3.5</name>
    </assembly>
    <members>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalReferenceList">
            <summary>
            Summary description for MarshalReferenceList.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalList">
            <summary>
            Summary description for MarshalList.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlUpdateStatement">
            <summary>
            Summary description for SqlUpdateStatement.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlStatement">
            <summary>
            Summary description for SqlStatement.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlExpression">
            <summary>
            Summary description for SqlExpression.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlNodeBase">
            <summary>
            Summary description for SqlNodeBase.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.ISqlNode">
            <summary>
            Summary description for ISqlNode.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Visitor.ISqlVisitable">
            <summary>
            Summary description for ISqlVisitable.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlSelectListItem">
            <summary>
            Summary description for SqlSelectListItem.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlParenthesisGroup">
            <summary>
            Summary description for SqlHavingClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlOrderByClause">
            <summary>
            Summary description for SqlOrderByClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlClause">
            <summary>
            Summary description for SqlClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlDefaultValue">
            <summary>
            Summary description for SqlDefaultValue.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlContainsPredicate">
            <summary>
            Summary description for SqlContainsPredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlPredicate">
            <summary>
            Summary description for SqlPredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlAllPredicateType">
            <summary>
            Summary description for SqlAllPredicateType.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.CompositeTransaction">
            <summary>
            Summary description for CompositeTransaction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.BaseClasses.ContextChild">
            <summary>
            Summary description for ContextChild.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Interfaces.IContextChild">
            <summary>
            Summary description for IContextChild.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IObjectCloner">
            <summary>
            Summary description for IObjectCloner.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Interfaces.IProxy">
            <summary>
            Interface implemented by the POCO runtime proxies
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Interfaces.IInterceptable">
            <summary>
            Summary description for IInterceptable.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.ReferenceQualifier">
            <summary>
            Summary description for ReferenceQualifier.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Attributes.SourceMapAttribute">
            <summary>
            Summary description for SourceMapAttribute.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Validation.IObjectValidator">
            <summary>
            Summary description for IObjectValidator.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Visitor.SqlAccessVisitor">
            <summary>
            Summary description for SqlAccessVisitor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Visitor.SqlVisitorBase">
            <summary>
            Summary description for SqlVisitorBase.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Visitor.ISqlVisitor">
            <summary>
            Summary description for ISqlVisitor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlWhereClause">
            <summary>
            Summary description for SqlWhereClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.ISqlConditionChainPart">
            <summary>
            Summary description for ISqlConditionChainPart.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlJoinTableSource">
            <summary>
            Summary description for SqlJoinTableSource.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlTableSource">
            <summary>
            Summary description for SqlTableSource.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlBooleanLiteral">
            <summary>
            Summary description for SqlBooleanLiteral.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlLiteral">
            <summary>
            Summary description for SqlLiteral.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlAllFullTextColumnsInTable">
            <summary>
            Summary description for SqlAllFullTextColumnsInTable.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlAllColumnsSelectListItem">
            <summary>
            Summary description for SqlAllColumnsSelectListItem.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.ParameterMap">
            <summary>
            Summary description for ParameterMap.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.MethodMap">
            <summary>
            Summary description for MethodMap.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.MergeBehaviorType">
            <summary>
            Represents the strategies that can be used during merge conflicts. 
            </summary>
            <remarks>
            If an object is attached to a context, but an object with the same type and identity
            is already in that context's cache, the objects will be merged. Whenever the attached object and
            the cahced object have different values in some property, a merge conflict arises,
            which can be dealt with using any of the strategies represented by this enumeration.
            <br></br><br></br>
            The basic usage pattern could go something like this: By default the TryResolveConflicts strategy will be used,
            which means that the merger will do its best to resolves conflicts automatcally, throwing a MergeException if it fails.
            In a case where the merger fails, you catch the exception, inspect the two values and make the deciscion which
            one to keep (or to do something completely different, pehaps asking the user to start over). Just write over the unwanted 
            value with the wanted one and try to merge the object again when both values match. (both the attached and the cached objects
            are passed in properties of the MergeException). 
            <br></br><br></br>
            Alternatively, if you know that you want to resolve all conflicts that the automatic strategy can't resolve by
            keeping either the attached or the cached values, use the IgnoreConflictsUsingMergeValue or the IgnoreConflictsUsingMergeValue setting.
            <br></br><br></br>
            Finally, if you have some very sensitive data that you don't want the
            merger to try to resolve automatically, use the ThrowConcurrencyException setting to ensure that all conflicts
            will result in MergeExceptions being thrown. 
            <br></br><br></br>
            The strategy that the merger uses for automatic conflict resolution is the following:
            <br></br><br></br>
            <b>(1) Dirty Wins</b>
            First it checks to see if any of the properties is dirty (modified but not saved). If both properties
            happen to be dirty then we have an unresolvable conflict and a MergeException is thrown. But if just one 
            of the properties is dirty, its value will be the one that the merger picks.
            <br><br></br></br>
            <b>(2) Clean Wins</b>
            If none of the properties is dirty the next step is to see if any of them is Clean (loaded and without unsaved changes) 
            as opposed to NotLoaded. If both properties are Clean we again have an unresolvable conflict and a MergeException is thrown.
            But, again, if just one of the properties is Clean and the Other is NotLoaded (or Deleted), the merger will pick the Clean value.
            <br></br><br></br>
            Finally, if none of the properties are Clean, the merger will check the cached value to see if it is NotLoaded or Deleted. 
            If it is NotLoaded it uses the attached value otherwise it uses the cached value. 
            <br></br><br></br>
            Note that it is the cached object that is updated with the values from the attached object and it is a reference to the cached object
            that is finally returned by the Attach method once the operation is complete. You should therefor use the reference that is 
            returned from the Attach method in your work rather than the reference you had to the object you passed to the Attach method.
            <br></br><br></br>
            Also note that the merger will never try to move
            a NotLoaded or Deleted value from the attached object to the cached object, only Clean and Dirty values will be moved. 
            </remarks>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.MergeBehaviorType.DefaultBehavior">
            <summary>
            The value is inherited and finally resolves to TryResolveConflicts.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.MergeBehaviorType.TryResolveConflicts">
            <summary>
            The merge operation will do its best to resolve the conflict automatically, throwing a MergeException if it fails.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.MergeBehaviorType.IgnoreConflictsUsingMergeValue">
            <summary>
            The conflict will be ignored and the value of the attached object will be used.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.MergeBehaviorType.IgnoreConflictsUsingCashedValue">
            <summary>
            The conflict will be ignored and the value of the cached object will be used.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.MergeBehaviorType.ThrowConcurrencyException">
            <summary>
            No attempt to resolve the conflict will be made and a MergeException will be thrown immediately.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.LoadBehavior">
            <summary>
            Represents the behavior to be used when objects are loaded by identity.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.LoadBehavior.Default">
            <summary>
            the value is inherited. Finally resolves to Lazy.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.LoadBehavior.Lazy">
            <summary>
            Objects that are not already in the cache will become lazy loaded (so called "ghost objects") 
            with only their identity properties filled. As soon as any other property is accessed, 
            the rest of the object is loaded from the database.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.LoadBehavior.Eager">
            <summary>
            Objects that are not already in the cache will become loaded right away with values from the database.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Context">
            <summary>
            Summary description for Context.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.IContext">
            <summary>
            Summary description for IContext.
            </summary>	
        </member>
        <member name="T:Puzzle.NPersist.Framework.IPersistenceService">
            <summary>
            The main runtime interface for NPersist users.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.TryGetObjectById(System.Object,System.Type)">
            <summary>
            Tries to retrieve an object by its identity. Returns null if the object was not found.
            </summary>
            <param name="identity">The identity of the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object with the specified type and identity or null if no such object exists.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectById(System.Object,System.Type)">
            <summary>
            Retrieves an object by its identity. Throws an exception if the object was not found.
            </summary>
            <param name="identity">The identity of the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object with the specified type and identity.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object with the specified identity and type could be found</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.TryGetObjectByKey(System.String,System.Object,System.Type)">
            <summary>
            Retrieves an object by a secondary, unique key. Returns null if the object was not found.
            </summary>
            <param name="keyPropertyName">The name of the key property.</param>
            <param name="keyValue">The unique key value</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object with the specified type and unique key value or null if no such object exists.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectByKey(System.String,System.Object,System.Type)">
            <summary>
            Retrieves an object by a secondary, unique key. Throws an exception if the object was not found.
            </summary>
            <param name="keyPropertyName">The name of the key property.</param>
            <param name="keyValue">The unique key value</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object with the specified type and unique key value.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object with the specified unique key value and type could be found</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.TryGetObjectByNPath(Puzzle.NPersist.Framework.Querying.NPathQuery)">
            <summary>
            Tries to retrieve an object by an <c>NPathQuery</c> query. Rreturns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="npathQuery">An <c>NPathQuery</c> object specifying which object you want to retrieve.</param>
            <returns>An object matching the NPath query or null if no such object or multiple such objects were found.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.TryGetObjectByNPath(System.String,System.Type)">
            <summary>
            Tries to retrieve an object by an NPath query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object matching the NPath query or null if no such object or multiple such objects were found.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.TryGetObjectByNPath(System.String,System.Type,System.Collections.IList)">
            <summary>
            Tries to retrieve an object by an <c>NPathQuery</c> query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <param name="parameters">A list of <c>QueryParameter</c> objects for the NPath query</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectByNPath(Puzzle.NPersist.Framework.Querying.NPathQuery)">
            <summary>
            Retrieves an object by an <c>NPathQuery</c> query.
            </summary>
            <param name="npathQuery">An <c>NPathQuery</c> object specifying which object you want to retrieve.</param>
            <returns>An object matching the NPath query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the NPath query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the NPath query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectByNPath(System.String,System.Type)">
            <summary>
            Retrieves an object by an <c>NPathQuery</c> query.
            </summary>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object matching the NPath query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the NPath query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the NPath query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectByNPath(System.String,System.Type,System.Collections.IList)">
            <summary>
            Retrieves an object by an <c>NPathQuery</c> query.
            </summary>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <param name="parameters">A list of <c>QueryParameter</c> objects for the NPath query</param>
            <returns>An object matching the NPath query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the NPath query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the NPath query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectsByNPath(Puzzle.NPersist.Framework.Querying.NPathQuery)">
            <summary>
            Retrieves a list of objects matching an <c>NPathQuery</c> query
            </summary>
            <param name="npathQuery">An <c>NPathQuery</c> object specifying which objects you want to retrieve.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectsByNPath(Puzzle.NPersist.Framework.Querying.NPathQuery,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching an <c>NPathQuery</c> query
            </summary>
            <param name="npathQuery">An <c>NPathQuery</c> object specifying which objects you want to retrieve.</param>
            <param name="listToFill">An <c>IList</c> that you want to fill with the results of the query.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectsByNPath(System.String,System.Type)">
            <summary>
            Retrieves a list of objects matching an <c>NPathQuery</c> query
            </summary>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="type">The type of the objects you want to retrieve.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectsByNPath(System.String,System.Type,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching an <c>NPathQuery</c> query
            </summary>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="type">The type of the objects you want to retrieve.</param>
            <param name="parameters">A list of <c>QueryParameter</c> objects for the NPath query</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetObjectsByNPath(System.String,System.Type,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Retrieves a list of objects matching an <c>NPathQuery</c> query
            </summary>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="type">The type of the objects you want to retrieve.</param>
            <param name="parameters">A list of <c>QueryParameter</c> objects for the NPath query</param>
            <param name="refreshBehavior">Specifies how cached objects become refreshed with fresh values from the data source.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.CreateObject(System.Object,System.Type,System.Object[])">
            <summary>
            Creates a new object with the specified identity and type, registering it as up for creation. It will be inserted into the data source on the next call to <c>Commit</c>().
            </summary>
            <param name="identity">The identity for the new object</param>
            <param name="type">The type of the new object</param>
            <param name="ctorParams">Contructor parameters for the new object</param>
            <returns>A new object with the specified identity and type</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.CreateObject(System.Type,System.Object[])">
            <summary>
            Creates a new object with the specified type, registering it as up for creation. It will be inserted into the data source in the next call to <c>Commit</c>(). 
            </summary>
            <remarks>
            Note that you must set the values of all the identity properties that are not assigned by the data source on the object before calling the Commit() method.
            </remarks>
            <param name="type">The type of the new object</param>
            <param name="ctorParams">Contructor parameters for the new object</param>
            <returns>A new object with the specified type.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.DeleteObject(System.Object)">
            <summary>
            Registers an object as up for deletion. The object will be removed from the data source on the next call to <c>Commit</c>().
            </summary>
            <param name="obj">The object to be deleted.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.Commit">
            <summary>
            Commits all changes to the data source, inserting all new objects, removing all deleted object and saving all modified objects.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.GetNullValueStatus(System.Object,System.String)">
            <summary>
            Gets the null value status for the specified property of an object
            </summary>
            <param name="obj">The object with the property to get the null value status for</param>
            <param name="propertyName">The name of the property to get the null value status for</param>
            <returns>True if the property value is null, otherwise False</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.SetNullValueStatus(System.Object,System.String,System.Boolean)">
            <summary>
            Sets the null value status for the specified property of an object
            </summary>
            <param name="obj">The object with the property to set the null value status for</param>
            <param name="propertyName">The name of the property to set the null value status for</param>
            <param name="value">The new null value status</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IPersistenceService.BeginTransaction">
            <summary>
            Begins a transaction.
            </summary>
            <returns>An <c>ITransaction</c> object representing the local transaction</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetDeadlockStrategy">
            <summary>
            Finds the deadlock strategy that should be used given the domain map.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TouchTables(System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.DeadlockStrategy)">
            <summary>
            Lets you touch (and thereby lock, assuming this is done within a serializable transaction) the tables in the list in indexed order. 
            Use this method when you want to touch/lock the tables you will be reading from in a transaction to avoid deadlocks. If you select the TouchLockTable transaction,
            the tables you pass to the first parameter will be ignored (you may pass null to the first parameter in this case).
            </summary>
            <param name="tables">A list of table names or ITableMap instances.</param>
            <param name="deadlockStrategy">The deadlock strategy you want to use. Default will mean you use the strategy from the domain/context.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetNextParamNr">
            <summary>
            Gets the next parameter number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectStatus(System.Object)">
            <summary>
            Gets the object status.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetPropertyStatus(System.Object,System.String)">
            <summary>
            Gets the property status for an object.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.LoadProperty(System.Object,System.String)">
            <summary>
            Loads a property of an object with a value from the database.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalar(Puzzle.NPersist.Framework.Querying.IQuery)">
            <summary>
            Executes a scalar query.
            </summary>
            <param name="query">The query.</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalar(Puzzle.NPersist.Framework.Querying.IQuery,Puzzle.NPersist.Framework.Persistence.IDataSource)">
            <summary>
            Executes a scalar query on a specified data source.
            </summary>
            <param name="query">The query.</param>
            <param name="dataSource">The data source.</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalar(System.String,System.Type)">
            <summary>
            Executes a scalar npath query.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type that the npath query is primarily formulated against.</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalarByNPath(System.String,System.Type)">
            <summary>
            Executes a scalar npath query.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type that the npath query is primarily formulated against.</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalarByNPath(System.String,System.Type,System.Collections.IList)">
            <summary>
            Executes a scalar npath query.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type that the npath query is primarily formulated against.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalarByNPath(System.String,System.Type,System.Collections.IList,Puzzle.NPersist.Framework.Persistence.IDataSource)">
            <summary>
            Executes a scalar npath query on a specified data source.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type that the npath query is primarily formulated against.</param>
            <param name="parameters">The query parameters.</param>
            <param name="dataSource">The data source.</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalarBySql(System.String)">
            <summary>
            Executes a scalar sql query.
            </summary>
            <param name="sql">The sql query string.</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalarBySql(System.String,System.Collections.IList)">
            <summary>
            Executes a scalar sql query.
            </summary>
            <param name="sql">The sql query string.</param>
            <param name="parameters">The query parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ExecuteScalarBySql(System.String,System.Collections.IList,Puzzle.NPersist.Framework.Persistence.IDataSource)">
            <summary>
            Executes a scalar sql query.
            </summary>
            <param name="sql">The sql query string.</param>
            <param name="parameters">The query parameters.</param>
            <param name="dataSource">The data source.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.CommitRecursive">
            <summary>
            This method commits the context and any root contexts that this context is a leaf context to, recursively. Only used in Object/Object Mapping scenarios.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.CommitRecursive(System.Int32)">
            <summary>
            This method commits the context and any root contexts that this context is a leaf context to, recursively. Only used in Object/Object Mapping scenarios.
            </summary>
            <param name="exceptionLimit">The maximum number of exception that may occur during the commit before the operation aborts. The default value of 1 means that the commit operation will break on the first exception. A value of 0 indicates no limit on the amount of exceptions that can occur during the commit before the operation aborts.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.CommitObject(System.Object)">
            <summary>
            Commits a single object to the data source.
            </summary>
            <remarks>
            This method is exposed in order to provide a route for manual workarounds if the order in which the Commit() method 
            tries to commit the objects in the unit of work should fail due to some error in the topological sort. 
            <br></br><br></br>
            Normally the developer should not call this method which may produce strange results unless you are very sure what you are doing.
            Please use the Commit() method instead.
            </remarks>
            <param name="obj">The object to be committed.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.CommitObject(System.Object,System.Int32)">
            <summary>
            Commits a single object to the data source.
            </summary>
            <remarks>
            This method is exposed in order to provide a route for manual workarounds if the order in which the Commit() method 
            tries to commit the objects in the unit of work should fail due to some error in the topological sort. 
            <br></br><br></br>
            Normally the developer should not call this method which may produce strange results unless you are very sure what you are doing.
            Please use the Commit() method instead.
            </remarks>
            <param name="obj">The object to be committed.</param>
            <param name="exceptionLimit">The maximum number of exception that may occur during the commit before the operation aborts. The default value of 1 means that the commit operation will break on the first exception. A value of 0 indicates no limit on the amount of exceptions that can occur during the commit before the operation aborts.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.DeleteObject(System.Object,System.Type)">
            <summary>
            Registers an object as up for deletion. The object will be removed from the data source on the next call to <c>Commit</c>().
            </summary>
            <param name="identity">The identity of the object that you want to remove.</param>
            <param name="type">The type of the object that you want to remove.f</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.DeleteObjects(System.Collections.IList)">
            <summary>
            Deletes the objects in the supplied list.
            </summary>
            <remarks>
            The objects will only be marked as UpForCreation and will not be removed from the data source until you call the Commit() method.
            </remarks>
            <param name="objects">The objects to be deleted.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.PersistAll">
            <summary>
            Commits all changes to the database. This method has been renamed to Commit().
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Commit(System.Int32)">
            <summary>
            Commits all changes to the data source, inserting all new objects, removing all deleted object and saving all modified objects.
            </summary>
            <param name="exceptionLimit">The maximum number of exception that may occur during the commit before the operation aborts. The default value of 1 means that the commit operation will break on the first exception. A value of 0 indicates no limit on the amount of exceptions that can occur during the commit before the operation aborts.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.RefreshObject(System.Object)">
            <summary>
            Refreshes an object, reloading it with the current values form the data source.
            </summary>
            <param name="obj">The object to be refreshed.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.RefreshObject(System.Object,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Refreshes an object, reloading it with the current values form the data source.
            </summary>
            <param name="obj">The object to be refreshed.</param>
            <param name="refreshBehavior">The refresh behavior to be used.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.RefreshObjects(System.Collections.IList)">
            <summary>
            Refreshes a list of objects, reloading them with the current values form the data source.
            </summary>
            <param name="objects">The objects to be refreshed.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.RefreshObjects(System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Refreshes a list of objects, reloading them with the current values form the data source.
            </summary>
            <param name="objects">The objects to be refreshed.</param>
            <param name="refreshBehavior">The refresh behavior to be used.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.RefreshProperty(System.Object,System.String)">
            <summary>
            Refreshes a property of an object, reloading it with the current value form the data source.
            </summary>
            <param name="obj">The object with the property to be refreshed.</param>
            <param name="propertyName">The name of the property to be refreshed.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.RefreshProperty(System.Object,System.String,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Refreshes a property of an object, reloading it with the current value form the data source.
            </summary>
            <param name="obj">The object with the property to be refreshed.</param>
            <param name="propertyName">The name of the property to be refreshed.</param>
            <param name="refreshBehavior">The refresh behavior to be used.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Invalidate">
            <summary>
            Invalidates all objects in the cache, marking their Clean properties as NotLoaded and discarding the original property values.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Invalidate(System.Boolean)">
            <summary>
            Invalidates all objects in the cache, marking their properties as NotLoaded and discarding the original property values.
            </summary>
            <param name="invalidateDirty">Set to true if you want to invalidate Dirty properties in addition to Clean ones.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Invalidate(System.Collections.IList)">
            <summary>
            Invalidates a list of objects, marking their Clean properties as NotLoaded and discarding the original property values.
            </summary>
            <param name="objects">The list of objects to invalidate</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Invalidate(System.Collections.IList,System.Boolean)">
            <summary>
            Invalidates a list of objects, marking their properties as NotLoaded and discarding the original property values.
            </summary>
            <param name="objects">The list of objects to invalidate</param>
            <param name="invalidateDirty">Set to true if you want to invalidate Dirty properties in addition to Clean ones.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Invalidate(System.Object)">
            <summary>
            Invalidates an object, marking its Clean properties as NotLoaded and discarding the original property values.
            </summary>
            <param name="obj">The object to invalidate</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Invalidate(System.Object,System.Boolean)">
            <summary>
            Invalidates an object, marking its properties as NotLoaded and discarding the original property values.
            </summary>
            <param name="obj">The object to invalidate</param>
            <param name="invalidateDirty">Set to true if you want to invalidate Dirty properties in addition to Clean ones.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Invalidate(System.Object,System.String)">
            <summary>
            Invalidates a property of an object, marking it as NotLoaded and discarding the original property value.
            </summary>
            <remarks>
            Identity properties can not be invalidated.
            </remarks>
            <param name="obj">The object with the property to invalidate</param>
            <param name="propertyName">The name of the property to invalidate</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Invalidate(System.Object,System.String,System.Boolean)">
            <summary>
            Invalidates a property of an object, marking it as NotLoaded and discarding the original property value.
            </summary>
            <remarks>
            Identity properties can not be invalidated.
            </remarks>
            <param name="obj">The object with the property to invalidate</param>
            <param name="propertyName">The name of the property to invalidate</param>
            <param name="invalidateDirty">Set to true if you want to invalidate Dirty properties in addition to Clean ones.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.Clear">
            <summary>
            Clears all objects from the cache. 
            </summary>
            <remarks>
            This method clears the object cache and empties the unit of work. It also clears 
            cached actions from the inverse manager and any batched sql statements from the sql executor.<br></br><br></br>
            Please note that after calling Clear() on a context, all objects from that context must be regarded
            as dettached and will not be able to lazy load, dirty track and so on until you attach them to another 
            context. Normally you only use clear if you have released all references to the objects that were brought up by the
            context and you want to start fresh without having to create a new context.
            </remarks> 
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AddObserver(Puzzle.NPersist.Framework.Interfaces.IObserver)">
            <summary>
            Adds a general observer that will observe both context events and object events on all objects of all types in the context.
            </summary>
            <param name="observer">The observer</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AddObserver(Puzzle.NPersist.Framework.Interfaces.IObserver,Puzzle.NPersist.Framework.Enumerations.ObserverTarget)">
            <summary>
            Adds an observer that will observe either context events or object events on all objects of all types in the context.
            </summary>
            <param name="observer">The observer.</param>
            <param name="observerTarget">The observer target.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AddObserver(Puzzle.NPersist.Framework.Interfaces.IObserver,System.Type)">
            <summary>
            Adds an observer that will observe object events on all objects of the specified type in the context.
            </summary>
            <param name="observer">The observer.</param>
            <param name="type">The type to be observed.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AddObserver(Puzzle.NPersist.Framework.Interfaces.IObserver,System.Object)">
            <summary>
            Adds an observer that will observe object events on the specified object.
            </summary>
            <param name="observer">The observer.</param>
            <param name="obj">The object to be observed.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AddObserver(Puzzle.NPersist.Framework.Interfaces.IObserver,System.Object[])">
            <summary>
            Adds an observer that will observe object events on the specified targets (types and/or objects).
            </summary>
            <param name="observer">The observer.</param>
            <param name="targets">The targets to be observed.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetAllObservers">
            <summary>
            Gets all observers registered with the context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObservers">
            <summary>
            Gets the general observers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObservers(Puzzle.NPersist.Framework.Enumerations.ObserverTarget)">
            <summary>
            Gets the observers that are observing either context or object events on all objects of all types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObservers(System.Type)">
            <summary>
            Gets the observers observing object events on all objects of the specified type.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObservers(System.Object)">
            <summary>
            Gets the observers observing object events on the specified object.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetConnection">
            <summary>
            Gets the connection to the default data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetConnection(System.String)">
            <summary>
            Gets the connection to the specified data source.
            </summary>
            <param name="sourceName">The name of the data source</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetConnection(Puzzle.NPersist.Framework.Mapping.ISourceMap)">
            <summary>
            Gets the connection to the specified data source.
            </summary>
            <param name="sourceMap">The source map representing the data source.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.SetConnection(System.Data.IDbConnection)">
            <summary>
            Sets the connection to the default data source.
            </summary>
            <param name="value">The connection.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.SetConnection(System.Data.IDbConnection,System.String)">
            <summary>
            Sets the connection to the specified data source.
            </summary>
            <param name="value">The connection.</param>
            <param name="sourceName">The name of the data source</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.SetConnection(System.Data.IDbConnection,Puzzle.NPersist.Framework.Mapping.ISourceMap)">
            <summary>
            Sets the connection to the specified data source.
            </summary>
            <param name="value">The connection.</param>
            <param name="sourceMap">The source map representing the data source.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetConnectionString">
            <summary>
            Gets the connection string to the default data source.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetConnectionString(System.String)">
            <summary>
            Gets the connection string to the specified data source.
            </summary>
            <param name="sourceName">The name of the data source</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetConnectionString(Puzzle.NPersist.Framework.Mapping.ISourceMap)">
            <summary>
            Gets the connection string to the specified data source.
            </summary>
            <param name="sourceMap">The source map representing the data source.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.SetConnectionString(System.String)">
            <summary>
            Sets the connection string to the default data source.
            </summary>
            <param name="value">The connection string.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.SetConnectionString(System.String,System.String)">
            <summary>
            Sets the connection string to the specified data source.
            </summary>
            <param name="value">The connection string.</param>
            <param name="sourceName">The name of the data source</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.SetConnectionString(System.String,Puzzle.NPersist.Framework.Mapping.ISourceMap)">
            <summary>
            Sets the connection string to the specified data source.
            </summary>
            <param name="value">The connection string.</param>
            <param name="sourceMap">The source map representing the data source.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetDataSource">
            <summary>
            Gets the default data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetDataSource(System.String)">
            <summary>
            Gets the data source with the specified name.
            </summary>
            <param name="sourceName">The name of the data source.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetDataSource(Puzzle.NPersist.Framework.Mapping.ISourceMap)">
            <summary>
            Gets the data source represented by the source map.
            </summary>
            <param name="sourceMap">The source map representing the data source.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetSourceMap">
            <summary>
            Gets the source map representing the default data source.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetSourceMap(System.String)">
            <summary>
            Gets the source map representing the data source with the specified name.
            </summary>
            <param name="sourceName">The name of the data source.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction using the specified iolation level. 
            </summary>
            <param name="iso">The transaction isolation level.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.BeginTransaction(System.Boolean)">
            <summary>
            Begins a transaction.
            </summary>
            <param name="commitTransactionOnCommittingContext">if set to <c>true</c> (default) the transaction will be automatically committed if the Commit() method on the context is called.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.BeginTransaction(System.Data.IsolationLevel,System.Boolean)">
            <summary>
            Begins a transaction using the specified iolation level. 
            </summary>
            <param name="iso">The transaction isolation level.</param>
            <param name="commitTransactionOnCommittingContext">if set to <c>true</c> (default) the transaction will be automatically committed if the Commit() method on the context is called.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.BeginTransaction(Puzzle.NPersist.Framework.Persistence.IDataSource)">
            <summary>
            Begins a transaction on the specified data source.
            </summary>
            <param name="dataSource">The data source to start a transaction on.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.BeginTransaction(Puzzle.NPersist.Framework.Persistence.IDataSource,System.Data.IsolationLevel)">
            <summary>
            Begins a transaction on the specified data source using the specified iolation level. 
            </summary>
            <param name="dataSource">The data source to start a transaction on.</param>
            <param name="iso">The transaction isolation level.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.BeginTransaction(Puzzle.NPersist.Framework.Persistence.IDataSource,System.Boolean)">
            <summary>
            Begins a transaction on the specified data source. 
            </summary>
            <param name="dataSource">The data source to start a transaction on.</param>
            <param name="commitTransactionOnCommittingContext">if set to <c>true</c> (default) the transaction will be automatically committed if the Commit() method on the context is called.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.BeginTransaction(Puzzle.NPersist.Framework.Persistence.IDataSource,System.Data.IsolationLevel,System.Boolean)">
            <summary>
            Begins a transaction on the specified data source using the specified iolation level. 
            </summary>
            <param name="dataSource">The data source to start a transaction on.</param>
            <param name="iso">The transaction isolation level.</param>
            <param name="commitTransactionOnCommittingContext">if set to <c>true</c> (default) the transaction will be automatically committed if the Commit() method on the context is called.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.HasTransactionPending(Puzzle.NPersist.Framework.Persistence.IDataSource)">
            <summary>
            Determines whether the specified data source has a transaction pending.
            </summary>
            <param name="dataSource">The data source.</param>
            <returns>
            	<c>true</c> if the specified data source has a pending transaction; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.HasTransactionPending">
            <summary>
            Determines whether the context has a transaction pending.
            </summary>
            <returns>
            	<c>true</c> if the context has pending transaction; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.OnTransactionComplete(Puzzle.NPersist.Framework.Interfaces.ITransaction)">
            <summary>
            This method is always called by the transaction when it has completed. The developer should normally not make any calls to this method.
            </summary>
            <param name="transaction">The transaction that has completed.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetTransaction(System.Data.IDbConnection)">
            <summary>
            Gets the transaction for the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.SetTransaction(System.Data.IDbConnection,Puzzle.NPersist.Framework.Interfaces.ITransaction)">
            <summary>
            Sets the transaction for the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AttachObject(System.Object)">
            <summary>
            Attaches an object to this context.
            </summary>
            <param name="obj">The object to be attached.</param>
            <returns>The attached object. If the object already existed in the context that existing reference will be returned.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AttachObject(System.Object,Puzzle.NPersist.Framework.Enumerations.MergeBehaviorType)">
            <summary>
            Attaches an object to this context.
            </summary>
            <param name="obj">The object to be attached.</param>
            <param name="mergeBehavior">The merge behavior to be used if the object already exists in the cache and has different values.</param>
            <returns>The attached object. If the object already existed in the context that existing reference will be returned.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AttachObjects(System.Collections.IList)">
            <summary>
            Attaches a list of objects to this context.
            </summary>
            <param name="objects">The objects to be attached.</param>
            <returns>The attached objects. If an object already existed in the context that existing reference will be returned in the list.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.AttachObjects(System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.MergeBehaviorType)">
            <summary>
            Attaches a list of objects to this context.
            </summary>
            <param name="objects">The objects to be attached.</param>
            <param name="mergeBehavior">The merge behavior to be used if an object already exists in the cache and has different values.</param>
            <returns>The attached objects. If an object already existed in the context that existing reference will be returned in the list.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetIdentityGenerator(System.String)">
            <summary>
            Gets the identity generator with the specified name.
            </summary>
            <param name="name">The name of the identity generator.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.BeginEdit">
            <summary>
            Begins the editing mode. Changes made during editing mode can be cancled or accepted wholesale when the editing session is done.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.CancelEdit">
            <summary>
            Cancels the editing mode, discarding all changes that were made during the editing session.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.EndEdit">
            <summary>
            Ends the editing mode, accepting all changes that were made during the editing session.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.IsValidCache">
            <summary>
            Determines whether the cache is currently valid (all the objects in the cache pass validation).
            </summary>
            <returns>
            	<c>true</c> if the cache is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateCache">
            <summary>
            Validates all the objects in the cache, breaking (and rethrowing) on the first exception.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateCache(System.Collections.IList)">
            <summary>
            Validates all the objects in the cache, collecting all validation exceptions in the passed in list.
            </summary>
            <param name="exceptions">A list that will become filled with any validation exceptions that occur during validation.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.IsValidUnitOfWork">
            <summary>
            Determines whether the unit of work is currently valid (all the objects in the unit of work pass validation).
            </summary>
            <returns>
            	<c>true</c> if the unit of work is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateUnitOfWork">
            <summary>
            Validates all the objects in the unit of work, breaking (and rethrowing) on the first exception.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateUnitOfWork(System.Collections.IList)">
            <summary>
            Validates all the objects in the unit of work, collecting all validation exceptions in the passed in list.
            </summary>
            <param name="exceptions">A list that will become filled with any validation exceptions that occur during validation.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.IsValid(System.Object)">
            <summary>
            Determines whether the object is currently valid (the object passes validation).
            </summary>
            <param name="obj">The object to be validated</param>
            <returns>
            	<c>true</c> if the object is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.IsValid(System.Object,System.String)">
            <summary>
            Determines whether the property of an object is currently valid (the property passes validation).
            </summary>
            <param name="obj">The object with the property to be validated.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>
            	<c>true</c> if the object is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateObjects(System.Collections.IList)">
            <summary>
            Validates a list of objects, breaking (and rethrowing) on the first exception.
            </summary>
            <param name="objects">The list of objects to be validated.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateObjects(System.Collections.IList,System.Collections.IList)">
            <summary>
            Validates a list of objects, collecting all validation exceptions in the passed in list.
            </summary>
            <param name="objects">The list of objects to be validated.</param>
            <param name="exceptions">A list that will become filled with any validation exceptions that occur during validation.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateObject(System.Object)">
            <summary>
            Validates an object, breaking (and rethrowing) on the first exception.
            </summary>
            <param name="obj">The object to be validated</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateObject(System.Object,System.Collections.IList)">
            <summary>
            Validates an object, collecting all validation exceptions in the passed in list.
            </summary>
            <param name="obj">The object to be validated</param>
            <param name="exceptions">A list that will become filled with any validation exceptions that occur during validation.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateProperty(System.Object,System.String)">
            <summary>
            Validates the property of an object, breaking (and rethrowing) on the first exception.
            </summary>
            <param name="obj">The object to be validated</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.ValidateProperty(System.Object,System.String,System.Collections.IList)">
            <summary>
            Validates the property of an object, collecting all validation exceptions in the passed in list.
            </summary>
            <param name="obj">The object to be validated</param>
            <param name="propertyName">The name of the property.</param>
            <param name="exceptions">A list that will become filled with any validation exceptions that occur during validation.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetLoadObjectNPathQuery(System.Object,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Constructs an NPathQuery object representing an npath query for loading the passed in object with values from the database.
            </summary>
            <remarks>
            This is really just a utility method used by some of the NPersist methods, but it has been exposed since it might be useful sometimes when creating new framework functionality on top of NPersist.
            </remarks>
            <param name="obj">The object that should be loaded with values from the database.</param>
            <param name="refreshBehavior">The refresh behavior determining what happens if a fresh value from the database conflicts with a value in the cache.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetLoadObjectNPathQuery(System.Object,System.String)">
            <summary>
            Constructs an NPathQuery object representing an npath query for loading the passed in object with values from the database.
            </summary>
            <remarks>
            This is really just a utility method used by some of the NPersist methods, but it has been exposed since it might be useful sometimes when creating new framework functionality on top of NPersist.
            </remarks>
            <param name="obj">The object that should be loaded with values from the database.</param>
            <param name="span">The load span indicating related objects that should be loaded together with the main object.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetLoadObjectNPathQuery(System.Object,System.String,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Constructs an NPathQuery object representing an npath query for loading the passed in object with values from the database.
            </summary>
            <remarks>
            This is really just a utility method used by some of the NPersist methods, but it has been exposed since it might be useful sometimes when creating new framework functionality on top of NPersist.
            </remarks>
            <param name="obj">The object that should be loaded with values from the database.</param>
            <param name="span">The load span indicating related objects that should be loaded together with the main object.</param>
            <param name="refreshBehavior">The refresh behavior determining what happens if a fresh value from the database conflicts with a value in the cache.</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectCache">
            <summary>
            Gets the object cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObject(System.Object,System.Type)">
            <summary>
            Tries to retrieve an object by its primary identity. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="identity">The identity of the object.</param>
            <param name="type">The type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObject(Puzzle.NPersist.Framework.Querying.IQuery)">
            <summary>
            Tries to retrieve an object by a query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <remarks>
            This overload assumes that the query object is already fully set up with a query string, 
            a Type indicating the type of the object to be returned and any parameters needed by the query.
            </remarks>
            <param name="query">The query specifying the object to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObject(Puzzle.NPersist.Framework.Querying.IQuery,System.Type)">
            <summary>
            Tries to retrieve an object by a query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="query">The query specifying the object to be returned.</param>
            <param name="type">The type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObject(Puzzle.NPersist.Framework.Querying.IQuery,System.Type,System.Collections.IList)">
            <summary>
            Tries to retrieve an object by a query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="query">The query specifying the object to be returned.</param>
            <param name="type">The type of the object.</param>
            <param name="parameters">The query parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectByNPath(System.String,System.Type,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Tries to retrieve an object by an <c>NPathQuery</c> query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="npathQuery">The NPath query string.</param>
            <param name="type">The type of the object.</param>
            <param name="parameters">The query parameters.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectBySql(Puzzle.NPersist.Framework.Querying.SqlQuery)">
            <summary>
            Tries to retrieve an object by an <c>SqlQuery</c> query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="sqlQuery">The <c>SqlQuery</c> specifying the object to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectBySql(System.String,System.Type)">
            <summary>
            Tries to retrieve an object by an <c>SqlQuery</c> query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="sqlQuery">The <c>SqlQuery</c> specifying the object to be retrieved.</param>
            <param name="type">The type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectBySql(System.String,System.Type,System.Collections.IList)">
            <summary>
            Tries to retrieve an object by an <c>SqlQuery</c> query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="sqlQuery">The <c>SqlQuery</c> specifying the object to be retrieved.</param>
            <param name="type">The type of the object.</param>
            <param name="parameters">The query parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectBySql(System.String,System.Type,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Tries to retrieve an object by an <c>SqlQuery</c> query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <param name="sqlQuery">The <c>SqlQuery</c> specifying the object to be retrieved.</param>
            <param name="type">The type of the object.</param>
            <param name="parameters">The query parameters.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectByQuery(Puzzle.NPersist.Framework.Querying.IQuery)">
            <summary>
            Tries to retrieve an object by a query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <remarks>
            This overload assumes that the query object is already fully set up with a query string, 
            a Type indicating the type of the object to be returned and any parameters needed by the query.
            </remarks>
            <param name="query">The query specifying the object to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObject(System.Object,System.Type)">
            <summary>
            Retrieves an object by its identity. Throws an exception if the object was not found.
            </summary>
            <param name="identity">The identity of the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object with the specified type and identity.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object with the specified identity and type could be found</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObject(Puzzle.NPersist.Framework.Querying.IQuery)">
            <summary>
            Retrieves an object by query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="query">The query specifying the object you want to retrieve.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObject(Puzzle.NPersist.Framework.Querying.IQuery,System.Type)">
            <summary>
            Retrieves an object by query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="query">The query specifying the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObject(Puzzle.NPersist.Framework.Querying.IQuery,System.Type,System.Collections.IList)">
            <summary>
            Retrieves an object by query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="query">The query specifying the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectById(System.Object,System.Type,System.Boolean)">
            <summary>
            Retrieves an object by its identity. Throws an exception if the object was not found.
            </summary>
            <param name="identity">The identity of the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <param name="lazy">Indicates if the object should be lazily or eagerly loaded.</param>
            <returns>An object with the specified type and identity.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object with the specified identity and type could be found</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectById(System.Object,System.Type,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Retrieves an object by its identity. Throws an exception if the object was not found.
            </summary>
            <param name="identity">The identity of the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns>An object with the specified type and identity.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object with the specified identity and type could be found</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectByQuery(Puzzle.NPersist.Framework.Querying.IQuery)">
            <summary>
            Retrieves an object by query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="query">The query specifying the object you want to retrieve.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectByNPath(System.String,System.Type,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Retrieves an object by an NPath query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="npathQuery">The query specifying the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectBySql(Puzzle.NPersist.Framework.Querying.SqlQuery)">
            <summary>
            Retrieves an object by sql query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="sqlQuery">The sql query specifying the object you want to retrieve.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query.</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectBySql(System.String,System.Type)">
            <summary>
            Retrieves an object by sql query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="sqlQuery">The sql query specifying the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectBySql(System.String,System.Type,System.Collections.IList)">
            <summary>
            Retrieves an object by sql query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="sqlQuery">The sql query specifying the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectBySql(System.String,System.Type,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Retrieves an object by sql query. Throws an exception if the object was not found or more than one object matches the query.
            </summary>
            <param name="sqlQuery">The sql query specifying the object you want to retrieve.</param>
            <param name="type">The type of the object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns>An object matching the query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(Puzzle.NPersist.Framework.Querying.SqlQuery)">
            <summary>
            Retrieves a list of objects matching an <c>SqlQuery</c> query
            </summary>
            <param name="sqlQuery">An <c>SqlQuery</c> object specifying which objects you want to retrieve.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(Puzzle.NPersist.Framework.Querying.SqlQuery,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching an <c>SqlQuery</c> query
            </summary>
            <param name="sqlQuery">An <c>SqlQuery</c> object specifying which objects you want to retrieve.</param>
            <param name="listToFill">An <c>IList</c> that you want to fill with the results of the query.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(System.String,System.Type)">
            <summary>
            Retrieves a list of objects matching an sql query
            </summary>
            <param name="sqlQuery">The sql query string.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(System.String,System.Type,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching an sql query
            </summary>
            <param name="sqlQuery">The sql query string.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(System.String,System.Type,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Retrieves a list of objects matching an sql query
            </summary>
            <param name="sqlQuery">The sql query string.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <param name="parameters">The query parameters.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(System.String,System.Type,System.Collections.IList,System.Collections.IList,System.Collections.Hashtable)">
            <summary>
            Retrieves a list of objects matching an sql query
            </summary>
            <param name="sqlQuery">The sql query string.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <param name="idColumns">The names of the primary key columns.</param>
            <param name="typeColumns">The names of the type dicriminator columns (if any).</param>
            <param name="propertyColumnMap">Table with property names as keys and column names as values.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(System.String,System.Type,System.Collections.IList,System.Collections.IList,System.Collections.Hashtable,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching an sql query
            </summary>
            <param name="sqlQuery">The sql query string.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <param name="idColumns">The names of the primary key columns.</param>
            <param name="typeColumns">The names of the type dicriminator columns (if any).</param>
            <param name="propertyColumnMap">Table with property names as keys and column names as values.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(System.String,System.Type,System.Collections.IList,System.Collections.IList,System.Collections.Hashtable,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Retrieves a list of objects matching an sql query
            </summary>
            <param name="sqlQuery">The sql query string.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <param name="idColumns">The names of the primary key columns.</param>
            <param name="typeColumns">The names of the type dicriminator columns (if any).</param>
            <param name="propertyColumnMap">Table with property names as keys and column names as values.</param>
            <param name="parameters">The query parameters.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsBySql(System.String,System.Type,System.Collections.IList,System.Collections.IList,System.Collections.Hashtable,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching an sql query
            </summary>
            <param name="sqlQuery">The sql query string.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <param name="idColumns">The names of the primary key columns.</param>
            <param name="typeColumns">The names of the type dicriminator columns (if any).</param>
            <param name="propertyColumnMap">Table with property names as keys and column names as values.</param>
            <param name="parameters">The query parameters.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <param name="listToFill">An <c>IList</c> that you want to fill with the results of the query.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjects(System.Type)">
            <summary>
            Retrieves all objects of the specified type.
            </summary>
            <param name="type">The type for which you want to retrieve all objects.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjects(System.Type,System.Collections.IList)">
            <summary>
            Retrieves all objects of the specified type.
            </summary>
            <param name="type">The type for which you want to retrieve all objects.</param>
            <param name="listToFill">An <c>IList</c> that you want to fill with the results.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjects(System.Type,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Retrieves all objects of the specified type.
            </summary>
            <param name="type">The type for which you want to retrieve all objects.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjects(System.Type,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType,System.Collections.IList)">
            <summary>
            Retrieves all objects of the specified type.
            </summary>
            <param name="type">The type for which you want to retrieve all objects.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <param name="listToFill">An <c>IList</c> that you want to fill with the results.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjects(Puzzle.NPersist.Framework.Querying.IQuery,System.Type)">
            <summary>
            Retrieves a list of objects matching a query.
            </summary>
            <param name="query">The query.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjects(Puzzle.NPersist.Framework.Querying.IQuery,System.Type,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching a query.
            </summary>
            <param name="query">The query.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjects(Puzzle.NPersist.Framework.Querying.IQuery,System.Type,System.Collections.IList,Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType)">
            <summary>
            Retrieves a list of objects matching a query.
            </summary>
            <param name="query">The query.</param>
            <param name="type">The type of the objects to be retrieved.</param>
            <param name="parameters">The query parameters.</param>
            <param name="refreshBehavior">The refresh behavior.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsByQuery(Puzzle.NPersist.Framework.Querying.IQuery)">
            <summary>
            Retrieves a list of objects matching a query.
            </summary>
            <param name="query">The query.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsByQuery(Puzzle.NPersist.Framework.Querying.IQuery,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching a query.
            </summary>
            <param name="query">The query.</param>
            <param name="listToFill">An <c>IList</c> that you want to fill with the results of the query.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterObjects(System.Collections.IList,Puzzle.NPersist.Framework.Querying.NPathQuery)">
            <summary>
            Filters a list of objects, returning only those matching the supplied query.
            </summary>
            <param name="objects">The list of objects that you want to filter.</param>
            <param name="query">The query.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterObjects(System.Collections.IList,System.String,System.Type)">
            <summary>
            Filters a list of objects, returning only those matching the supplied query.
            </summary>
            <param name="objects">The list of objects that you want to filter.</param>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterObjects(System.Collections.IList,System.String,System.Type,System.Collections.IList)">
            <summary>
            Filters a list of objects, returning only those matching the supplied query.
            </summary>
            <param name="objects">The list of objects that you want to filter.</param>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterObjects(Puzzle.NPersist.Framework.Querying.NPathQuery)">
            <summary>
            Filters the objects in the cache, returning only those matching the supplied query.
            </summary>
            <param name="query">The npath query.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterObjects(System.String,System.Type)">
            <summary>
            Filters the objects in the cache, returning those matching the supplied query.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterObjects(System.String,System.Type,System.Collections.IList)">
            <summary>
            Filters the objects in the cache, returning those matching the supplied query.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterIntoDataTable(System.Collections.IList,Puzzle.NPersist.Framework.Querying.NPathQuery)">
            <summary>
            Filters a list of objects, returning a <c>DataTable</c> with values from the objects matching the NPath query.
            </summary>
            <param name="objects">The list of objects that you want to filter.</param>
            <param name="query">The <c>NPathQuery</c> query.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterIntoDataTable(System.Collections.IList,System.String,System.Type)">
            <summary>
            Filters a list of objects, returning a <c>DataTable</c> with values from the objects matching the NPath query.
            </summary>
            <param name="objects">The list of objects that you want to filter.</param>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterIntoDataTable(System.Collections.IList,System.String,System.Type,System.Collections.IList)">
            <summary>
            Filters a list of objects, returning a <c>DataTable</c> with values from the objects matching the NPath query.
            </summary>
            <param name="objects">The list of objects that you want to filter.</param>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterIntoDataTable(Puzzle.NPersist.Framework.Querying.NPathQuery)">
            <summary>
            Filters the objects in the cahce, returning a <c>DataTable</c> with values from the objects matching the NPath query.
            </summary>
            <param name="query">The <c>NPathQuery</c> query.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterIntoDataTable(System.String,System.Type)">
            <summary>
            Filters the objects in the cahce, returning a <c>DataTable</c> with values from the objects matching the NPath query.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.FilterIntoDataTable(System.String,System.Type,System.Collections.IList)">
            <summary>
            Filters the objects in the cahce, returning a <c>DataTable</c> with values from the objects matching the NPath query.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetDataTable(Puzzle.NPersist.Framework.Querying.NPathQuery)">
            <summary>
            Retrieves the result of an NPath query in the form of a DataTable.
            </summary>
            <param name="query">The <c>NPathQuery</c> query.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetDataTable(System.String,System.Type)">
            <summary>
            Retrieves the result of an NPath query in the form of a DataTable.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetDataTable(System.String,System.Type,System.Collections.IList)">
            <summary>
            Retrieves the result of an NPath query in the form of a DataTable.
            </summary>
            <param name="npath">The npath query string.</param>
            <param name="type">The type of the objects you want to filter.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A DataTable holding the values specified in the select clause of the NPath query.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectById``1(System.Object)">
            <summary>
            Tries to retrieve an object by its identity. Returns null if the object was not found.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="identity">The identity of the object you want to retrieve.</param>
            <returns>An object with the specified type and identity or null if no such object exists.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectById``1(System.Object)">
            <summary>
            Retrieves an object by its identity. Throws an exception if the object was not found.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="identity">The identity of the object you want to retrieve.</param>
            <returns>An object with the specified type and identity.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object with the specified identity and type could be found</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectByNPath``1(System.String)">
            <summary>
            Tries to retrieve an object by an NPath query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <returns>An object matching the NPath query or null if no such object or multiple such objects were found.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectByNPath``1(System.String)">
            <summary>
            Retrieves an object by an NPath query.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <returns>An object matching the NPath query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectByNPath``1(System.String,Puzzle.NPersist.Framework.Querying.QueryParameter[])">
            <summary>
            Tries to retrieve an object by an NPath query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <returns>An object matching the NPath query or null if no such object or multiple such objects were found.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectByNPath``1(System.String,Puzzle.NPersist.Framework.Querying.QueryParameter[])">
            <summary>
            Retrieves an object by an NPath query.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <returns>An object matching the NPath query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.TryGetObjectByNPath``1(System.String,System.Collections.IList)">
            <summary>
            Tries to retrieve an object by an NPath query. Returns null if the object was not found or if more than one object matched the query.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <returns>An object matching the NPath query or null if no such object or multiple such objects were found.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectByNPath``1(System.String,System.Collections.IList)">
            <summary>
            Retrieves an object by an NPath query.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <returns>An object matching the NPath query.</returns>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.ObjectNotFoundException">Thrown when no object matching the query could be found</exception>
            <exception cref="T:Puzzle.NPersist.Framework.Exceptions.MultipleObjectsFoundException">Thrown when more than one object matched the query</exception>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.CreateObject``1(System.Object[])">
            <summary>
            Creates a new object with the specified type, registering it as up for creation. It will be inserted into the data source in the next call to <c>Commit</c>(). 
            </summary>
            <remarks>
            Note that you must set the values of all the identity properties on the object before calling the Commit() method.
            </remarks>
            <typeparam name="T">The type of the new object.</typeparam>
            <param name="ctorArgs">Contructor arguments for the new object</param>
            <returns>A new object with the specified type.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjects``1">
            <summary>
            Retrieves all the objects of the specified type.
            </summary>
            <typeparam name="T">The type for which you want to retrieve all objects.</typeparam>
            <returns>All objects of the specified type.</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.DeleteObject``1(System.Object)">
            <summary>
            Registers an object as up for deletion. The object will be removed from the data source on the next call to <c>Commit</c>().
            </summary>
            <typeparam name="T">The type of the object you want to delete</typeparam>
            <param name="identity">The identity of the object you want to delete</param>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsByNPath``1(System.String,Puzzle.NPersist.Framework.Querying.QueryParameter[])">
            <summary>
            Retrieves a list of objects matching an <c>NPathQuery</c> query
            </summary>
            <typeparam name="T">The type of the objects you want to retrieve.</typeparam>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.IContext.GetObjectsByNPath``1(System.String,System.Collections.IList)">
            <summary>
            Retrieves a list of objects matching an <c>NPathQuery</c> query
            </summary>
            <typeparam name="T">The type of the objects you want to retrieve.</typeparam>
            <param name="npathQuery">The NPath query string specifying which object you want to retrieve.</param>
            <param name="parameters">The query parameters.</param>
            <returns>A list of objects matching the query</returns>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.Interceptor">
            <summary>
            Gets or sets the interceptor.
            </summary>
            <value>The interceptor.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.PersistenceManager">
            <summary>
            Gets or sets the persistence manager.
            </summary>
            <value>The persistence manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ObjectManager">
            <summary>
            Gets or sets the object manager.
            </summary>
            <value>The object manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ListManager">
            <summary>
            Gets or sets the list manager.
            </summary>
            <value>The list manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.DomainMap">
            <summary>
            Gets or sets the domain map.
            </summary>
            <value>The domain map.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.IdentityMap">
            <summary>
            Gets or sets the identity map.
            </summary>
            <value>The identity map.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ObjectCacheManager">
            <summary>
            Gets or sets the object cache manager.
            </summary>
            <value>The object cache manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ReadOnlyObjectCacheManager">
            <summary>
            Gets or sets the read only object cache manager.
            </summary>
            <value>The read only object cache manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.UnitOfWork">
            <summary>
            Gets or sets the unit of work.
            </summary>
            <value>The unit of work.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.InverseManager">
            <summary>
            Gets or sets the inverse manager.
            </summary>
            <value>The inverse manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.EventManager">
            <summary>
            Gets or sets the event manager.
            </summary>
            <value>The event manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.DataSourceManager">
            <summary>
            Gets or sets the data source manager.
            </summary>
            <value>The data source manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.SqlExecutor">
            <summary>
            Gets or sets the SQL executor.
            </summary>
            <value>The SQL executor.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.LogManager">
            <summary>
            Gets or sets the log manager.
            </summary>
            <value>The log manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.PersistenceEngine">
            <summary>
            Gets or sets the persistence engine.
            </summary>
            <value>The persistence engine.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.PersistenceEngineManager">
            <summary>
            Gets or sets the persistence engine manager.
            </summary>
            <value>The persistence engine manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ProxyFactory">
            <summary>
            Gets or sets the proxy factory.
            </summary>
            <value>The proxy factory.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.NPathEngine">
            <summary>
            Gets or sets the N path engine.
            </summary>
            <value>The N path engine.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ObjectQueryEngine">
            <summary>
            Gets or sets the object query engine.
            </summary>
            <value>The object query engine.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.AssemblyManager">
            <summary>
            Gets or sets the assembly manager.
            </summary>
            <value>The assembly manager.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ObjectFactory">
            <summary>
            Gets or sets the object factory.
            </summary>
            <value>The object factory.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ObjectCloner">
            <summary>
            Gets or sets the object cloner.
            </summary>
            <value>The object cloner.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ObjectValidator">
            <summary>
            Gets or sets the object validator.
            </summary>
            <value>The object validator.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.Notification">
            <summary>
            Gets or sets the notification mode.
            </summary>
            <value>The notification mode.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.AutoTransactions">
            <summary>
            Gets or sets a value indicating whether auto transactions are used.
            </summary>
            <value><c>true</c> if auto transactions should be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.DeadlockStrategy">
            <summary>
            Gets or sets the deadlock strategy to be used when committing a unit of work.
            </summary>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.DomainKey">
            <summary>
            Gets or sets the domain key.
            </summary>
            <value>The domain key.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ParamCounter">
            <summary>
            Gets or sets the parameter counter.
            </summary>
            <value>The parameter counter.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.OptimisticConcurrencyMode">
            <summary>
            Gets or sets the default optimistic concurrency mode.
            </summary>
            <value>The optimistic concurrency mode.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.IdentityGenerators">
            <summary>
            Gets the identity generators.
            </summary>
            <value>The identity generators.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.IsDirty">
            <summary>
            Gets a value indicating whether this context is dirty (contains unsaved changes).
            </summary>
            <value><c>true</c> if this context is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.IsEditing">
            <summary>
            Gets a value indicating whether this context is in editing mode.
            </summary>
            <value>
            	<c>true</c> if this context is in editing mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ValidationMode">
            <summary>
            Gets or sets the default validation mode.
            </summary>
            <value>The validation mode.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ValidateBeforeCommit">
            <summary>
            Gets or sets a value indicating whether validation should occur before a commit operation is carried out.
            </summary>
            <value>
            	<c>true</c> if validation should be carried out before commit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.Timeout">
            <summary>
            The timeout value in milliseconds that specifies how long this context will wait for a lock on the data source
            </summary>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.TimeToLive">
            <summary>
            Gets or sets the time to live for objects in the cache. Note: Not implemented yet!
            </summary>
            <value>The time to live.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.TimeToLiveBehavior">
            <summary>
            Gets or sets the time to live behavior for objects in the cache. Note: Not implemented yet!
            </summary>
            <value>The time to live behavior.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.LoadBehavior">
            <summary>
            Gets or sets the default load behavior.
            </summary>
            <remarks>The load behavior specifies if objects that are requested by identity (the GetObjectById() method) 
            will be loaded lazily or eagerly. With lazy loading (the default) the object (unless it is already in the cache) will
            be instantiated and its identity properties will be filled but no call to the database to load the rest of the
            values or verify that the identity exists will be made. Only as any of the (non-identity) properties of the object
            is accessed will the call be made to the database and the rest of the object will become loaded.</remarks>
            <value>The load behavior.</value>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.Conflicts">
            <summary>
            Returns a clone of the list with any unresolved conflict that have resulted from a merge between cached values and fresh values from the data source.
            </summary>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.UnclonedConflicts">
            <summary>
            Returns a list with any unresolved conflict that have resulted from a merge between cached values and fresh values from the data source. This list can't be iterated over resolving the conflicts since resolving a conflict tries to remove it from the list. For this please use the Conflicts property instead.
            </summary>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.LoadedInLatestQuery">
            <summary>
            Contains all objects (as both keys and values) that were loaded during the latest query fetch operation (for both npath and sql queries)
            </summary>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.Exceptions">
            <summary>
            Contains all the exceptions that were thrown during the latest commit operation
            </summary>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.ReadConsistency">
            <summary>
            Specifies the read consistency mode. Default means Optimistic.
            </summary>
            <remarks>
            Pessimistic read consistency means a ReadConsistencyException will be thrown if: <br />
            1) An object is created or loaded outside of a transaction. <br />
            2) A property is loaded outside of the transaction that the object that the property belongs to was loaded in. <br />
            3) A property is loaded with a reference to an object that was loaded in another transaction than the transaction that 
            the object that the property belongs to was loaded in. <br />
            </remarks>
        </member>
        <member name="P:Puzzle.NPersist.Framework.IContext.WriteConsistency">
            <summary>
            Specifies the write consistency mode. Default means Optimistic.
            </summary>
            <remarks>
            With Optimistic write consistency, optimistic concurrency is used to enforce write consistency.
            With Pessimistic write concurrency, dirty objects may only be saved back to their data source within the same transaction that they were loaded. 
            Pessimistic write consistency means a WriteConsistencyException will be thrown if: <br />
            1) An object is created or loaded outside of a transaction. <br />
            2) A property is written to outside of the transaction that the object that the property belongs to was loaded or created in. <br />
            3) A property is written to with a reference to an object that was loaded or created in another transaction than the transaction that 
            the object that the property belongs to was loaded or created in. <br />
            4) An object is inserted, updated or removed from the data source in another transaction than
            the object that the property belongs to was loaded or created in. <br />
            </remarks>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Interfaces.ICloneHelper">
            <summary>
            Summary description for IInterceptable.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.NPersistCtorInterceptor">
            <summary>
            Summary description for NPersistCtorInterceptor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Validation.ObjectValidator">
            <summary>
            Summary description for ObjectValidator.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalReference">
            <summary>
            Summary description for MarshalReference.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Formatting.XmlFormatter">
            <summary>
            Summary description for NPersistXmlFormatter.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Formatting.IFormatter">
            <summary>
            Summary description for IFormatter.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlTableAliasReference">
            <summary>
            Summary description for SqlTableAliasReference.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlNullValue">
            <summary>
            Summary description for SqlNullValue.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlInPredicateItem">
            <summary>
            Summary description for SqlInPredicateItem.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlExpressionAlias">
            <summary>
            Summary description for SqlExpressionAlias.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.PersistenceEngineManager">
            <summary>
            Summary description for PersistenceEngineManager.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IPersistenceEngineManager">
            <summary>
            Summary description for IPersistenceEngineManager.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IPersistenceEngine">
            <summary>
            Summary description for IPersistenceEngine.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ObjectFactory">
            <summary>
            Summary description for ObjectFactory.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IObjectFactory">
            <summary>
            Summary description for IObjectFactory.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.IMethodMap">
            <summary>
            Summary description for IMethodMap.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.FieldNameStrategyType">
            <summary>
            Represents the standard strategies that can be used in order to convert property names into the names of the fields holding the property's value.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.FieldNameStrategyType.None">
            <summary>
            The name of the field is the same as the name of the property (but presumably prefixed)
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.FieldNameStrategyType.CamelCase">
            <summary>
            The name of the field is the same as the name of the property converted to camelCase. 
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.FieldNameStrategyType.PascalCase">
            <summary>
            The name of the field is the same as the name of the property converted to PascalCase. 
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.FieldNameStrategyType.LowerCase">
            <summary>
            The name of the field is the same as the name of the property converted to lowercase. 
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.FieldNameStrategyType.UpperCase">
            <summary>
            The name of the field is the same as the name of the property converted to UPPERCASE. 
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.CodeLanguage">
            <summary>
            Summary description for CodeLanguage.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Attributes.ClassMapAttribute">
            <summary>
            Summary description for ClassMapAttribute.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlSoundexFunction">
            <summary>
            Summary description for SqlMaxFunction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlFunction">
            <summary>
            Summary description for SqlFunction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlSearchCondition">
            <summary>
            Summary description for SqlSearchCondition.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlColumnAliasReference">
            <summary>
            Summary description for SqlColumnAliasReference.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlAvgFunction">
            <summary>
            Summary description for SqlAvgFunction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ObjectCache">
            <summary>
            Summary description for ObjectCache.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IObjectCache">
            <summary>
            Summary description for IObjectCache.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.Visitor.IMapVisitor">
            <summary>
            Summary description for IMapVisitor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.ValidationMode">
            <summary>
            The mode of validation.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ValidationMode.Default">
            <summary>
            Inherits ValidationMode from the ValidationMode holder above. 
            </summary>
            <remarks>
            A propertyMap inherits from its classMap, that inherits from its DomainMap, which inherits from the Context. 
            If the Context has ValidationMode.Default, this translates to ValidationMode.ValidateLoaded.
            </remarks>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ValidationMode.ValidateLoaded">
            <summary>
            Validates all Loaded properties (including all Dirty properties).
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ValidationMode.ValidateDirty">
            <summary>
            Validates only Dirty properties.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ValidationMode.ValidateAll">
            <summary>
            Validates all Loaded, Dirty and NotLoaded properties (forces loading of NotLoaded properties for validation)
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ValidationMode.Off">
            <summary>
            No validation
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.PropertyStatus">
            <summary>
            Represents the status of a property.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PropertyStatus.NotLoaded">
            <summary>
            The property has not yet been loaded with a value from the data source.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PropertyStatus.Dirty">
            <summary>
            The property value has been modified but the changed value has not yet been saved to the data source.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PropertyStatus.Clean">
            <summary>
            The property has been loaded with a value from the data source. If the value has been modified it has also been saved back to the data source.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PropertyStatus.Deleted">
            <summary>
            The property belongs to a deleted object.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.PersistenceType">
            <summary>
            Represents the different object persistence strategies supported by NPersist.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PersistenceType.Default">
            <summary>
            Default resolves to ObjectRelational.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PersistenceType.ObjectRelational">
            <summary>
            Object/Relational Mapping, persistence to relational database.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PersistenceType.ObjectDocument">
            <summary>
            Object/Document Mapping, persistence to xml documents on disk.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PersistenceType.ObjectService">
            <summary>
            Objectt/Service Mapping, persistence to Web Services.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PersistenceType.ObjectObject">
            <summary>
            Object/Object Mapping, persistence to object graph
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PersistenceType.Transient">
            <summary>
            Transient, no persistence
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Attributes.PropertyMapAttribute">
            <summary>
            Summary description for PropertyMapAttribute.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Attributes.DomainMapAttribute">
            <summary>
            Summary description for DomainMapAttribute.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.IRemotingServer">
            <summary>
            Summary description for IRemotingServer.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.IRemotingEngine">
            <summary>
            Summary description for IRemotingEngine.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalRequest">
            <summary>
            Summary description for MarshalRequest.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.IMarshalingSerializer">
            <summary>
            Summary description for IMarshalingSerializer.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Visitor.SqlSqlServerVisitor">
            <summary>
            Summary description for SqlSqlServerVisitor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlCompareOperatorType">
            <summary>
            Summary description for SqlCompareOperatorType.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.CachedListUpdate">
            <summary>
            Summary description for CachedListUpdate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.DefaultObjectCacheManager">
            <summary>
            Summary description for ObjectCacheManager.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IObjectCacheManager">
            <summary>
            Summary description for IObjectCacheManger.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.InverseManager">
            <summary>
            Summary description for InverseManagerBase.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Persistence.IdentityMap.UpdateIdentity(System.Object,System.String)">
            <summary>
            This method assumes that the previous identity was a temporary, 
            GUID id assigned before the id was set up
            </summary>
            <param name="obj"></param>
            <param name="previousIdentity"></param>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Exceptions.UnresolvedConflictsException">
            <summary>
            Summary description for UnresolvedConflictsException.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.#ctor(Puzzle.NPersist.Framework.IContext,System.String)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.GetMap(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.BeginGetMap(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.EndGetMap(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.LoadObject(System.String,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.BeginLoadObject(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.EndLoadObject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.LoadObjectByKey(System.String,System.String,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.BeginLoadObjectByKey(System.String,System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.EndLoadObjectByKey(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.CommitUnitOfWork(System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.BeginCommitUnitOfWork(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.EndCommitUnitOfWork(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.LoadProperty(System.String,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.BeginLoadProperty(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.EndLoadProperty(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.LoadObjects(System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.BeginLoadObjects(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy.RemotingService.EndLoadObjects(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlWhereClauseItem">
            <summary>
            Summary description for SqlWhereClauseItem.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlSelectStatement">
            <summary>
            Summary description for SqlSelectStatement.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlDefaultAliasGenerator">
            <summary>
            Summary description for SqlDefaultAliasGenerator.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.ISqlAliasGenerator">
            <summary>
            Summary description for ISqlAliasGenerator.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlAllPredicate">
            <summary>
            Summary description for SqlAllPredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.NPath.Sql.FromTable">
            <summary>
            Summary description for FromTable.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.SqlStatementAndDbParameters">
            <summary>
            Summary description for SqlStatementAndDbParameter.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.InverseAction">
            <summary>
            Summary description for InverseAction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ObjectCloner">
            <summary>
            Summary description for ObjectCloner.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.CodeMap">
            <summary>
            Summary description for CodeMap.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.ICodeMap">
            <summary>
            Summary description for ICodeMap.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.PropertySpecialBehaviorType">
            <summary>
            Represents special behaviors applicable to properties and executed during inserts and/or updates.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PropertySpecialBehaviorType.None">
            <summary>
            No special behavior is applied.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PropertySpecialBehaviorType.Increase">
            <summary>
            The property value is increased by one (applies only to numeric properties).
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.PropertySpecialBehaviorType.SetDateTime">
            <summary>
            The property value is set to the current date and time (applies only to DateTime properties).
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.ObserverTarget">
            <summary>
            Represents the types of targets an observer can be set up to observe
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObserverTarget.All">
            <summary>
            Observes both context and object events
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObserverTarget.Context">
            <summary>
            Observes only context events.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObserverTarget.Objects">
            <summary>
            Observes only object events.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.DocClassMapMode">
            <summary>
            This enumeration is used in xml persistence and determines the document partitioning strategy when objects of a class are stored to disk.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DocClassMapMode.Default">
            <summary>
            The strategy will be inherited, and finally PerDomain.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DocClassMapMode.PerDomain">
            <summary>
            Saves all objects from the domain into one big document.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DocClassMapMode.PerClass">
            <summary>
            Creates a separate document per class where all objects of the class are stored.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DocClassMapMode.PerObject">
            <summary>
            Each object gets its own document.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DocClassMapMode.None">
            <summary>
            Xml persistence is turned off.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.DatabindingAspect">
            <summary>
            Summary description for NPersistAspect.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.IMarshalingClient">
            <summary>
            Summary description for IMarshalingClient.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlSumFunction">
            <summary>
            Summary description for SqlMaxFunction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlNumericLiteral">
            <summary>
            Summary description for SqlNumericLiteral.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlMinFunction">
            <summary>
            Summary description for SqlMinFunction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlFreeTextPredicate">
            <summary>
            Summary description for SqlFreeTextPredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlDeleteStatement">
            <summary>
            Summary description for SqlDeleteStatement.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.InverseActionType">
            <summary>
            Summary description for InverseActionType.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.EnumValueMap">
            <summary>
            Summary description for EnumValueMap.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.IEnumValueMap">
            <summary>
            Summary description for IEnumValueMap.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.ReferenceType">
            <summary>
            Represents the basic relationship types.
            </summary>
            <remarks>
            The left side of the relationship name represents the property being described. This is the opposite of how NHibernate names relationships.
            For example, with a relationship between orders and orderlines, the Order.OrderLines list property would be considered in NPersist to be 
            marked as "ManyToOne" since the left part of the relationship name (the "Many" in "ManyToOne") refers to the property in question. Conversely,
            the OrderLine.Order reference property is considered "OneToMany". NHibernate uses the right part of the relationship name to describe the 
            property to which it is applied. 
            </remarks>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ReferenceType.None">
            <summary>
            No relationship.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ReferenceType.OneToOne">
            <summary>
            One-to-one relationship.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ReferenceType.OneToMany">
            <summary>
            One-to-many relationship. 
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ReferenceType.ManyToOne">
            <summary>
            Many-to-one relationship.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ReferenceType.ManyToMany">
            <summary>
            Many-to-many relationship.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.PropertySetPointcut">
            <summary>
            Summary description for NPersistPropertyPointcut.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.AopObjectFactory">
            <summary>
            Summary description for ObjectFactory.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.DomainMapStripper">
            <summary>
            Summary description for DomainMapStripper.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalResponse">
            <summary>
            Summary description for MarshalResponse.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalParameter">
            <summary>
            Summary description for MarshalParameter.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlHavingClause">
            <summary>
            Summary description for SqlHavingClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlAliasTableSource">
            <summary>
            Summary description for SqlAliasTableSource.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlAliasSelectListItem">
            <summary>
            Summary description for SqlAliasSelectListItem.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.Visitor.MapVerificationVisitor">
            <summary>
            Summary description for MapVerificationVisitor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.Transformation.ModelToCodeTransformer">
            <summary>
            Summary description for ModelToCodeTransformer.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyMode">
            <summary>
            Represents the available modes for optimistic concurrency to work in.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyMode.Default">
            <summary>
            The value is inherited, finally resolves to Late
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyMode.Late">
            <summary>
            Optimistic concurrency checks are performed as late as possible, meaning that they only take place during commit operations.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyMode.Early">
            <summary>
            Optimistic concurrency checks are performed as early as possible, meaning that when an object is refreshed any conflicts
            that are detected between a cached value and a fresh value from the database will result in an exception being thrown.
            Checks are also performed during commit, as with the Late setting.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyMode.Disabled">
            <summary>
            Optimistic concurrency checks are not performed. 
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.NPersistProxyMixin">
            <summary>
            Summary description for NPersistProxyMixin.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalObjectList">
            <summary>
            Summary description for MarshalObjectList.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Visitor.SqlOracleVisitor">
            <summary>
            Summary description for SqlOracleVisitor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlTable">
            <summary>
            Summary description for SqlTable.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlMaxFunction">
            <summary>
            Summary description for SqlMaxFunction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlGroupByClause">
            <summary>
            Summary description for SqlGroupByClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlDistinctFunction">
            <summary>
            Summary description for SqlCountFunction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlDateTimeLiteral">
            <summary>
            Summary description for SqlDateTimeLiteral.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.SerializedReference">
            <summary>
            Summary description for SerializedReference.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IObjectClone">
            <summary>
            Summary description for IObjectClone.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.BaseClasses.Interceptor">
            <summary>
            Summary description for Interceptor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Interfaces.IInterceptor">
            <summary>
            Summary description for IInterceptor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.DocPropertyMapMode">
            <summary>
            This enumeration is used in xml persistence and determines the document partitioning strategy when reference properties of an object are stored to disk.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DocPropertyMapMode.Default">
            <summary>
            The value is inherited. Finally ByReference.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DocPropertyMapMode.Inline">
            <summary>
            The referenced object is saved in the same document as the referring object, nested inside the referring object's xml.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DocPropertyMapMode.ByReference">
            <summary>
            The referenced object will not be stored as a nested part of the referring object's xml, only a reference will be. 
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalUol">
            <summary>
            Summary description for MarshalUol.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlExpressionAliasReference">
            <summary>
            Summary description for SqlExpressionAliasReference.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyBehaviorType">
            <summary>
            Represents the different strategies for determining if a property should be considered part of the optimistic concurrency check.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyBehaviorType.DefaultBehavior">
            <summary>
            Inherits the value, finally resolves to IncludeWhenDirty for update operations and IncludeWhenLoaded for delete operations.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyBehaviorType.IncludeWhenDirty">
            <summary>
            The property is only part of the optimistic concurrency check if it is dirty (modified but not saved).
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyBehaviorType.IncludeWhenLoaded">
            <summary>
            The property is always part of the optimistic concurrency check as long as it has been loaded. 
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.OptimisticConcurrencyBehaviorType.Disabled">
            <summary>
            The property is not part of the optimistic concurrency check.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlTableAlias">
            <summary>
            Summary description for SqlTableAlias.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlInPredicate">
            <summary>
            Summary description for SqlInPredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlComparePredicate">
            <summary>
            Summary description for SqlComparePredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlCompareOperator">
            <summary>
            Summary description for SqlCompareOperator.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlBetweenPredicate">
            <summary>
            Summary description for SqlBetweenPredicate.
            </summary>
        </member>
        <member name="P:Puzzle.NPersist.Framework.Persistence.IPersistenceManager.ListCountLoadBehavior">
            <summary>
            Specifies the load behavior for the Count property of list properties. 
            Eager means subselects will be added to sql queries for eagerly fetching the count of load properties. 
            Lazy means no subselects will be included and the Count property can only be read as a consequence of the list property becoming fully loaded.
            Default is Eager.
            </summary>
            <remarks>
            With Eager list count load behavior, the inverse manager is able to resolve list properties intelligently, 
            so that it knows (by comparing to the eagerly loaded count value) when a list has been completely filled 
            with inverse references and can be regarded as fully loaded (transitioning from NotLoaded to Clean)
            </remarks>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ReadOnlyClone">
            <summary>
            Summary description for ReadOnlyClone.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DeadlockStrategy.Default">
            <summary>
            The default deadlock strategy. Translates to None.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DeadlockStrategy.None">
            <summary>
            No deadlock strategy is used.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DeadlockStrategy.TouchTablesInOrder">
            <summary>
            The tables are given an order so committing a unit of work begins by touching the relevant tables in this order.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.DeadlockStrategy.TouchLockTable">
            <summary>
            A table is choosen as the lock table so committing a unit of work begins by touching the lock table.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.AccessibilityType">
            <summary>
            This enumeration is used to represent accessibility of properties and fields in the domain map.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Delegates.BegunTransactionEventHandler">
            <summary>
            Summary description for EventDelegates.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Interfaces.IContextFactory">
            <summary>
            Summary description for IContextFactory.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.EntityAspect">
            <summary>
            Summary description for NPersistAspect.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlUpdateClause">
            <summary>
            Summary description for SqlUpdateClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlLikePredicate">
            <summary>
            Summary description for SqlLikePredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlDeleteClause">
            <summary>
            Summary description for SqlDeleteClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Querying.IQueryParameter">
            <summary>
            Summary description for IQueryParameter.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.BatchedSqlStatement">
            <summary>
            Summary description for BatchedSqlStatement.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IReadOnlyObjectCacheManager">
            <summary>
            Summary description for IReadOnlyObjectCacheManager.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.IParameterMap">
            <summary>
            Summary description for IParameterMap.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Interfaces.IListInterceptor">
            <summary>
            Summary description for IListInterceptor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.TimeToLiveBehavior">
            <summary>
            Summary description for TimeToLiveBehavior.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.ObjectStatus">
            <summary>
            Represents the status of a persistent domain object.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObjectStatus.NotLoaded">
            <summary>
            The object has not been loaded with values from the data source yet.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObjectStatus.UpForCreation">
            <summary>
            The object is newly created and has not been inserted into the data source yet. It will be inserted into the data source during the next call to the Commit() method on the context.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObjectStatus.UpForDeletion">
            <summary>
            The object has been marked as deleted but has not been removed from the data source yet. It will be removed from the data source during the next call to the Commit() method on the context.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObjectStatus.Dirty">
            <summary>
            The object has been modified but the changes have not been saved to the data source yet. The changes will be saved to the data source during the next call to the Commit() method on the context.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObjectStatus.Clean">
            <summary>
            The object has been loaded with values from the database, and if it has been changed, all changes have been saved to the database.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObjectStatus.Deleted">
            <summary>
            The object has been deleted from the data source.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ObjectStatus.NotRegistered">
            <summary>
            The object is not yet registered with any context and does not have any "real" object status.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.ExecutionMode">
            <summary>
            Represents different modes that the SqlExecutor can work under.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ExecutionMode.DirectExecution">
            <summary>
            All sql statements are passed to the database as soon as requested by the framework.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ExecutionMode.BatchExecution">
            <summary>
            All select statements are passed directly but insert, update and delete statements are put in a queue. 
            </summary>
            <remarks>
            As soon as a select statement is issued or the transaction commits, 
            all queued statements are sent in a batch, potentially reducing the number of messages over the network.
            </remarks>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ExecutionMode.NoWriteExecution">
            <summary>
            Sometimes useful in testing, this setting lets through all select statements but simply ignores all insert, update and delete stataments.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ExecutionMode.NoExecution">
            <summary>
            No sql statements are sent to the database.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.BaseClasses.ContextFactory">
            <summary>
            Summary description for ContextFactory.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.NPersistEntityCtorPointcut">
            <summary>
            Summary description for NPersistCtorPointcut.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.RemotingEngineBase">
            <summary>
            Summary description for RemotingEngineBase.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalUnitOfWork">
            <summary>
            Summary description for MarshalUnitOfWork.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalQuery">
            <summary>
            Summary description for MarshalQuery.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlOrderByItem">
            <summary>
            Summary description for SqlOrderByItem.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlIsNullPredicate">
            <summary>
            Summary description for SqlIsNullPredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlIntoClause">
            <summary>
            Summary description for SqlIntoClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.NPath.Sql.TableJoin">
            <summary>
            Summary description for TableJoin.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.NPath.Sql.JoinTree">
            <summary>
            Summary description for JoinTree.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.IListManager">
            <summary>
            Summary description for IListManager.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.DocumentPersistenceEngine">
            <summary>
            Summary description for ObjectPersistenceEngine.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.CachedXmlDocument">
            <summary>
            Summary description for CachedXmlDocument.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Mapping.IClassMap.GetSortedIdentityPropertyMaps(System.Boolean@,System.Boolean)">
            <summary>
            This method is primarily exposed for the Verifier visitors
            </summary>
            <param name="failedSorting">Returns true if the identity propertymaps could not be sorted</param>
            <param name="getInherited">Indicates if inherited identityproperties should be included in the result</param>
            <returns>A list of the identity properties for the class, sorted by identity index</returns>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.UnloadBehavior">
            <summary>
            Summary description for UnloadBehavior.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType">
            <summary>
            Represents the available strategies for dealing with fresh data from the data source that differs from a cached version of the data. 
            </summary>
            <remarks>
            Refresh situations occur whenever you query the data source for data that is already in the cache. For example, if you begin by issuing
            an NPath query that brings up some employees and then issue another NPath query (via the same context/cache) bringing up some of the 
            same employees again, you have a refresh situation. When the first query was issued, the employees were filled with the values from the
            database. During the second query, the data for the same employees is brought from the database once more, meaning we could update the 
            cached employees and fill them with the most recent values from the database. Sometimes this is desirable, at other times it isn't.
            Sometimes just part of the objects should be updated while other parts have been modifed but not saved (they are "dirty") and in that
            case we usually don't want to loose our unsaved changes by having them automatically overwritten with the fresh database values.
            <br></br><br></br>
            By specifying the refresh behavior you can specify exactly the refresh strategies that suit your situation. 
            </remarks>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType.DefaultBehavior">
            <summary>
            The value is inherited, finally resolves to OverwriteNotLoaded.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType.OverwriteNotLoaded">
            <summary>
            Only properties that are not yet loaded may be updated with fresh values from the data source.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType.OverwriteLoaded">
            <summary>
            Unloaded properties and clean properties may be updated with fresh values from the data source.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType.OverwriteDirty">
            <summary>
            All properties (not loaded, clean and dirty) may be updated with fresh values from the data source.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType.ThrowConcurrencyException">
            <summary>
            Throw an exception whenever a fresh value from the database differs from a loaded value in the cache.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.RefreshBehaviorType.LogConcurrencyConflict">
            <summary>
            Logs a concurrency conflict whenever a fresh value from the database differs from a loaded value in the cache.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.LoggingMode">
            <summary>
            Represents the logging mode.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.BaseClasses.Interceptable">
            <summary>
            Base class that allows subclasses to hold a reference to an interceptor.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.BaseClasses.Interceptable.GetInterceptor">
            <summary>
            Gets the interceptor.
            </summary>
            <returns><c>IInterceptable</c></returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.BaseClasses.Interceptable.SetInterceptor(Puzzle.NPersist.Framework.Interfaces.IInterceptor)">
            <summary>
            Sets the interceptor.
            </summary>
            <param name="value">The new interceptor</param>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.AopProxyFactory">
            <summary>
            Summary description for AopProxyFactory.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlDatabase">
            <summary>
            Summary description for SqlDatabase.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.Visitor.MapInverseAppenderVisitor">
            <summary>
            Summary description for MapInverseAppenderVisitor.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.AutoIncreaserStrategy">
            <summary>
            The strategy to be used for columns marked as auto increasers.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalReferenceValue">
            <summary>
            Summary description for MarshalReferenceValue.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalingTransformer">
            <summary>
            Summary description for MarshalingTransformer.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.IMarshalingTransformer">
            <summary>
            Summary description for IMarshalingTransformer.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlStringLiteral">
            <summary>
            Summary description for SqlStringLiteral.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlMathOperatorType">
            <summary>
            Summary description for SqlCompareOperatorType.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlInsertStatement">
            <summary>
            Summary description for SqlInsertStatement.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlExpressionSelectListItem">
            <summary>
            Summary description for SqlExpressionSelectListItem.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlColumn">
            <summary>
            Summary description for SqlColumn.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlAllColumnsInTableSelectListItem">
            <summary>
            Summary description for SqlAllColumnsInTableSelectListItem.
            </summary>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Persistence.ReflectionHelper.FieldLookup(System.Type)">
            <summary>
            Fetches a FieldInfo lookup Hashtable for a specific Type
            </summary>
            <param name="type">The Type to get the lookup from</param>
            <returns>FieldInfo lookup Hashtable</returns>
        </member>
        <member name="M:Puzzle.NPersist.Framework.Persistence.ReflectionHelper.GetFieldInfo(Puzzle.NPersist.Framework.Mapping.IPropertyMap,System.Type,System.String)">
            <summary>
            Fetches a FieldInfo for a specific property in a given type
            </summary>
            <param name="propertyMap"></param>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ReadOnlyObjectCacheManager">
            <summary>
            Summary description for ReadOnlyObjectCacheManager.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ListManager">
            <summary>
            Summary description for ListManager.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.Notification">
            <summary>
            Represents the different available notification strategies.
            </summary>
            <remarks>
            Notification refers to the process in which the property getters and setters of domain objects send notification messages 
            to the Context object whenever the property is accessed. 
            </remarks>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.Notification.Full">
            <summary>
            Full notification. Messages are sent before and after properties are read and written to.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.Notification.LightWeight">
            <summary>
            Only the messages required for the NPersist object service features to work are sent.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.Notification.Disabled">
            <summary>
            No messages are sent and many of the NPersist object service features can not be supported.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.ClassType">
            <summary>
            Summary description for ClassType.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Aop.PropertyGetPointcut">
            <summary>
            Summary description for NPersistPropertyPointcut.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Utility.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.WebService.Client.WebServiceRemotingEngine">
            <summary>
            Summary description for WebServiceRemotingEngine.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalObject">
            <summary>
            Summary description for MarshalObject.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlInsertClause">
            <summary>
            Summary description for SqlInsertClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlFromClause">
            <summary>
            Summary description for SqlFromClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlExistsPredicate">
            <summary>
            Summary description for SqlExistsPredicate.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlCountFunction">
            <summary>
            Summary description for SqlCountFunction.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ObjectPersistenceEngine">
            <summary>
            Summary description for ObjectPersistenceEngine.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.InvalidationBehavior">
            <summary>
            Summary description for InvalidationBehavior.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.RemotingServer">
            <summary>
            Summary description for RemotingServer.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Remoting.Marshaling.MarshalProperty">
            <summary>
            Summary description for MarshalProperty.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlSelectClause">
            <summary>
            Summary description for SqlSelectClause.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlParameter">
            <summary>
            Summary description for SqlParameter.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlOldOuterJoin">
            <summary>
            Summary description for SqlOldOuterJoin.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlJoinType">
            <summary>
            Summary description for SqlJoinType.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Sql.Dom.SqlColumnAlias">
            <summary>
            Summary description for SqlColumnAlias.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Querying.QueryParameter">
            <summary>
            Summary description for DbParameter.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.SqlEngineOracle">
            <summary>
            Summary description for SqlEngineOracle.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ReadOnlyObjectCache">
            <summary>
            Summary description for ReadOnlyObjectCache.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Persistence.ObjectClone">
            <summary>
            Summary description for CloneObject.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Mapping.Transformation.ClassesToTablesTransformer">
            <summary>
            Summary description for ClassesToTablesTransformer.
            </summary>
        </member>
        <member name="T:Puzzle.NPersist.Framework.Enumerations.InheritanceType">
            <summary>
            Represents the strategy used for mapping a class inheritance hierarchy to tables in the database.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.InheritanceType.None">
            <summary>
            Inheritance is not in use
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.InheritanceType.SingleTableInheritance">
            <summary>
            All classes in the hierarchy are mapped to the same table.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.InheritanceType.ClassTableInheritance">
            <summary>
            Each class in the hierarchy gets its own table.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.InheritanceType.ConcreteTableInheritance">
            <summary>
            Only the concrete classes (and the root class) in the hierarchy get tables.
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ConflictResolution.UseCachedValue">
            <summary>
            Use the cached value
            </summary>
        </member>
        <member name="F:Puzzle.NPersist.Framework.Enumerations.ConflictResolution.UseFreshValue">
            <summary>
            Use the fresh value from the data source
            </summary>
        </member>
    </members>
</doc>
