using System.Collections;
using Puzzle.NPersist.Framework.EventArguments;
using Puzzle.NPersist.Framework.Interfaces;
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2032.
// 
namespace Puzzle.NPersist.Framework.Remoting.WebService.Client.RemotingWebServiceProxy 
{
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System;
	using System.Web.Services.Protocols;
	using System.ComponentModel;
	using System.Web.Services;
    using Puzzle.NCore.Framework.Logging;
    
    
	/// <remarks/>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name="RemotingServiceSoap", Namespace="http://www.npersist.com/remoting")]
	public class RemotingService : System.Web.Services.Protocols.SoapHttpClientProtocol, IContextChild 
	{
        
		/// <remarks/>
//		public RemotingService() 
//		{
//			this.Url = "";
//			//this.Url = "http://localhost/NPersistWebService/RemotingService.asmx";
//		}

		public RemotingService(IContext context, string url) : base()
		{
			this.context = context;
			this.Url = url;
			//this.Url = "http://localhost/NPersistWebService/RemotingService.asmx";
		}

		#region Property  Context
		
		private IContext context;
		
		public IContext Context
		{
			get { return this.context; }
			set { this.context = value; }
		}
		
		#endregion

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.npersist.com/remoting/GetMap", RequestNamespace="http://www.npersist.com/remoting", ResponseNamespace="http://www.npersist.com/remoting", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string GetMap(string domainKey, bool useCompression) 
		{
			Hashtable parameters = new Hashtable() ;
			if (this.Context != null)
			{
				WebServiceCancelEventArgs e = new WebServiceCancelEventArgs(this.Url, "GetMap", domainKey, useCompression, parameters);
				this.Context.EventManager.OnCallingWebService(this, e);
				if (e.Cancel)
				{
                    LogMessage message = new LogMessage("Calling web service canceled by observer!");
                    LogMessage verbose = new LogMessage( "Url: {0}" , this.Url);

					this.Context.LogManager.Warn(this,message,verbose); // do not localize
					return "";
				}
				domainKey = e.DomainKey;
				useCompression = e.UseCompression;				
			}
 
			object[] results = this.Invoke("GetMap", new object[] {
																	  domainKey,
																	  useCompression});

			if (this.Context != null)
			{
				parameters["result"] = results[0];

				WebServiceEventArgs e2 = new WebServiceEventArgs(this.Url, "GetMap", domainKey, useCompression, parameters);

				this.Context.EventManager.OnCalledWebService(this, e2);

				results[0] = parameters["result"];			
			}

			return ((string)(results[0]));
		}
        
		/// <remarks/>
		public System.IAsyncResult BeginGetMap(string domainKey, bool useCompression, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("GetMap", new object[] {
															   domainKey,
															   useCompression}, callback, asyncState);
		}
        
		/// <remarks/>
		public string EndGetMap(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}
        
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.npersist.com/remoting/LoadObject", RequestNamespace="http://www.npersist.com/remoting", ResponseNamespace="http://www.npersist.com/remoting", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string LoadObject(string type, string identity, string domainKey, bool useCompression) 
		{
			Hashtable parameters = new Hashtable() ;
			parameters["type"] = type;
			parameters["identity"] = identity;
			WebServiceCancelEventArgs e = new WebServiceCancelEventArgs(this.Url, "LoadObject", domainKey, useCompression, parameters);
			this.Context.EventManager.OnCallingWebService(this, e);
			if (e.Cancel)
			{
                LogMessage message = new LogMessage("Calling web service canceled by observer!");
                LogMessage verbose = new LogMessage("Url: {0}" , this.Url);
				this.Context.LogManager.Warn(this,message,verbose); // do not localize
				return "";
			}
			domainKey = e.DomainKey;
			useCompression = e.UseCompression;
			type = (string) parameters["type"];
			identity = (string) parameters["identity"];

			object[] results = this.Invoke("LoadObject", new object[] {
																		  type,
																		  identity,
																		  domainKey,
																		  useCompression});

			parameters["result"] = results[0];

			WebServiceEventArgs e2 = new WebServiceEventArgs(this.Url, "LoadObject", domainKey, useCompression, parameters);

			this.Context.EventManager.OnCalledWebService(this, e2);

			results[0] = parameters["result"];

			return ((string)(results[0]));
		}
        
		/// <remarks/>
		public System.IAsyncResult BeginLoadObject(string type, string identity, string domainKey, bool useCompression, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("LoadObject", new object[] {
																   type,
																   identity,
																   domainKey,
																   useCompression}, callback, asyncState);
		}
        
		/// <remarks/>
		public string EndLoadObject(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}
        
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.npersist.com/remoting/LoadObjectByKey", RequestNamespace="http://www.npersist.com/remoting", ResponseNamespace="http://www.npersist.com/remoting", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string LoadObjectByKey(string type, string keyPropertyName, string keyValue, string domainKey, bool useCompression) 
		{

			Hashtable parameters = new Hashtable() ;
			parameters["type"] = type;
			parameters["keyPropertyName"] = keyPropertyName;
			parameters["keyValue"] = keyValue;
			WebServiceCancelEventArgs e = new WebServiceCancelEventArgs(this.Url, "LoadObjectByKey", domainKey, useCompression, parameters);
			this.Context.EventManager.OnCallingWebService(this, e);
			if (e.Cancel)
			{
                LogMessage message = new LogMessage("Calling web service canceled by observer!");
                LogMessage verbose = new LogMessage("Url: {0}" , this.Url);
				this.Context.LogManager.Warn(this, message,verbose ); // do not localize
				return "";
			}
			domainKey = e.DomainKey;
			useCompression = e.UseCompression;
			type = (string) parameters["type"];
			keyPropertyName = (string) parameters["keyPropertyName"];
			keyValue = (string) parameters["keyValue"];


			object[] results = this.Invoke("LoadObjectByKey", new object[] {
																			   type,
																			   keyPropertyName,
																			   keyValue,
																			   domainKey,
																			   useCompression});
			parameters["result"] = results[0];

			WebServiceEventArgs e2 = new WebServiceEventArgs(this.Url, "LoadObjectByKey", domainKey, useCompression, parameters);

			this.Context.EventManager.OnCalledWebService(this, e2);

			results[0] = parameters["result"];

			return ((string)(results[0]));
		}
        
		/// <remarks/>
		public System.IAsyncResult BeginLoadObjectByKey(string type, string keyPropertyName, string keyValue, string domainKey, bool useCompression, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("LoadObjectByKey", new object[] {
																		type,
																		keyPropertyName,
																		keyValue,
																		domainKey,
																		useCompression}, callback, asyncState);
		}
        
		/// <remarks/>
		public string EndLoadObjectByKey(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}
        
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.npersist.com/remoting/CommitUnitOfWork", RequestNamespace="http://www.npersist.com/remoting", ResponseNamespace="http://www.npersist.com/remoting", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string CommitUnitOfWork(string obj, string domainKey, bool useCompression) 
		{
			Hashtable parameters = new Hashtable() ;
			parameters["obj"] = obj;
			WebServiceCancelEventArgs e = new WebServiceCancelEventArgs(this.Url, "CommitUnitOfWork", domainKey, useCompression, parameters);
			this.Context.EventManager.OnCallingWebService(this, e);
			if (e.Cancel)
			{
                LogMessage message = new LogMessage("Calling web service canceled by observer!");
                LogMessage verbose = new LogMessage("Url: {0}", this.Url);
                this.Context.LogManager.Warn(this, message, verbose); // do not localize
				return "";
			}
			domainKey = e.DomainKey;
			useCompression = e.UseCompression;
			obj = (string) parameters["obj"];

			object[] results = this.Invoke("CommitUnitOfWork", new object[] {
																				obj,
																				domainKey,
																				useCompression});

			parameters["result"] = results[0];

			WebServiceEventArgs e2 = new WebServiceEventArgs(this.Url, "CommitUnitOfWork", domainKey, useCompression, parameters);

			this.Context.EventManager.OnCalledWebService(this, e2);

			results[0] = parameters["result"];

			return ((string)(results[0]));
		}
        
		/// <remarks/>
		public System.IAsyncResult BeginCommitUnitOfWork(string obj, string domainKey, bool useCompression, System.AsyncCallback callback, object asyncState) 
		{

			return this.BeginInvoke("CommitUnitOfWork", new object[] {
																		 obj,
																		 domainKey,
																		 useCompression}, callback, asyncState);
		}
        
		/// <remarks/>
		public string EndCommitUnitOfWork(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}
        
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.npersist.com/remoting/LoadProperty", RequestNamespace="http://www.npersist.com/remoting", ResponseNamespace="http://www.npersist.com/remoting", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string LoadProperty(string obj, string propertyName, string domainKey, bool useCompression) 
		{

			
			Hashtable parameters = new Hashtable() ;
			parameters["obj"] = obj;
			parameters["propertyName"] = propertyName;
			WebServiceCancelEventArgs e = new WebServiceCancelEventArgs(this.Url, "LoadProperty", domainKey, useCompression, parameters);
			this.Context.EventManager.OnCallingWebService(this, e);
			if (e.Cancel)
			{
                LogMessage message = new LogMessage( "Calling web service canceled by observer!");
                LogMessage verbose = new LogMessage( "Url: {0}" , this.Url);
				this.Context.LogManager.Warn(this,message,verbose); // do not localize
				return "";
			}
			domainKey = e.DomainKey;
			useCompression = e.UseCompression;
			obj = (string) parameters["obj"];
			propertyName = (string) parameters["propertyName"];

			object[] results = this.Invoke("LoadProperty", new object[] {
																			obj,
																			propertyName,
																			domainKey,
																			useCompression});

			parameters["result"] = results[0];

			WebServiceEventArgs e2 = new WebServiceEventArgs(this.Url, "LoadProperty", domainKey, useCompression, parameters);

			this.Context.EventManager.OnCalledWebService(this, e2);

			results[0] = parameters["result"];

			return ((string)(results[0]));
		}
        
		/// <remarks/>
		public System.IAsyncResult BeginLoadProperty(string obj, string propertyName, string domainKey, bool useCompression, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("LoadProperty", new object[] {
																	 obj,
																	 propertyName,
																	 domainKey,
																	 useCompression}, callback, asyncState);
		}
        
		/// <remarks/>
		public string EndLoadProperty(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}
        
		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.npersist.com/remoting/LoadObjects", RequestNamespace="http://www.npersist.com/remoting", ResponseNamespace="http://www.npersist.com/remoting", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string LoadObjects(string query, string domainKey, bool useCompression) 
		{

			Hashtable parameters = new Hashtable() ;
			parameters["query"] = query;
			WebServiceCancelEventArgs e = new WebServiceCancelEventArgs(this.Url, "LoadObjects", domainKey, useCompression, parameters);
			this.Context.EventManager.OnCallingWebService(this, e);
			if (e.Cancel)
			{
                LogMessage message = new LogMessage("Calling web service canceled by observer!");
                LogMessage verbose = new LogMessage("Url: {0}", this.Url);
                this.Context.LogManager.Warn(this, message, verbose); // do not localize			
				return "";
			}
			domainKey = e.DomainKey;
			useCompression = e.UseCompression;
			query = (string) parameters["query"];

			object[] results = this.Invoke("LoadObjects", new object[] {
																		   query,
																		   domainKey,
																		   useCompression});

			parameters["result"] = results[0];

			WebServiceEventArgs e2 = new WebServiceEventArgs(this.Url, "LoadObjects", domainKey, useCompression, parameters);

			this.Context.EventManager.OnCalledWebService(this, e2);

			results[0] = parameters["result"];

			return ((string)(results[0]));
		}
        
		/// <remarks/>
		public System.IAsyncResult BeginLoadObjects(string query, string domainKey, bool useCompression, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("LoadObjects", new object[] {
																	query,
																	domainKey,
																	useCompression}, callback, asyncState);
		}
        
		/// <remarks/>
		public string EndLoadObjects(System.IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}
	}
}
