<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="../../build/NHibernate-3.0.1.GA-debug/bin/net-3.5/NHibernate.Test.dll" errors="199" failures="669" not-run="246" inconclusive="0" ignored="245" skipped="0" invalid="1">
  <environment nunit-version="2.5.5.10112" clr-version="2.0.50727.4952" os-version="Microsoft Windows NT 6.1.7600.0" platform="Win32NT" />
  <culture-info current-culture="en-GB" current-uiculture="en-US" />
  <test-suite type="Assembly" name="../../build/NHibernate-3.0.1.GA-debug/bin/net-3.5/NHibernate.Test.dll" executed="True" result="Failure" success="False" asserts="0">
    <results>
      <test-suite type="Namespace" name="NHibernate" executed="True" result="Failure" success="False" asserts="0">
        <results>
          <test-suite type="Namespace" name="Test" executed="True" result="Failure" success="False" asserts="0">
            <results>
              <test-suite type="Namespace" name="Ado" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BatcherFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.AbstractBatcherLog" description="Activating the AbstractBatcher's log the log stream:&#xD;&#xA;-should not contains batch info &#xD;&#xA;-should contain SQL log info only regarding batcher (SQL log should not be duplicated)&#xD;&#xA;-the batcher should work." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.AbstractBatcherLogFormattedSql" description="Activating the AbstractBatcher's log the log stream:&#xD;&#xA;-should contain well formatted SQL log info" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.BatchedoutputShouldBeFormatted" description="SqlClient: The batcher log output should be formatted" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.OneRoundTripDelete" description="The batcher should run all DELETE queries in only one roundtrip." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.OneRoundTripInserts" description="The batcher should run all INSERT queries in only one roundtrip." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.OneRoundTripUpdate" description="The batcher should run all UPDATE queries in only one roundtrip." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.SqlClientOneRoundTripForUpdateAndInsert" description="SqlClient: The batcher should run all different INSERT queries in only one roundtrip." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.SqlLog" description="Activating the SQL and turning off the batcher's log the log stream:&#xD;&#xA;-should not contains adding to batch&#xD;&#xA;-should contain batch command&#xD;&#xA;-the batcher should work." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.SqlLogShouldGetBatchCommandNotification" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Any" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AnyTypeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Any.AnyTypeTest.FlushProcessing" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="BulkManipulation" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="HqlBulkOperations" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.BulkManipulation.HqlBulkOperations.SimpleDelete" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSQLBulkOperations" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.BulkManipulation.NativeSQLBulkOperations.SimpleNativeSQLInsert" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Bytecode" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ActivatorObjectFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Bytecode.ActivatorObjectFactoryFixture.CreateInstanceDefCtor" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Bytecode.ActivatorObjectFactoryFixture.CreateInstanceOfValueType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Bytecode.ActivatorObjectFactoryFixture.CreateInstanceWithArguments" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Bytecode.ActivatorObjectFactoryFixture.CreateInstanceWithNoPublicCtor" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Lightweight" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BytecodeProviderFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.CantCreateProxyFactoryFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.CollectionTypeFactoryCantChangeAfterUsage" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.DoesNotImplementProxyFactoryFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.InvalidCollectionTypeFactoryCtor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.NotConfiguredCollectionTypeFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.NotConfiguredProxyFactoryFactory" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.SetCollectionTypeFactoryClassByName" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.SetCollectionTypeFactoryClassByType" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.UnableToLoadProxyFactoryFactory" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CacheTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CacheFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CacheTest.CacheFixture.MinValueTimestamp" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.CacheTest.CacheFixture.TestSimpleCache" executed="True" result="Success" success="True" asserts="24" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FilterKeyFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 80
Value
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 80
Value
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 80
Value]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.Equality" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in FilterKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.HashCode" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in FilterKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.NotEqualHashCode" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in FilterKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.NotEquality" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in FilterKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.ToStringIncludeAll" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in FilterKeyFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryCacheFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CacheTest.QueryCacheFixture.QueryCacheWithNullParameters" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryKeyFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 80
Value
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 80
Value
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 80
Value]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.EqualityWithFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in QueryKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.HashCodeWithFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in QueryKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.NotEqualHashCodeWithFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in QueryKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.NotEqualityWithFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in QueryKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.ToStringWithFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in QueryKeyFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.ToStringWithMoreFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in QueryKeyFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimestamperFixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Cascade" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Circle" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CascadeMergeToChildBeforeParentTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Cascade.Circle.CascadeMergeToChildBeforeParentTest.Merge" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Cascade.Circle.CascadeMergeToChildBeforeParentTest.MergeData3Nodes" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Cascade.Circle.CascadeMergeToChildBeforeParentTest.MergeTransientChildBeforeTransientParent" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MultiPathCircleCascadeTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeDeliveryNode" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeEntityWithNonNullableEntityNull" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeEntityWithNonNullableTransientEntity" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergePickupNode" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeRoute" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeTour" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeTransport" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultiPathCascadeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathGetAndModify" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeModifiedDetached" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeModifiedDetachedIntoProxy" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeNonCascadedTransientEntityInCollection" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeNonCascadedTransientEntityInManyToOne" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeNonCascadedTransientEntityInOneToOne" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathUpdateModifiedDetached" executed="True" result="Success" success="True" asserts="15" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RefreshFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Cascade.RefreshFixture.RefreshCascade" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Cascade.Job#3][SQL: INSERT INTO T_JOB (BATCH_ID, JOB_STATUS, PI, JOB_ID) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Cascade.RefreshFixture.RefreshIgnoringTransient" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Cascade.RefreshFixture.RefreshIgnoringTransientInCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Cascade.RefreshFixture.RefreshNotIgnoringTransientByUnsavedValue" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CfgTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AccessorsSerializableTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="AllAccessorsAreMarkedAsSerializable" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.BackrefPropertyAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.BasicPropertyAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.ChainedPropertyAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.EmbeddedPropertyAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.FieldAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.IndexPropertyAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.MapAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.NoopAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.NoSetterAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.ReadOnlyAccessor)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor)" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="AllGettersAreMarkedAsSerializable" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.BackrefPropertyAccessor+BackrefGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.BasicPropertyAccessor+BasicGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.EmbeddedPropertyAccessor+EmbeddedGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.FieldAccessor+FieldGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.IndexPropertyAccessor+IndexGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.MapAccessor+MapGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.NoopAccessor+NoopGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+XmlGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+AttributeGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+ElementAttributeGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+ElementGetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+TextGetter)" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="AllSettersAreMarkedAsSerializable" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.BackrefPropertyAccessor+BackrefSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.BasicPropertyAccessor+BasicSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.EmbeddedPropertyAccessor+EmbeddedSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.FieldAccessor+FieldSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.IndexPropertyAccessor+IndexSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.MapAccessor+MapSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.NoopAccessor+NoopSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.ReadOnlyAccessor+NoopSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+XmlSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+AttributeSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+ElementAttributeSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+ElementSetter)" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+TextSetter)" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigurationAddMappingEvents" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationAddMappingEvents.WhenSubscribedToAfterBindThenRaiseEventForEachMapping" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationAddMappingEvents.WhenSubscribedToBeforeBindThenRaiseEventForEachMapping" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigurationFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.AddDocument" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.CacheConfiguration" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.CacheConfigurationForUnmappedClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.CacheConfigurationForUnmappedCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.DisabledProxyValidator" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.EmptyPropertyTag" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.InvalidXmlInCfgFile" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.InvalidXmlInHbmFile" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.NH1334" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.NH1348" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.NoSessionFactoriesInConfiguration" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.PersisterWithDefaultNamespaceAndAssembly" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.ProxyValidator" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.ProxyWithDefaultNamespaceAndAssembly" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.ReadCfgXmlFromAssembly" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.ReadCfgXmlFromDefaultFile" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.SetDefaultAssemblyAndNamespace" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigurationSchemaFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.ClassesCache" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.CollectionsCache" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.EmptyFactoryNotAllowed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.Events" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.FactoryName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.FromAppConfigTest" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.IgnoreSystemOutOfAppConfig" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.InvalidConfig" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.Listeners" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.MappingEquatable" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.Mappings" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.NotAllowedMappings" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.Properties" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigurationSerializationTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSerializationTests.Basic_CRUD_should_work" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSerializationTests.Configuration_should_be_serializable" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CustomBytecodeProviderTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.CustomBytecodeProviderTest.WhenInvalidThenThrow" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.CustomBytecodeProviderTest.WhenNoDefaultCtorThenThrow" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.CustomBytecodeProviderTest.WhenNoShortCutUsedThenCanBuildBytecodeProvider" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.CustomBytecodeProviderTest.WhenNoShortCutUsedThenCanBuildInstanceOfConfiguredBytecodeProvider" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DefaultNsAssmFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.DefaultNsAssmFixture.BottomUpJoined" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.DefaultNsAssmFixture.MixedJoined" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.DefaultNsAssmFixture.MixedSubclass" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.DefaultNsAssmFixture.TopDownJoined" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EntityCacheUsageParserFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.EntityCacheUsageParserFixture.CovertToString" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.CfgTest.EntityCacheUsageParserFixture.Parse" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HbmOrderingFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.HbmOrderingFixture.BottomUpJoined" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.HbmOrderingFixture.MixedJoined" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.HbmOrderingFixture.MixedSubclass" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.HbmOrderingFixture.TopDownJoined" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Loquacious" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ConfigurationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.ConfigurationFixture.CompleteConfiguration" executed="True" result="Success" success="True" asserts="28" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.ConfigurationFixture.UseConnectionStringName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.ConfigurationFixture.UseDbConfigurationStringBuilder" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EntityCacheConfigurationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.EntityCacheConfigurationFixture.ConfigureCacheOfClass" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.EntityCacheConfigurationFixture.ConfigureCacheOfCollection" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.EntityCacheConfigurationFixture.ConfigureCacheOfCollectionWithOutEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.EntityCacheConfigurationFixture.NotAllowRelatedCollections" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LambdaConfigurationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.LambdaConfigurationFixture.FullConfiguration" executed="True" result="Success" success="True" asserts="28" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TypeDefinitionFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.TypeDefinitionFixture.AddTypeDef" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MappingDocumentAggregatorTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.MappingDocumentAggregatorTests.CanAddDomainModelAssembly" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.MappingDocumentAggregatorTests.CanSerializeAndDeserializeDomainModelAssembly" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.MappingDocumentAggregatorTests.CompareDeserializationTimes" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MappingDocumentParserTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.MappingDocumentParserTests.CanDeserializeHBM" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SchemaAutoActionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.SchemaAutoActionFixture.Equality" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SettingsFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.SettingsFactoryFixture.DefaultValueForKeyWords" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Classic" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LifecycleFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Classic.LifecycleFixture.Delete" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Classic.LifecycleFixture.Save" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Classic.LifecycleFixture.SaveOrUpdateCopy" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Classic.LifecycleFixture.Update" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ValidatableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Classic.ValidatableFixture.Delete" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Classic.ValidatableFixture.Save" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Classic.ValidatableFixture.SaveOrUpdateCopy" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Classic.ValidatableFixture.Update" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CollectionTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="IdBagFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CollectionTest.IdBagFixture.Simple" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.Test.CollectionTest.A.Items#1][SQL: INSERT INTO Items (a_id, item_id, id) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullableValueTypeElementMapFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 75
Value
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 75
Value
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 75
Value]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.CollectionTest.NullableValueTypeElementMapFixture.AddRemoveUntypedElements" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in NullableValueTypeElementMapFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CollectionTest.NullableValueTypeElementMapFixture.ShouldAddAndRemoveNullElements" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in NullableValueTypeElementMapFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CollectionTest.NullableValueTypeElementMapFixture.ShouldOverwriteElementValueWithNull" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in NullableValueTypeElementMapFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CollectionTest.NullableValueTypeElementMapFixture.ShouldOverwriteNullElementWithValue" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in NullableValueTypeElementMapFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Component" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Basic" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ComponentTest" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestComponent" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.Component.Basic.User#gavin][SQL: SELECT user0_.UserName as UserName76_0_, user0_.LastModified as LastModi2_76_0_, user0_.Password as Password76_0_, user0_.Name as Name76_0_, user0_.Dob as Dob76_0_, user0_.Address as Address76_0_, user0_.PreviousAddress as Previous7_76_0_, user0_.address as address76_0_, year(user0_.dob) as formula0_0_ FROM T_USER user0_ WHERE user0_.UserName=?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 273
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 273
year
TearDown : NHibernate.Exceptions.GenericADOException : could not execute query
[ select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ ]
[SQL: select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestComponentFormulaQuery" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ where year(user0_.dob)=1999 ]
[SQL: select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ where year(user0_.dob)=1999]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
TearDown : NHibernate.Exceptions.GenericADOException : could not execute query
[ select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ ]
[SQL: select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestComponentQueries" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Ported from Hibernate - failing in NH]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestComponentStateChangeAndDirtiness" executed="True" result="Error" success="False" asserts="2">
                            <failure>
                              <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not execute query
[ select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ ]
[SQL: select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestCustomColumnReadAndWrite" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Ported from Hibernate. Read properties not supported in NH yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestMergeComponent" executed="True" result="Error" success="False" asserts="11">
                            <failure>
                              <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not execute query
[ select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ ]
[SQL: select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestNamedQuery" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ where user0_.Name in (@p0 , @p1 , @p2) or user0_.UserName in (@p0 , @p1 , @p2) ]
  Name:nameList_0_ - Value:1ovthafew  Name:nameList_1_ - Value:turin  Name:nameList_2_ - Value:xam
[SQL: select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ where user0_.Name in (@p0 , @p1 , @p2) or user0_.UserName in (@p0 , @p1 , @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
TearDown : NHibernate.Exceptions.GenericADOException : could not execute query
[ select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ ]
[SQL: select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestUpdateFalse" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Component.Basic.User#gavin][SQL: INSERT INTO T_USER (LastModified, Password, Name, Dob, Address, UserName) VALUES (?, ?, ?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : violation of PRIMARY or UNIQUE KEY constraint "INTEG_110" on table "T_USER"
  ----> FirebirdSql.Data.Common.IscException : violation of PRIMARY or UNIQUE KEY constraint "INTEG_110" on table "T_USER"
TearDown : NHibernate.Exceptions.GenericADOException : could not execute query
[ select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_ ]
[SQL: select user0_.UserName as UserName76_, user0_.LastModified as LastModi2_76_, user0_.Password as Password76_, user0_.Name as Name76_, user0_.Dob as Dob76_, user0_.Address as Address76_, user0_.PreviousAddress as Previous7_76_, user0_.address as address76_, year(user0_.dob) as formula0_ from T_USER user0_]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 257
year]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CompositeId" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ClassWithCompositeIdFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.CompositeId.ClassWithCompositeIdFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.CompositeId.ClassWithCompositeIdFixture.Criteria" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.CompositeId.ClassWithCompositeIdFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.CompositeId.ClassWithCompositeIdFixture.Hql" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.CompositeId.ClassWithCompositeIdFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.CompositeId.ClassWithCompositeIdFixture.TestSimpleCRUD" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.CompositeId.ClassWithCompositeIdFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CompositeIdFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.CompositeId.CompositeIdFixture.CompositeIds" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CompositeIdFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CompositeId.CompositeIdFixture.MultipleCollectionFetch" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CompositeIdFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CompositeId.CompositeIdFixture.NonLazyFetch" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CompositeIdFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.CompositeId.CompositeIdFixture.Query" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CompositeIdFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ConnectionStringTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="NamedConnectionStringFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ConnectionStringTest.NamedConnectionStringFixture.CanGetNamedConnectionStringFromConfiguration" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ConnectionStringTest.NamedConnectionStringFixture.ConnectionStringInSettingsOverrideNamedConnectionSTring" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ConnectionStringTest.NamedConnectionStringFixture.InvalidNamedConnectedStringThrows" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ConnectionTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AggressiveReleaseTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.ConnectionMaintanenceDuringFlush" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.QueryIteration" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.SerializationFailsOnAfterStatementAggressiveReleaseWithOpenResources" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.SerializationOnAfterStatementAggressiveRelease" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.SuppliedConnection" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThreadLocalCurrentSessionTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not yet supported. Need AutoClosed feature.(TransactionContext)]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.ConnectionTest.ThreadLocalCurrentSessionTest.ContextCleanup" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not yet supported. Need AutoClosed feature.(TransactionContext)]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ConnectionTest.ThreadLocalCurrentSessionTest.TransactionProtection" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not yet supported. Need AutoClosed feature.(TransactionContext)]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConventionsTestCase" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.ConventionsTestCase.NHibernate_should_be_cls_compliant" executed="True" result="Success" success="True" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Criteria" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CriteriaQueryTest" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.AliasJoinCriterion" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.AllowToSetLimitOnSubqueries" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CacheDetachedCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ClassProperty" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningCriteria_AddCount_RemoveOrdering" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningDetachedCriteriaTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningProjectedId" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningProjectionsTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningProjectionsUsingProperty" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningSubcriteriaJoinTypes" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CriteriaInspection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.DetachedCriteriaInspection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.DetachedCriteriaTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.DistinctProjectionsOfComponents" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.EscapeCharacter" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.GroupByComponent" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.InsensitiveLikeProjectionUsingRestrictionsTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.LikeProjectionTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.LikeProjectionUsingRestrictionsTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.NH_1155_ShouldNotLoadAllChildrenInPagedSubSelect" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.OrderProjectionAliasedTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.OrderProjectionTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ParametersInCountExpression" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedComponent" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedCompositeId" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedCompositeIdWithAlias" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedEmbeddedCompositeId" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedId" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedListIncludesComponent" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedListIncludesEmbeddedCompositeId" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectionCache" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectionsTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectionsUsingProperty" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.PropertySubClassDiscriminator" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.PropertyWithFormulaAndPagingTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.RestrictionOnSubclassCollection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SameColumnAndAliasNames" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SameColumnAndAliasNamesResultTransformer" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ScrollCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SimplePagination" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SimplePaginationOnlyWithFirst" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SqlExpressionWithParameters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SubcriteriaJoinTypes" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SubqueryPagination" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SubqueryPaginationOnlyWithFirst" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.Subselect" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SubselectWithComponent" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.TestSubcriteriaBeingNull" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.TransformToRowCountTest" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.TypeMismatch" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CriteriaQueryTest]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DetachedCriteriaSerializable" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.AllCriterionAreSerializable" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.AllEmbeddedResultTrasformesHareSerializable" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.AllProjectionAreSerializable" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.BasicCriterions" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.DetachedCriteriaItSelf" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.ExecutableCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.Junctions" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.LikeCriterions" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.LogicalCriterions" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.ProjectionsExpressions" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.ResultTransformes" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.SQLCriterion" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.SQLProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.SubqueriesExpressions" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DetachedCriteriaSerializable]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Lambda" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CriteriaAssertFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentAliases" executed="True" result="Success" success="True" asserts="34" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentFetchMode" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentJoinType" executed="True" result="Success" success="True" asserts="41" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentLockMode" executed="True" result="Success" success="True" asserts="14" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentNestedCriterion" executed="True" result="Success" success="True" asserts="18" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentOperators" executed="True" result="Success" success="True" asserts="17" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentOrder" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentPaths" executed="True" result="Success" success="True" asserts="11" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentProjections" executed="True" result="Success" success="True" asserts="41" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentPropertyName" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentSubCriteria" executed="True" result="Success" success="True" asserts="17" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentSubquery" executed="True" result="Success" success="True" asserts="21" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentTypes" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentValues" executed="True" result="Success" success="True" asserts="13" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ExpressionProcessorFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateBooleanMemberExpression" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateEnumeration" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateMemberExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullableBoolExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullableEnumExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullableEnumValueExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullableIntExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullPropertyExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluatePropertyExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateRestrictionExtension" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateStaticPropertyExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionReference" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionSubCollectionExtensionMethod" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionSubCollectionIndex" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionValue" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IntegrationFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.DetachedQuery_SimpleCriterion" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.ICriteriaOfT_SimpleCriterion" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.IsType" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.MultiCriteria" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.NotSupportedException : The driver NHibernate.Driver.FirebirdClientDriver does not support multiple queries.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.OverrideEagerJoin" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.Project_MultipleProperties" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.Project_SingleProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.Project_TransformToDto" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.RowCount" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.SubCriteria" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.SubCriteriaProjections" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.SubQuery" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.UniqueResult" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProjectionsFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectionsFixture.ArbitraryProjections" executed="True" result="Success" success="True" asserts="261" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectionsFixture.InlineProjectionList" executed="True" result="Success" success="True" asserts="258" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="QueryOverFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Alias_Join" executed="True" result="Success" success="True" asserts="68" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Alias_JoinAlias" executed="True" result="Success" success="True" asserts="68" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Alias_JoinCombinations" executed="True" result="Success" success="True" asserts="146" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.AllowSingleCallSyntax" executed="True" result="Success" success="True" asserts="66" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Cachable" executed="True" result="Success" success="True" asserts="44" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.CloneIQueryOver" executed="True" result="Success" success="True" asserts="60" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.CloneIQueryOverWithSubType" executed="True" result="Success" success="True" asserts="53" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.CloneQueryOver" executed="True" result="Success" success="True" asserts="60" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.CustomMethodExpression" executed="True" result="Success" success="True" asserts="67" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.DetachedQueryOver" executed="True" result="Success" success="True" asserts="56" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Fetch" executed="True" result="Success" success="True" asserts="46" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.LockAlias" executed="True" result="Success" success="True" asserts="49" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.LockAll" executed="True" result="Success" success="True" asserts="49" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.MultipleCriterionExpression" executed="True" result="Success" success="True" asserts="76" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Negation" executed="True" result="Success" success="True" asserts="68" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OrderBy" executed="True" result="Success" success="True" asserts="90" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Paging" executed="True" result="Success" success="True" asserts="42" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.PrivateProperties" executed="True" result="Success" success="True" asserts="82" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Project" executed="True" result="Success" success="True" asserts="64" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.PropertyCriterion_NoAlias" executed="True" result="Success" success="True" asserts="97" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.ResultTransformer" executed="True" result="Success" success="True" asserts="53" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_AliasReferenceSyntax" executed="True" result="Success" success="True" asserts="139" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_Char" executed="True" result="Success" success="True" asserts="67" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_NoAlias" executed="True" result="Success" success="True" asserts="139" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOver_ToMany" executed="True" result="Success" success="True" asserts="65" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOver_ToManyAlias" executed="True" result="Success" success="True" asserts="65" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOver_ToOne" executed="True" result="Success" success="True" asserts="65" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOver_ToOneAlias" executed="True" result="Success" success="True" asserts="65" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOverCombinations" executed="True" result="Success" success="True" asserts="136" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.TransformQueryOverToRowCount" executed="True" result="Success" success="True" asserts="77" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.TransformQueryOverToRowCount64" executed="True" result="Success" success="True" asserts="77" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Where_BehavesTheSameAs_And" executed="True" result="Success" success="True" asserts="92" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RestrictionsFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.ArbitraryCriterion" executed="True" result="Success" success="True" asserts="92" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.DetachedRestrictions" executed="True" result="Success" success="True" asserts="92" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.Junction" executed="True" result="Success" success="True" asserts="92" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.NullRestriction" executed="True" result="Success" success="True" asserts="152" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.RestrictionsExtensions" executed="True" result="Success" success="True" asserts="130" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.SqlOperators" executed="True" result="Success" success="True" asserts="240" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.SqlOperatorsInline" executed="True" result="Success" success="True" asserts="208" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubqueryFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.DetachedSubquery" executed="True" result="Success" success="True" asserts="186" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.Property" executed="True" result="Success" success="True" asserts="610" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAlias" executed="True" result="Success" success="True" asserts="113" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAliasCriterion" executed="True" result="Success" success="True" asserts="113" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAll" executed="True" result="Success" success="True" asserts="402" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAllCriterion" executed="True" result="Success" success="True" asserts="402" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsAllSyntax" executed="True" result="Success" success="True" asserts="402" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsAllSyntaxCriterion" executed="True" result="Success" success="True" asserts="402" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSomeSyntax" executed="True" result="Success" success="True" asserts="330" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSomeSyntaxCrtierion" executed="True" result="Success" success="True" asserts="330" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSyntax" executed="True" result="Success" success="True" asserts="468" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSyntaxAlias" executed="True" result="Success" success="True" asserts="257" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSyntaxAliasCriterion" executed="True" result="Success" success="True" asserts="257" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSyntaxCriterion" executed="True" result="Success" success="True" asserts="113" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyCriterion" executed="True" result="Success" success="True" asserts="610" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertySome" executed="True" result="Success" success="True" asserts="330" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertySomeCriterion" executed="True" result="Success" success="True" asserts="330" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.UntypedSubqueries" executed="True" result="Success" success="True" asserts="172" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.UntypedSubqueriesCriterion" executed="True" result="Success" success="True" asserts="172" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.Value" executed="True" result="Success" success="True" asserts="610" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueAll" executed="True" result="Success" success="True" asserts="402" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueAllCriterion" executed="True" result="Success" success="True" asserts="402" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueCriterion" executed="True" result="Success" success="True" asserts="610" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueSome" executed="True" result="Success" success="True" asserts="330" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueSomeCriterion" executed="True" result="Success" success="True" asserts="330" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProjectionsTest" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 63
Day]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.CanUseParametersWithProjections" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseBetweenWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseEqPropertyWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseEqWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseGePropertyWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseGeWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseGtPropertyWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseGtWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseIdEqWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseInsensitiveLikeWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseInWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseIsNotNullWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseIsNullWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLePropertyWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLeWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLikeWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLtPropertyWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLtWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseNotEqPropertyWithProjection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UsingConditionals" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UsingSqlFunctions_Concat" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UsingSqlFunctions_Concat_WithCast" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in ProjectionsTest]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Deletetransient" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DeleteTransientEntityTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeleteCascadingToCircularity" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeletionCascadingToDetachedAssociation" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeletionCascadingToPersistentAssociation" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeletionCascadingToTransientAssociation" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeletionNoCascades" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DialectTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DB2DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.DB2DialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.CurrentTimestampSelection" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This test does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.GetDialectUntrimmedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.IsQuotedFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.IsQuotedTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.QuoteTableNameAlreadyQuoted" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.QuoteTableNameNeeded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.QuoteTableNameNotNeeded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.UnQuoteAlreadyQuoted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.UnQuoteArray" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.UnQuoteNeedingQuote" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FirebirdDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.FirebirdDialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="FunctionTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SerializableTypesFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DialectTest.FunctionTests.SerializableTypesFixture.AllEmbeddedTypesAreMarkedSerializable" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsSql2005DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetIfExistsDropConstraintTest_For_Schema_other_than_dbo" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetIfExistsDropConstraintTest_without_schema" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetLimitStringWithSqlComments" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.NH1187" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.OnlyOffsetLimit" description="should use only TOP clause if there is no offset" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.QuotedAndParenthesisStringTokenizerTests_WithComma_InQuotes" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.QuotedAndParenthesisStringTokenizerTests_WithFunctionCallContainingComma" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.QuotedStringTokenizerTests" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsSqlCe40DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.MsSqlCe40DialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlCe40DialectFixture.GetLimitStringWithDummyOrder" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsSqlDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.CurrentTimestampSelection" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This test does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.GetDialectUntrimmedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.IsQuotedFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.IsQuotedTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.QuoteTableNameAlreadyQuoted" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.QuoteTableNameNeeded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.QuoteTableNameNotNeeded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.UnQuoteAlreadyQuoted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.UnQuoteArray" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.UnQuoteNeedingQuote" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.TimestampRounding" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlCEDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.BinaryBlob_mapping_to_SqlCe_types" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedCatalogSchemaNameWithSqlCE" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedSchemaNameWithSqlCE" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedSchemaNameWithUnqoutedTableInSqlCE" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedTableNameWithoutSchemaWithSqlCE" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedTableNameWithSqlCE" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.SchemaNameWithSqlCE" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLiteDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedCatalogSchemaNameWithSqlLite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedSchemaNameWithSqlLite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedSchemaNameWithUnqoutedTableInSqlLite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedTableNameWithoutSchemaWithSqlLite" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedTableNameWithSqlLite" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.SchemaNameWithSqlLite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.SupportsSubSelect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.UseLimit" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DriverTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DbProviderFactoryDriveConnectionCommandProviderTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.DbProviderFactoryDriveConnectionCommandProviderTest.WhenCreatedWithDbFactoryThenCanReturnCommand" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.DbProviderFactoryDriveConnectionCommandProviderTest.WhenCreatedWithDbFactoryThenCanReturnConnection" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.DbProviderFactoryDriveConnectionCommandProviderTest.WhenCreatedWithNullDbFactoryThenThrows" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullReferenceFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.NullReferenceFixture.NamedParameterAssignedNoError" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DriverTest.NullReferenceFixture.NoParameterNameNullReference" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OracleClientDriverFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.OracleClientDriverFixture.CommandClassName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.OracleClientDriverFixture.ConnectionClassName" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OracleDataClientDriverFixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="TestFixture" name="ReflectionBasedDriverTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedNoWithDbFactoryThenCanReturnCommand" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithDbFactoryThenCanReturnCommand" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithDbFactoryThenCanReturnConnection" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithGoodDbProviderThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithNoDbFactoryThenCanReturnConnection" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithNoDbProviderThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithNullAssemblyAndGoodDbProviderThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Sql2008DateTime2Test" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.Sql2008DateTime2Test.Crud" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.DriverTest.Sql2008DateTime2Test does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlClientDriverFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.DriverTest.SqlClientDriverFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.SqlClientDriverFixture.Crud" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.DriverTest.SqlClientDriverFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlServerCeDriverFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.DriverTest.SqlServerCeDriverFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.SqlServerCeDriverFixture.Query" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.DriverTest.SqlServerCeDriverFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DriverTest.SqlServerCeDriverFixture.SaveLoad" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.DriverTest.SqlServerCeDriverFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DynamicEntity" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Interceptor" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="InterceptorDynamicEntity" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DynamicEntity.Interceptor.InterceptorDynamicEntity.It" executed="True" result="Success" success="True" asserts="9" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Tuplizer" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TuplizerDynamicEntity" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DynamicEntity.Tuplizer.TuplizerDynamicEntity.It" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.DynamicEntity.Person#5][SQL: INSERT INTO t_person (Name, addr_id, class, Id) VALUES (?, ?, 'person', ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="EngineTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CallableParserFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanDetermineHasNoReturn" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanDetermineHasReturn" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanDetermineIsCallable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanDetermineIsNotCallable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanFindCallableFunctionName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanFindCallableFunctionNameWithoutParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanFindCallablePackageFunctionName" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSQLQueryNonScalarReturnTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryCollectionReturnEqualsByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryCollectionReturnHashCodeByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryJoinReturnEqualsByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryJoinReturnHashCodeByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryRootReturnEqualsByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryRootReturnHashCodeByAlias" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSqlQueryReturnTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.NativeSqlQueryReturnTest.AllEmbeddedTypesAreMarkedSerializable" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSQLQueryScalarReturnTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryScalarReturnTest.EqualsByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryScalarReturnTest.HashCodeByAlias" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSQLQuerySpecificationTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.Equality" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.HashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.WhenChangeReturns_NotEqual" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.WhenChangeReturns_NotEqualHashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.WhenChangeSpace_NotEqual" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.WhenChangeSpace_NotEqualHashCode" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ParameterParserFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.ParameterParserFixture.CanFindParameterAfterAnyComment" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.EngineTest.ParameterParserFixture.CanFindParameterAfterComment" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.EngineTest.ParameterParserFixture.CanFindParameterAfterInlineComment" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypedValueFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.TypedValueFixture.EqualsCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.TypedValueFixture.ToStringWithNullValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.TypedValueFixture.WhenTheTypeIsAnArray_ChoseTheDefaultComparer" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="EntityModeTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Map" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Basic" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="DynamicClassFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.EntityModeTest.Map.Basic.DynamicClassFixture.ShouldWorkWithCriteria" executed="True" result="Success" success="True" asserts="8" />
                              <test-case name="NHibernate.Test.EntityModeTest.Map.Basic.DynamicClassFixture.ShouldWorkWithHQL" executed="True" result="Success" success="True" asserts="8" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Multi" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MultiRepresentationFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.EntityModeTest.Multi.MultiRepresentationFixture.PocoRetreival" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.EntityModeTest.Multi.MultiRepresentationFixture.XmlHQL" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.EntityModeTest.Multi.MultiRepresentationFixture.XmlRetreival" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.EntityModeTest.Multi.MultiRepresentationFixture.XmlSave" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Xml" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Accessors" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="XmlAccessorFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.CompanyElementGeneration" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.LongAttributeExtraction" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.LongElementAttributeExtraction" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.StringElementExtraction" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.StringTextExtraction" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Basic" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="XmlFixture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Basic.XmlFixture.CompositeId" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Basic.XmlFixture.MapIndexEmision" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Many2One" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="XmlManyToOneFixture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Many2One.XmlManyToOneFixture.XmlManyToOne" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Many2One.XmlManyToOneFixture.XmlOneToMany" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Events" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Collections" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Association" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Bidirectional" executed="True" result="Failure" success="False" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="ManyToMany" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="BidirectionalManyToManyBagToSetCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="47" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="47" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="72" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="117" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="22" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="38" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="29" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="38" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="53" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="43" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="33" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="33" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="33" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="BidirectionalManyToManySetToSetCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="47" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="47" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="72" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="117" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="22" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="38" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="29" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="38" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="53" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="43" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="33" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="33" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="33" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="Namespace" name="OneToMany" executed="True" result="Failure" success="False" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="BidirectionalOneToManyBagCollectionEventFixture" executed="True" result="Failure" success="False" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Error" success="False" asserts="27">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Error" success="False" asserts="27">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Error" success="False" asserts="42">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Error" success="False" asserts="77">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Error" success="False" asserts="16">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Error" success="False" asserts="12">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Error" success="False" asserts="13">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Error" success="False" asserts="28">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Error" success="False" asserts="14">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Error" success="False" asserts="28">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Error" success="False" asserts="28">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Error" success="False" asserts="28">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Error" success="False" asserts="13">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Error" success="False" asserts="18">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Error" success="False" asserts="13">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Error" success="False" asserts="13">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Error" success="False" asserts="18">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="BidirectionalOneToManyBagSubclassCollectionEventFixture" executed="True" result="Failure" success="False" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Error" success="False" asserts="27">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Error" success="False" asserts="27">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Error" success="False" asserts="42">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Error" success="False" asserts="77">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Error" success="False" asserts="16">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Error" success="False" asserts="12">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Error" success="False" asserts="13">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Error" success="False" asserts="28">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Error" success="False" asserts="14">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Error" success="False" asserts="28">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Error" success="False" asserts="28">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Error" success="False" asserts="28">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Error" success="False" asserts="13">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Error" success="False" asserts="18">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Error" success="False" asserts="13">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Error" success="False" asserts="13">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Error" success="False" asserts="18">
                                        <failure>
                                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.ChildWithManyToOne#10][SQL: UPDATE CHILD SET NAME = ?, parent_id = ? WHERE ID = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                                        </failure>
                                      </test-case>
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="BidirectionalOneToManySetCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="42" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="77" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="8" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Unidirectional" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="ManyToMany" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="UnidirectionalManyToManyBagCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="37" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="67" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="Namespace" name="OneToMany" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="UnidirectionalOneToManyBagCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="37" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="67" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="UnidirectionalOneToManySetCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="37" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="67" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="8" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Values" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ValuesBagCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="37" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="67" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="23" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="23" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DisposableListenersTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Events.DisposableListenersTest.WhenCloseSessionFactoryThenCallDisposeOfListener" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="PostEvents" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="PostUpdateFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.ExplicitUpdate" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.ImplicitFlush" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.UpdateDetachedObject" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.UpdateDetachedObjectWithLock" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.WithDetachedObject" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ExceptionsTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="NullQueryTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExceptionsTest.NullQueryTest.BadGrammar" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyAccessExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExceptionsTest.PropertyAccessExceptionFixture.MessageWithoutTypeCtor" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLExceptionConversionTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExceptionsTest.SQLExceptionConversionTest.BadGrammar" executed="True" result="Error" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[  Bad conversion [Dynamic SQL Error
SQL error code = -204
Table unknown
TBL_NO_THERE
At line 1, column 32]
  Expected: <NHibernate.Exceptions.SQLGrammarException>
  But was:  <NHibernate.Exceptions.GenericADOException>

TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ExceptionsTest.SQLExceptionConversionTest.IntegrityViolation" executed="True" result="Error" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[  Bad conversion [violation of FOREIGN KEY constraint "FK5DDA5643AF2EDC40" on table "T_MEMBERSHIP"
Foreign key reference target does not exist]
  Expected: <NHibernate.Exceptions.ConstraintViolationException>
  But was:  <NHibernate.Exceptions.GenericADOException>

TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ExpressionTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BetweenExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.BetweenExpressionFixture.BetweenSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DetachedCriteriaFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.DetachedCriteriaFixture.CanUseDetachedCriteriaToQuery" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.InExpressionFixture.InEmptyList" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ExpressionTest.InExpressionFixture.InSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InsensitiveLikeExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.InsensitiveLikeExpressionFixture.InsentitiveLikeSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JunctionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.JunctionFixture.GetTypedValues" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.ExpressionTest.JunctionFixture.SqlString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.JunctionFixture.ToStringTest" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LogicalExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.LogicalExpressionFixture.LogicalSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.NotExpressionFixture.NotSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotNullExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.NotNullExpressionFixture.NotNullSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.NullExpressionFixture.NullSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OperatorOverloadingFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.OperatorOverloadingFixture.CanUseAndOperatorForExpressions" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.ExpressionTest.OperatorOverloadingFixture.CanUseNotOperatorForExpressions" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.OperatorOverloadingFixture.CanUseOrOperatorForEpressions" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Projection" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProjectionFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.AvgTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.CountDistinctTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.CountTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.DistinctTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.GroupPropertyTest" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.IdTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.MaxTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.MinTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.NvlTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.PropertyTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.RowCountTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.SqlGroupProjectionTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.SqlProjectionTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.SumTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProjectionSqlFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionSqlFixture.QueryTest1" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionSqlFixture.QueryTestWithStrongTypeReturnValue" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionSqlFixture.SelectSqlProjectionTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.PropertyExpressionFixture.SqlStringTest" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryByExampleTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestEnableLikeWithMatchmodeAnywhere" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestEnableLikeWithMatchmodeEnd" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestEnableLikeWithMatchmodeStart" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestExcludingQBE" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestJunctionNotExpressionQBE" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestSimpleQBE" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RestrictionsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.RestrictionsFixture.LikeShouldContainsMatch" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.SimpleExpressionFixture.MisspelledPropertyWithNormalizedEntityPersister" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ExpressionTest.SimpleExpressionFixture.SimpleDateExpression" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.SimpleExpressionFixture.SimpleSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.SimpleExpressionFixture.TestQuoting" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.SQLExpressionFixture.NoParamsSqlStringTest" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ExpressionTest.SQLExpressionFixture.StraightSqlTest" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ExpressionTest.SQLExpressionFixture.WithParameterTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SubQueries" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SubQueriesSqlFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.ExpressionTest.SubQueries.SubQueriesSqlFixture.CanQueryBlogByItsPosts" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.ExpressionTest.SubQueries.SubQueriesSqlFixture.ComplexSubQuery_QueryingByGrandChildren" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Extendshbm" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ExtendsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.AllInOne" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.AllSeparateInOne" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.EntityNamesWithPackageFailureExpected" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.EntityNamesWithPackageFailureExpectedDiffFiles" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.EntityNamesWithPackageWithCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.JoinedSubclassAndEntityNamesOnly" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.JoinedSubclassAndEntityNamesOnlyWithCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.MissingSuper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.NwaitingForSuper" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.OutOfOrder" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.UnionSubclass" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Extralazy" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ExtraLazyFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.ExtraLazyWithWhereClause" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.Get" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Extralazy.User#gavin][SQL: INSERT INTO users (Password, Name) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.IndexFormulaMap" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Extralazy.User#gavin][SQL: INSERT INTO users (Password, Name) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.OrphanDelete" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Extralazy.Document#HiA2][SQL: INSERT INTO documents (Content, Owner, Title) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -303
feature is not supported
BLOB and array data types are not supported for move operation
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -303
feature is not supported
BLOB and array data types are not supported for move operation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.RemoveClear" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Extralazy.User#gavin][SQL: INSERT INTO users (Password, Name) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.SQLQuery" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Extralazy.SessionAttribute#8][SQL: INSERT INTO session_attributes (Name, StringData, ObjectData, id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="FilterTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ConfigFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.AddClassWithFilters" description="Add a class with filters without condition should not Throw exceptions and add secondpass tasks." executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.AddClassWithFiltersWithoutFilterDef" description="Add a class with filters without condition should Throw exceptions at secondpass." executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.AddFilterDefToClassWithFilters" description="Add filters-def should change conditions of class filters" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.ClassConditionInBothSides" description="Writing the condition in both sides should not change the condition defined in the class." executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.ClassNoSecondPass" description="Class filter with condition does not add secondpass and add an invalid filter-def" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.DuplicatedFilterDef" description="Filter-def duplication should Throw exception" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.FilterDefWithoutReference" description="Filter-def without reference to it should Throw exception" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.MissedFilterDef" description="Add a filtered class with condition but without a filter-def should Throw exception" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.WrongFilterDefInClass" description="Filter def without condition in both sides should throw exception" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.WrongFilterDefInClassSeconPass" description="Filter def without condition in both sides should throw exception even in secondpass" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DynamicFilterTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.CombinedClassAndCollectionFiltersEnabled" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.CriteriaQueryFilters" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.FiltersWithQueryCache" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.GetFilters" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.HqlFilters" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.InStyleFilterParameter" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyBase" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyBaseThruCriteria" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyFilterOnCriteria" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyFilterOnLoad" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyFilterOnQuery" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyOnCollectionLoadAfterHQL" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.OneToManyFilters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.SecondLevelCachedCollectionsFiltering" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FilterBinaryParameterTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.FilterBinaryParameterTest.NH882" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FilterConfig" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.FilterConfig.FilterDefinitionsLoadedCorrectly" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.FilterTest.FilterConfig.FiltersLoaded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.FilterTest.FilterConfig.TestFilterThrowsWithNoParameterSet" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FilterSecondPassArgsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.FilterSecondPassArgsFixture.CtorProtection" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Generatedkeys" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="ByTrigger" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GeneratedIdentityFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Generatedkeys.ByTrigger.GeneratedIdentityFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.ByTrigger.GeneratedIdentityFixture.GetGeneratedKeysSupport" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Generatedkeys.ByTrigger.GeneratedIdentityFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Identity" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IdentityGeneratedKeysTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.IdentityColumnGeneratedIds" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransaction" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransactionCascadedFromManyToOne" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransactionCascadedToInverseCollection" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransactionCascadedToManyToOne" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransactionCascadedToNonInverseCollection" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SimpleIdentityGeneratedFixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.SimpleIdentityGeneratedFixture.SequenceIdentityGenerator" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in SimpleIdentityGeneratedFixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Select" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SelectGeneratorTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.Select.SelectGeneratorTest.GetGeneratedKeysSupport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Seqidentity" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SequenceIdentityFixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.Seqidentity.SequenceIdentityFixture.SequenceIdentityGenerator" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in SequenceIdentityFixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="GeneratedTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="PartiallyGeneratedComponentTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.GeneratedTest.PartiallyGeneratedComponentTest.PartialComponentGeneration" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimestampGeneratedValuesWithCachingTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.GeneratedTest.TimestampGeneratedValuesWithCachingTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.GeneratedTest.TimestampGeneratedValuesWithCachingTest.AbstractGeneratedPropertyTest.GeneratedProperty" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.GeneratedTest.TimestampGeneratedValuesWithCachingTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TriggerGeneratedValuesWithCachingTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.GeneratedTest.TriggerGeneratedValuesWithCachingTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.GeneratedTest.TriggerGeneratedValuesWithCachingTest.AbstractGeneratedPropertyTest.GeneratedProperty" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.GeneratedTest.TriggerGeneratedValuesWithCachingTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TriggerGeneratedValuesWithoutCachingTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.GeneratedTest.TriggerGeneratedValuesWithoutCachingTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.GeneratedTest.TriggerGeneratedValuesWithoutCachingTest.AbstractGeneratedPropertyTest.GeneratedProperty" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.GeneratedTest.TriggerGeneratedValuesWithoutCachingTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="GenericTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="BagGeneric" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BagGenericFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.BagGeneric.BagGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.BagGeneric.BagGenericFixture.Simple" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.GenericTest.BagGeneric.B#6][SQL: INSERT INTO b (aname, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EnumGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="EnumGenericFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.EnumGeneric.EnumGenericFixture.MapsToEnum" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.GenericTest.EnumGeneric.EnumGenericFixture.Persists" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="IdBagGeneric" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IdBagGenericFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.IdBagGeneric.IdBagGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.IdBagGeneric.IdBagGenericFixture.Simple" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.Test.GenericTest.IdBagGeneric.A.Items#2][SQL: INSERT INTO Items (a_id, item_id, id) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ListGeneric" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ListGenericFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.ListGeneric.ListGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.ListGeneric.ListGenericFixture.Simple" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.GenericTest.ListGeneric.B#6][SQL: INSERT INTO b (aname, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="MapGeneric" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MapGenericFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.Simple" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.GenericTest.MapGeneric.B#6][SQL: INSERT INTO b (aname, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.SimpleTypes" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.GenericTest.MapGeneric.B#3][SQL: INSERT INTO b (aname, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.SortedCollections" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.UpdatesToSimpleMap" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Methods" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.Criteria" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.Filter" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.FilterEnumerable" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.QueryEnumerable" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.QueryList" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="OrderedSetGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="OrderedSetFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.OrderedSetGeneric.OrderedSetFixture.OrderedSetIsInOrder" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Overall" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.Overall.Fixture.CRUD" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.GenericTest.Overall.Fixture.CRUDAB" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SetGeneric" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SetGenericFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.SetGeneric.SetGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.SetGeneric.SetGenericFixture.Simple" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.GenericTest.SetGeneric.B#6][SQL: INSERT INTO b (aname, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="GhostProperty" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="GhostPropertyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.CanGetActualValueFromLazyManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.GhostPropertyMaintainIdentityMap" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.GhostPropertyMaintainIdentityMapUsingGet" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This shows an expected edge case]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.ShouldGenerateErrorForNonAutoPropGhostProp" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.WillNotLoadGhostPropertyByDefault" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Hql" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="HQLFunctions" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Abs" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateAvg" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateCount" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateMax" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateMin" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregatesAndMathNH959" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateSum" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateSumNH1100" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Bit_length" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Cast" executed="True" result="Error" success="False" asserts="8">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select animal0_.Id as Id548_, animal0_.Description as Descript2_548_, animal0_.BodyWeight as BodyWeight548_, animal0_1_.name_first as name2_549_, animal0_1_.name_initial as name3_549_, animal0_1_.name_last as name4_549_, animal0_1_.NickName as NickName549_, animal0_1_.Birthdate as Birthdate549_, case when animal0_1_.animalId is not null then 1 when animal0_.Id is not null then 0 end as clazz_ from Animal animal0_ left outer join Human animal0_1_ on animal0_.Id=animal0_1_.animalId where cast(@p0+animal0_.BodyWeight as DOUBLE PRECISION)>0 ]
  Name:aParam - Value:2
[SQL: select animal0_.Id as Id548_, animal0_.Description as Descript2_548_, animal0_.BodyWeight as BodyWeight548_, animal0_1_.name_first as name2_549_, animal0_1_.name_initial as name3_549_, animal0_1_.name_last as name4_549_, animal0_1_.NickName as NickName549_, animal0_1_.Birthdate as Birthdate549_, case when animal0_1_.animalId is not null then 1 when animal0_.Id is not null then 0 end as clazz_ from Animal animal0_ left outer join Human animal0_1_ on animal0_.Id=animal0_1_.animalId where cast(@p0+animal0_.BodyWeight as DOUBLE PRECISION)>0]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -804
Data type unknown
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -804
Data type unknown]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.CastNH1446" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.CastNH1979" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast((animal0_.BodyWeight+50)/@p0 as INTEGER) as col_0_0_ from Animal animal0_ ]
  Name:divisor - Value:2
[SQL: select cast((animal0_.BodyWeight+50)/@p0 as INTEGER) as col_0_0_ from Animal animal0_]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
expression evaluation not supported
Invalid data type for division in dialect 3
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
expression evaluation not supported
Invalid data type for division in dialect 3]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Coalesce" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Concat" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Current_TimeStamp" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Current_TimeStamp_Offset" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Dialect.FirebirdDialect doesn't support current_timestamp_offset function]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.DayMonthYear" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Extract" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.HourMinuteSecond" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Iif" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Length" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Locate" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Dialect.FirebirdDialect doesn't support locate function.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Lower" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Mod" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.NH1725" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Nullif" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.ParameterLikeArgument" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported yet!]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Sqrt" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Str" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.SubString" executed="True" result="Error" success="False" asserts="5">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select animal0_.Id as Id548_, animal0_.Description as Descript2_548_, animal0_.BodyWeight as BodyWeight548_, animal0_1_.name_first as name2_549_, animal0_1_.name_initial as name3_549_, animal0_1_.name_last as name4_549_, animal0_1_.NickName as NickName549_, animal0_1_.Birthdate as Birthdate549_, case when animal0_1_.animalId is not null then 1 when animal0_.Id is not null then 0 end as clazz_ from Animal animal0_ left outer join Human animal0_1_ on animal0_.Id=animal0_1_.animalId where substring(animal0_.Description from @p0 for @p1)=@p2 ]
Positional parameters:  #0>2 #1>3 #2>bcd
[SQL: select animal0_.Id as Id548_, animal0_.Description as Descript2_548_, animal0_.BodyWeight as BodyWeight548_, animal0_1_.name_first as name2_549_, animal0_1_.name_initial as name3_549_, animal0_1_.name_last as name4_549_, animal0_1_.NickName as NickName549_, animal0_1_.Birthdate as Birthdate549_, case when animal0_1_.animalId is not null then 1 when animal0_.Id is not null then 0 end as clazz_ from Animal animal0_ left outer join Human animal0_1_ on animal0_.Id=animal0_1_.animalId where substring(animal0_.Description from @p0 for @p1)=@p2]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -804
Data type unknown
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -804
Data type unknown]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Trim" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Animal#33][SQL: INSERT INTO Animal (Description, BodyWeight, Id) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Upper" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleFunctionsTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.AnsiSubstring" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.CastFunc" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.ClassicAggregate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.ClassicAvg" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.ClassicCount" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.ClassicSum" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.NoArgFunction" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.Nvl" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.PositionSubstring" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.StandardFunction" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.VarArgsFunction" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLFunctionTemplateTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Hql.SQLFunctionTemplateTest.ArgsDiffParams" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.SQLFunctionTemplateTest.RepetedParams" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SQLFunctionTemplateTest.Simple" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="HQL" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Ast" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BulkManipulation" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteNonExistentEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteOnDiscriminatorSubclass" executed="True" result="Error" success="False" asserts="2">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteOnJoinedSubclass" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteOnMappedJoin" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteRestrictedOnManyToOne" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteSyntaxWithCompositeId" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteUnionSubclassAbstractRoot" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteUnionSubclassConcreteSubclass" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteUnionSubclassLeafSubclass" executed="True" result="Error" success="False" asserts="2">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.DeleteWithSubquery" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.IncorrectSyntax" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.IncrementCounterVersion" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.IncrementTimestampVersion" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.InsertAcrossMappedJoinFails" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.InsertIntoSuperclassPropertiesFails" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.InsertWithGeneratedTimestampVersion" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.InsertWithGeneratedVersionAndId" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.InsertWithManyToOne" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.InsertWithMismatchedTypes" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.InsertWithSelectListUsingJoins" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.SimpleDeleteOnAnimal" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.SimpleInsert" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateMultiplePropertyOnAnimal" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table updates using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateNonExistentEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateOnAnimal" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table updates using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateOnComponent" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table updates using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateOnDiscriminatorSubclass" executed="True" result="Error" success="False" asserts="4">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateOnImplicitJoinFails" executed="True" result="Error" success="False" asserts="2">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateOnMammal" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table updates using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateOnManyToOne" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table updates using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateSetNullOnDiscriminatorSubclass" executed="True" result="Error" success="False" asserts="4">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateSetNullOnJoinedSubclass" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table updates using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateSetNullUnionSubclass" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table updates using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.UpdateWithWhereExistsSubquery" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table updates using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.BulkManipulation.WrongPropertyNameThrowQueryException" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="HqlFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.CanParseMaxLong" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.CaseClauseInSelect" executed="True" result="Error" success="False" asserts="2">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.InvalidJoinOnProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.MultipleParametersInCaseStatement" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.OrderByPropertiesImplicitlySpecifiedInTheSelect" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.ParameterInCaseThenAndElseClausesWithCast" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.ParameterInCaseThenClause" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.ReturnMetadata" executed="True" result="Success" success="True" asserts="22" />
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.SubselectAddition" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.HqlFixture.SumShouldReturnDouble" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="QuerySubstitutionTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.HQL.Ast.QuerySubstitutionTest.WhenExecutedThroughSessionThenUseSubstitutions" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.HQL.Ast.QuerySubstitutionTest.WhenExecutedThroughSessionThenUseSubstitutionsWithString" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.HQL.Ast.QuerySubstitutionTest.WhenSubstitutionsConfiguredThenUseItInTranslation" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.HQL.Ast.QuerySubstitutionTest.WhenSubstitutionsWithStringConfiguredThenUseItInTranslation" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SqlTranslationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.HQL.Ast.SqlTranslationFixture.CaseClauseWithMath" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.HQL.Ast.SqlTranslationFixture.ParseFloatConstant" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.HQL.Ast.SqlTranslationFixture.Union" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithClauseFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.HQL.Ast.WithClauseFixture.InvalidWithSemantics" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.HQL.Ast.WithClauseFixture.WithClause" executed="True" result="Error" success="False" asserts="3">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.HQL.Ast.WithClauseFixture.WithClauseFailsWithFetch" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlCommentsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.HQL.SqlCommentsFixture.CommentsInQuery" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="IdGen" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Enhanced" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SequenceStyleConfigUnitFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.DefaultedSequenceBackedConfiguration" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.DefaultedTableBackedConfiguration" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.DefaultOptimizerBasedOnIncrementBackedBySequence" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.DefaultOptimizerBasedOnIncrementBackedByTable" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.ExplicitOptimizerWithExplicitIncrementSize" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.ForceTableUse" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NativeGuid" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NativeGuidFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.IdGen.NativeGuid.NativeGuidFixture.Crd" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.NotSupportedException : dialect does not support server side GUIDs generation.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NativeGuidGeneratorFixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.IdGen.NativeGuid.NativeGuidGeneratorFixture.ReturnedValueIsGuid" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[This test does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="IdTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AssignedFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.InsertCascade" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.InsertCascadeNoWarning" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.SaveNoWarning" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.SaveOrUpdate_Save" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.SaveOrUpdate_Update" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.UpdateNoWarning" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HiLoTableGeneratorInt16Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.HiLoTableGeneratorInt16Fixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HiLoTableGeneratorInt32Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.HiLoTableGeneratorInt32Fixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HiLoTableGeneratorInt64Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.HiLoTableGeneratorInt64Fixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IdentifierGeneratorFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.IdentifierGeneratorFactoryFixture.NonCreatableStrategy" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleHiLoPerTableGeneratorTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not supported yet]]></message>
                    </reason>
                  </test-suite>
                  <test-suite type="TestFixture" name="TableGeneratorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.TableGeneratorFixture.SelectAndUpdateStringContainCustomWhere" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UseIdentifierRollbackTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not supported yet]]></message>
                    </reason>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Interceptor" executed="True" result="Inconclusive" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="InterceptorFixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Join" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="JoinCompositeKeyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Join.JoinCompositeKeyTest.SimpleSaveAndRetrieve" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Join.JoinTest.Learn_SubclassBehavior" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.PolymorphicGetByTypeofSuperclass" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Join.Meeting#4][SQL: INSERT INTO Meeting (person_id, Description, Id) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Join.JoinTest.TestDeleteUsingHql" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestInverseJoinNotDeleted" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestInverseJoinNotInserted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestInverseJoinNotUpdated" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestInverseJoinSelected" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestOptional" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestRetrieveUsingCriteriaInterface" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestRetrieveUsingGet" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestRetrieveUsingHql" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestSequentialSelects" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestSequentialSelectsOptionalData" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestSimpleInsertAndRetrieveEmployee" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Join.Meeting#26][SQL: INSERT INTO Meeting (person_id, Description, Id) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Join.JoinTest.TestUpdateEmployee" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Join.Meeting#29][SQL: INSERT INTO Meeting (person_id, Description, Id) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NH1059Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Join.NH1059Fixture.FetchJoin_ForNH1059" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Join.NH1059Fixture.FetchJoinWithCriteria_ForNH1059" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="JoinedSubclass" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="JoinedSubclassExtendsFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassExtendsFixture.JoinedSubclassFixture.SelectByClass" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in JoinedSubclassExtendsFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassExtendsFixture.JoinedSubclassFixture.TestCRUD" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in JoinedSubclassExtendsFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassExtendsFixture.JoinedSubclassFixture.TestHql" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in JoinedSubclassExtendsFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassExtendsFixture.JoinedSubclassFixture.TestJoinedSubclass" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in JoinedSubclassExtendsFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedSubclassFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassFixture.SelectByClass" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in JoinedSubclassFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassFixture.TestCRUD" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in JoinedSubclassFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassFixture.TestHql" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in JoinedSubclassFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassFixture.TestJoinedSubclass" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in JoinedSubclassFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="LazyOneToOne" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LazyOneToOneTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.LazyOneToOne.LazyOneToOneTest.Lazy" executed="True" result="Error" success="False" asserts="10">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not delete: [NHibernate.Test.LazyOneToOne.Employment#NHibernate.Test.LazyOneToOne.Employment][SQL: DELETE FROM Employment WHERE PersonName = ? AND OrganizationName = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="LazyProperty" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LazyPropertyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.CanGetValueForLazyProperty" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.CanGetValueForNonLazyProperty" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.PropertyLoadedNotInitialized" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.PropertyLoadedNotInitializedWhenUsingGet" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.ShouldGenerateErrorForNonAutoPropLazyProp" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Legacy" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ABCProxyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.OneToOne" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.OnoToOneComparing" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[ANTLR parser : Not supported ]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.OptionalOneToOneInCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.SharedColumn" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.Subclassing" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.SubclassMap" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ABCTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.ABCTest.HigherLevelIndexDefinitionInColumnTag" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.ABCTest.HigherLevelIndexDefinitionInPropertyTag" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.ABCTest.Subclassing" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.ABCTest.Subselect" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CriteriaTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.Criteria_can_get_query_entity_type" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.CriteriaCompositeProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.CriteriaLeftOuterJoin" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.CriteriaManyToOneEquals" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.CriteriaTypeMismatch" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.DetachedCriteria_can_get_query_entity_type" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.SimpleDateCriteria" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.SimpleSelectTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Simple#15][SQL: INSERT INTO Simple (Name, address, count_, date_, Pay, Other, id_) VALUES (?, ?, ?, ?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FooBarTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AddAll" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AfterDelete" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Any" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ArraysOfTimes" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#898c63af550a4a7d9cc1ea03dd89acf5][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AssociationId" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AutoFlush" executed="True" result="Error" success="False" asserts="2">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select foo0_."foo_id" as foo1_800_, foo0_.Version as Version800_, foo0_.foo as foo800_, foo0_.long_ as long5_800_, foo0_."@@##integer_  *" as column6_800_, foo0_.float_ as float7_800_, foo0_.X as X800_, foo0_.date_ as date9_800_, foo0_.timestamp_ as timestamp10_800_, foo0_.boolean_ as boolean11_800_, foo0_.bool_ as bool12_800_, foo0_.null_ as null13_800_, foo0_.short_ as short14_800_, foo0_.char_ as char15_800_, foo0_.zero_ as zero16_800_, foo0_.int_ as int17_800_, foo0_.string_ as string18_800_, foo0_.byte_ as byte19_800_, foo0_.YesNo as YesNo800_, foo0_."status_@###" as status21_800_, foo0_."localeayzabc123!@#$" as localea22_800_, foo0_.first_name as first23_800_, foo0_.surname as surname800_, foo0_.Dependent as Dependent800_, foo0_.count_ as count26_800_, foo0_.name_ as name27_800_, foo0_.g__ as g28_800_, foo0_.cmpnt_null_ as cmpnt29_800_, foo0_.subcount as subcount800_, foo0_.subname as subname800_, foo0_.fee_sub as fee32_800_, foo0_.null_cmpnt_ as null33_800_, foo0_.the_time as the34_800_, foo0_.Baz as Baz800_, foo0_.bar_String as bar36_800_, foo0_.name_name as name37_800_, foo0_.bar_count as bar38_800_, foo0_.Name as Name800_, foo0_.clazz as clazz800_, foo0_."gen_id" as gen41_800_, 2 * foo0_.int_ as formula44_, foo0_."$foo_subclass^" as column2_800_ from "foos" foo0_ where 111 in ((select bytes1_.byte_ from foobytes bytes1_ where foo0_."foo_id"=bytes1_.id)) ]
[SQL: select foo0_."foo_id" as foo1_800_, foo0_.Version as Version800_, foo0_.foo as foo800_, foo0_.long_ as long5_800_, foo0_."@@##integer_  *" as column6_800_, foo0_.float_ as float7_800_, foo0_.X as X800_, foo0_.date_ as date9_800_, foo0_.timestamp_ as timestamp10_800_, foo0_.boolean_ as boolean11_800_, foo0_.bool_ as bool12_800_, foo0_.null_ as null13_800_, foo0_.short_ as short14_800_, foo0_.char_ as char15_800_, foo0_.zero_ as zero16_800_, foo0_.int_ as int17_800_, foo0_.string_ as string18_800_, foo0_.byte_ as byte19_800_, foo0_.YesNo as YesNo800_, foo0_."status_@###" as status21_800_, foo0_."localeayzabc123!@#$" as localea22_800_, foo0_.first_name as first23_800_, foo0_.surname as surname800_, foo0_.Dependent as Dependent800_, foo0_.count_ as count26_800_, foo0_.name_ as name27_800_, foo0_.g__ as g28_800_, foo0_.cmpnt_null_ as cmpnt29_800_, foo0_.subcount as subcount800_, foo0_.subname as subname800_, foo0_.fee_sub as fee32_800_, foo0_.null_cmpnt_ as null33_800_, foo0_.the_time as the34_800_, foo0_.Baz as Baz800_, foo0_.bar_String as bar36_800_, foo0_.name_name as name37_800_, foo0_.bar_count as bar38_800_, foo0_.Name as Name800_, foo0_.clazz as clazz800_, foo0_."gen_id" as gen41_800_, 2 * foo0_.int_ as formula44_, foo0_."$foo_subclass^" as column2_800_ from "foos" foo0_ where 111 in ((select bytes1_.byte_ from foobytes bytes1_ where foo0_."foo_id"=bytes1_.id))]
  ----> FirebirdSql.Data.FirebirdClient.FbException : multiple rows in singleton select
  ----> FirebirdSql.Data.Common.IscException : multiple rows in singleton select
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AutoFlushCollections" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#5ad01145c5b44a3783e40642b1622585][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AutosaveChildren" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.BagMultipleElements" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.BagOneToMany" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.BatchLoad" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Cache" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CachedCollection" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#fd37c6cf99504834b42f7ff013370cc6][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Callback" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CascadeDeleteDetached" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CascadeSave" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionCache" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#ab49aeca01d948eaa12a31c856f04044][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionOfSelf" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionsInSelect" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#04d8e8e2fd394496b3351f5fd64309f8][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionVersioning" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionWhere" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ComplicatedQuery" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ComponentParent" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Components" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CompositeKeyPathExpressions" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Copy" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Create" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CreateUpdate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CriteriaCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Custom" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.DeleteRecursive" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.DeleteTransient" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.DeleteUpdatedTransient" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.DereferenceLazyCollection" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Disconnect" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Dyna" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.EmbeddedCompositeID" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.EmptyCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Enum" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Enumerable" executed="True" result="Success" success="True" asserts="23" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.EnumerableDisposable" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FetchInitializedCollection" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FetchInitializedCollectionDupe" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FetchList" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Find" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FindByCriteria" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FindLoad" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ForceOuterJoin" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ForCertain" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ForeignKeys" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Formula" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.IdBag" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.LateCollectionAdd" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.LazyCollections" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Limit" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ListRemove" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.StringList#746e6734dfe74f3e8a3b4a02f3c47e38][SQL: INSERT INTO string_list (id, "i", element) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Load" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.LoadAfterDelete" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ManyToManyBag" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.MoveLazyCollection" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.MultiColumnQueries" executed="True" result="Success" success="True" asserts="20" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NamedParams" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NewFlushing" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#2f60f52b76a44cb38a31bee04b108c3c][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NewSessionLifecycle" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NoForeignKeyViolations" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NonlazyCollections" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ObjectType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.OneToOneGenerator" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.OrderBy" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.OrphanDelete" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ParameterInHavingClause" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ParameterInOrderByClause" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.PersistCollections" executed="True" result="Error" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#a7508134c96e41f1bb31e0768306a6a8][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.PersistentLifecycle" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Polymorphism" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.PropertyRef" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ProxiesInCollections" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ProxyArray" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.PSCache" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Query" executed="True" result="Error" success="False" asserts="41">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#ec0aa7fd59214d008e640757d0a7d62b][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.QueryCollectionOfValues" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#a624e9aa44474e799c63550e047a4b9d][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.QueryLockMode" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Reachability" executed="True" result="Error" success="False" asserts="4">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.StringDateMap#50dfed24ede443a594ca4ebbcd725552][SQL: INSERT INTO StringDateMap (id_, map_key, map_value) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.RecursiveLoad" executed="True" result="Success" success="True" asserts="28" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Refresh" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.RefreshTransient" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.RemoveContains" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#a96c38888fbc4212b100daaa7fb4c449][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ReuseDeletedCollection" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#fca5573ed87f45908dab4db66ca6d0e0][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.SaveAddDelete" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.SaveDelete" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.SaveFlush" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.SerializableType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Sortables" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.TransientOrphanDelete" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Update" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.UpdateCollections" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.UpdateFromTransient" executed="True" result="Error" success="False" asserts="2">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.DomainModel.Fee#88f12bc53b0849e38b9f86866cb3c995][SQL: UPDATE "the fees" SET Fi = ?, TheFee = ?, AnotherFee = ?, Qux = ?, count_ = ? WHERE id_ = ?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.UpdateOrder" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.UserProvidedConnection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterNamedMissing" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterPositionalInQuotes" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterPositionalInQuotes2" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterPositionalMissing" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterPositionalMissing2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VersionedCollections" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Versioning" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Veto" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.WierdSession" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FumTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeID" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeIDCollections" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeIDOneToOne" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeIDQuery" executed="True" result="Success" success="True" asserts="27" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeIDs" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeKeyPathExpressions" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.Criteria" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Fum.Friends#NHibernate.DomainModel.FumCompositeID][SQL: UPDATE Fum SET fr_string = @p0, fr_short = @p1, fr_date = @p2 WHERE string_ = @p3 AND short_ = @p4 AND date_ = @p5]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FumTest.CriteriaCollection" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.DeleteOwner" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.KeyManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.ListIdentifiers" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.UnflushedSessionSerialization" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Simple#11][SQL: INSERT INTO Simple (Name, address, count_, date_, Pay, Other, id_) VALUES (?, ?, ?, ?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MasterDetailTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CachedCollectionRefresh" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Cascading" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Categories" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionQuery" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionRefresh" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionReplace" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionReplace2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionReplaceOnUpdate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Copy" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Category#28][SQL: INSERT INTO category (Name, category_key_col) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CopyCascade" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CustomPersister" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.ExampleTest" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.IncomingOutgoing" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Interface" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.MasterDetail" executed="True" result="Success" success="True" asserts="42" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Meta" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.MixNativeAssigned" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.MultiLevelCascade" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NamedQuery" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NH741" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select master0_.master_key_column as master1_923_, master0_.ts_ as ts2_923_, master0_.Name as Name923_, master0_.X as X923_, master0_.OtherMaster as OtherMas5_923_ from Master master0_ order by master0_.master_key_column+@p0 ]
  Name:param - Value:10
[SQL: select master0_.master_key_column as master1_923_, master0_.ts_ as ts2_923_, master0_.Name as Name923_, master0_.X as X923_, master0_.OtherMaster as OtherMas5_923_ from Master master0_ order by master0_.master_key_column+@p0]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -804
Data type unknown
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -804
Data type unknown]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NonLazyBidirectional" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NotNullDiscriminator" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NoUpdatedManyToOne" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.OuterJoin" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.ParentChildren" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.PolymorphicCriteria" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.QueuedBagAdds" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.SelfManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Serialization" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.ToStringWithNoIdentifier" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.UpdateLazyCollections" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultiTableTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.Collection" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.CollectionOnly" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.CollectionPointer" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.Constraints" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.DynamicUpdate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.FetchManyToOne" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.JoinOpenBug" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.Joins" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTable" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTableCollections" executed="True" result="Error" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Lower#2][SQL: INSERT INTO rootclass (count_, Name, date_, id1_) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTableGeneratedId" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTableManyToOne" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTableNativeId" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.OneToOne" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.Queries" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.SubclassCollection" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ParentChildTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.Bag" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.CascadeCompositeElements" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.CircularCascade" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ClassWhere" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.CollectionQuery" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ComplexCriteria" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.Cached#e9ecacb9989240d288f1179f52353a0f][SQL: INSERT INTO cached_set (baz, Foo, Bar) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.Container" executed="True" result="Success" success="True" asserts="22" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.DeleteEmpty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.Locking" executed="True" result="Success" success="True" asserts="25" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ManyToMany" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ObjectType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ParentChild" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ParentNullChild" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ProxyReuse" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.QueryOneToOne" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.Replicate" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.SimpleTest.SetPropertiesOnQuery" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SimpleTest.TestCRUD" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLFunctionsTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.Broken" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.CachedQuery" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.CachedQueryOnInsert" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.CachedQueryRegion" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.DialectSQLFunctions" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.NothingToUpdate" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.SetProperties" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.SQLFunctionAsAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.SQLFunctions" executed="True" result="Success" success="True" asserts="25" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLLoaderTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.ComponentNoStar" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.ComponentStar" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.DoubleAliasing" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.EmbeddedCompositeProperties" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.EscapedODBC" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Escaping not implemented. Need to test with ODBC/OLEDB when implemented.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLAssociatedObject" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLDiscriminatedDiffSessions" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLDiscriminatorSameSession" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLMultipleObject" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLParameters" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLProperties" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLSimpleByDiffSessions" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLStar" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindSimpleBySQL" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.NamedSQLQuery" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.TS" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.TSNamed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="SetUpFixture" name="Linq" executed="True" result="Error" success="False" asserts="0">
                <failure>
                  <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Northwind.Entities.Shipper#3][SQL: INSERT INTO Shippers (CompanyName, Phone, Reference, ShipperId) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                </failure>
                <results>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithBeforeYearFunction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithCustomFunction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithEndsWith" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithEquals" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithMonthFunction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithNotStartsWith" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithOnOrAfterYearFunction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithStartsWith" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithUpperAndLowerFunctions" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="AggregateTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.MammalsViaDynamicInvokedExpression" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.NegativeTimesheetsWithEqualsFalse" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.NegativeTimesheetsWithEqualsTrue" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.NegativeTimesheetsWithNotEqualsFalse" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.NegativeTimesheetsWithNotEqualsTrue" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.TimesheetsWithEqualsFalse" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.TimesheetsWithEqualsTrue" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.TimesheetsWithNotEqualsFalse" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.TimesheetsWithNotEqualsTrue" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="BinaryBooleanExpressionTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.EqualsSwapsToEquals" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.GreaterThanOrEqualToSwapsToLessThanOrEqualTo" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.GreaterThanSwapsToLessThan" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.LessThanOrEqualToSwapsToGreaterThanOrEqualTo" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.LessThanSwapsToGreaterThan" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.NotEqualsSwapsToNotEquals" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.PropertyPropertyDoesntSwap" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.PropertyValueDoesntSwaps" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.ValuePropertySwapsToPropertyValue" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.ValuePropertySwapsToPropertyValueUsingEqualsFromConstant" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.ValuePropertySwapsToPropertyValueUsingEqualsToConstant" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="BinaryExpressionOrdererTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.BooleanMethodExtensionExample.CanUseMyCustomExtension" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="BooleanMethodExtensionExample" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.ByMethod.AnyTests.AnySublist" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.AnyTests.NestedAny" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="AnyTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.MultipleKeyGroupAndCount" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.MultipleKeyGrouping" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyGroupAndCount" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyGrouping" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="GroupByTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.AggregateAscendingOrderByClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.AggregateDescendingOrderByClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.AscendingOrderByClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.ComplexAscendingDescendingOrderByClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.ComplexAscendingOrderByClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.ComplexDescendingOrderByClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.DescendingOrderByClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="OrderByTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.EmptySumCastNullableDecimal" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.EmptySumDecimal" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.EmptySumNullableDecimal" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.SumDecimal" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.SumNullableDecimal" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="SumTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-suite type="Namespace" name="ByMethod" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.CasingTest.ToLower" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.CasingTest.ToLowerInvariant" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.CasingTest.ToUpper" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.CasingTest.ToUpperInvariant" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="CasingTest" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.CustomExtensionsExample.CanUseMyCustomExtension" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="CustomExtensionsExample" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.DateTimeTests.CanQueryByDate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.DateTimeTests.CanQueryByDateTime" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.DateTimeTests.CanQueryByDateTime2" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.DateTimeTests.CanQueryByYear" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="DateTimeTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.DynamicQueryTests.CanQueryWithDynamicOrderBy" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="DynamicQueryTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchAndThenFetchManyWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchAndThenFetchWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchManyAndThenFetchManyWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchManyAndThenFetchWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchManyWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.MultipleRelationshipsCanBeEagerLoaded" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.NestedRelationshipsCanBeEagerLoaded" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.RelationshipsAreLazyLoadedByDefault" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.RelationshipsCanBeEagerLoaded" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhenFetchSuperclassCollectionThenNotThrows" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="EagerLoadTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.EnumTests.CanQueryOnEnumStoredAsInt32_High_1" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EnumTests.CanQueryOnEnumStoredAsInt32_Unspecified_2" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EnumTests.CanQueryOnEnumStoredAsString_Meduim_2" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.EnumTests.CanQueryOnEnumStoredAsString_Small_1" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="EnumTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.FunctionTests.CharIndexFunction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.FunctionTests.IndexOfFunctionExpression" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.FunctionTests.IndexOfFunctionProjection" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.FunctionTests.LeftFunction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.FunctionTests.ReplaceFunction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.FunctionTests.SubstringFunction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.FunctionTests.TwoFunctionExpression" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="FunctionTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq1" description="This sample uses WHERE to filter for Customers in London." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq10" description="This sample uses SELECT and anonymous types to return a sequence of just the Customers' contact names and phone numbers." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq11" description="This sample uses SELECT and anonymous types to return a sequence of just the Employees' names and phone numbers, with the FirstName and LastName fields combined into a single field, 'Name', and the HomePhone field renamed to Phone in the resulting sequence." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq12" description="This sample uses SELECT and anonymous types to return a sequence of all Products' IDs and a calculated value called HalfPrice which is set to the Product's UnitPrice divided by 2." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq12b" executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq12c" executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq12d" executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq13" description="This sample uses SELECT and a conditional statment to return a sequence of product  name and product availability." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq14" description="This sample uses SELECT and a known type to return a sequence of employees' names." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq15" description="This sample uses SELECT and WHERE to return a sequence of just the London Customers' contact names." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq16" description="This sample uses SELECT and anonymous types to return a shaped subset of the data about Customers." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq17" description="This sample uses nested queries to return a sequence of all orders containing their OrderId, a subsequence of the items in the order where there is a discount, and the money saved if shipping is not included." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq17b" description="This sample uses nested queries to return a sequence of all orders containing their OrderId, a subsequence of the items in the order where there is a discount, and the money saved if shipping is not included." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq17c" description="This sample uses nested queries to return a sequence of all orders containing their OrderId, a subsequence of the items in the order where there is a discount, and the money saved if shipping is not included." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq18" description="This sample uses Distinct to select a sequence of the unique cities that have Customers." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq19" description="This sample uses Count to find the number of Customers in the database." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq1b" description="This sample uses WHERE to filter for Customers in London and then Madrid to ensure that the parameterization is working." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq2" description="This sample uses WHERE to filter for Employees hired during or after 1994." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq20" description="This sample uses Count to find the number of Products in the database that are not discontinued." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq21" description="This sample uses Sum to find the total freight over all Orders." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq22" description="This sample uses Sum to find the total number of units on order over all Products." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq23" description="This sample uses Min to find the lowest unit price of any Product." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq24" description="This sample uses Min to find the lowest freight of any Order." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq25" description="This sample uses Min to find the Products that have the lowest unit price in each category." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq26" description="This sample uses Max to find the latest hire date of any Employee." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq27" description="This sample uses Max to find the most units in stock of any Product." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq28" description="This sample uses Max to find the Products that have the highest unit price in each category." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq29" description="This sample uses Average to find the average freight of all Orders." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq2B" description="This sample uses WHERE to filter for orders with shipping date equals to null." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq2C" description="This sample uses WHERE to filter for orders with shipping date not equals to null." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq3" description="This sample uses WHERE to filter for Products that have stock below their reorder level and are not discontinued." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq30" description="This sample uses Average to find the average unit price of all Products." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq31" description="This sample uses Average to find the Products that have unit price higher than the average unit price of the category for each category." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq36" description="This sample uses orderby to sort Employees by hire date." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="ORDER BY" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq37" description="This sample uses where and orderby to sort Orders shipped to London by freight." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="ORDER BY" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq38" description="This sample uses orderby to sort Products by unit price from highest to lowest." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="ORDER BY" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq39" description="This sample uses a compound orderby to sort Customers by city and then contact name." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="ORDER BY" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq3b" description="This sample uses WHERE to filter for Products that have stock below their reorder level and are not discontinued." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq4" description="This sample uses WHERE to filter out Products that are either UnitPrice is greater than 10 or is discontinued." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq40" description="This sample uses orderby to sort Orders from EmployeeId 1 by ship-to country, and then by freight from highest to lowest." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="ORDER BY" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq41" description="This sample uses Orderby, Max and Group By to find the Products that have the highest unit price in each category, and sorts the group by category id." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="ORDER BY" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq42" description="This sample uses group by to partition Products by CategoryId." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq43" description="This sample uses group by and Max to find the maximum unit price for each CategoryId." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq44" description="This sample uses group by and Min to find the minimum unit price for each CategoryId." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq45" description="This sample uses group by and Average to find the average UnitPrice for each CategoryId." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq46" description="This sample uses group by and Sum to find the total UnitPrice for each CategoryId." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq47" description="This sample uses group by and Count to find the number of Products in each CategoryId." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq48" description="This sample uses group by and Count to find the number of Products in each CategoryId that are discontinued." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq48b" description="This sample uses group by and Count to find the number of Products in each CategoryId that are not discontinued." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq49" description="This sample uses a where clause after a group by clause to find all categories that have at least 10 products." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq5" description="This sample calls WHERE twice to filter out Products that UnitPrice is greater than 10 and is discontinued." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq50" description="This sample uses Group By to group products by CategoryId and SupplierId." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq51" description="This sample uses Group By to return two sequences of products. The first sequence contains products with unit price greater than 10. The second sequence contains products with unit price less than or equal to 10." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="GROUP BY/HAVING" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq52" description="This sample uses Any to return only Customers that have no Orders." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="EXISTS/IN/ANY/ALL" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq52b" description="This sample uses Any to return only Customers that have Orders." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="EXISTS/IN/ANY/ALL" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq53" description="This sample uses Any to return only Categories that have at least one Discontinued product." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="EXISTS/IN/ANY/ALL" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq53b" description="This sample uses Any to return only Categories that have zero Discontinued products." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="EXISTS/IN/ANY/ALL" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq53c" description="This sample uses Any to return only Categories that does not have at least one Discontinued product." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="EXISTS/IN/ANY/ALL" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq53d" description="This sample uses Any to return only Categories that does not have any Discontinued products." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="EXISTS/IN/ANY/ALL" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq54" description="This sample uses All to return Customers whom all of their orders have been shipped to their own city or whom have no orders." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="EXISTS/IN/ANY/ALL" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq55" description="This sample uses Concat to return a sequence of all Customer and Employee phone/fax numbers." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="UNION ALL/UNION/INTERSECT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq56" description="This sample uses Concat to return a sequence of all Customer and Employee name and phone number mappings." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="UNION ALL/UNION/INTERSECT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq57" description="This sample uses Union to return a sequence of all countries that either Customers or Employees are in." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="UNION ALL/UNION/INTERSECT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq58" description="This sample uses Intersect to return a sequence of all countries that both Customers and Employees live in." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="UNION ALL/UNION/INTERSECT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq59" description="This sample uses Except to return a sequence of all countries that Customers live in but no Employees live in." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="UNION ALL/UNION/INTERSECT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq6" description="This sample uses First to select the first Shipper in the table." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq60" description="This sample uses Take to select the first 5 Employees hired." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="TOP/BOTTOM" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq61" description="This sample uses Skip to select all but the 10 most expensive Products." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="TOP/BOTTOM" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq62" description="This sample uses the Skip and Take operators to do paging by skipping the first 50 records and then returning the next 10, thereby providing the data for page 6 of the Products table." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="Paging" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq63" description="This sample uses a where clause and the Take operator to do paging by, first filtering to get only the ProductIds above 50 (the last ProductId from page 5), then ordering by ProductId, and finally taking the first 10 results, thereby providing the data for page 6 of the Products table.  Note that this method only works when ordering by a unique key." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="Paging" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq7" description="This sample uses First to select the single Customer with CustomerId 'BONAP'." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq8" description="This sample uses First to select an Order with freight greater than 10.00." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq9" description="This sample uses SELECT to return a sequence of just the Customers' contact names." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="SELECT/DISTINCT" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1" description="This sample uses foreign key navigation in the from clause to select all orders for customers in London." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin10" description="This sample shows how to construct a join where one side is nullable and the other isn't." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1a" description="This sample uses foreign key navigation in the from clause to select all orders for customers in London." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1b" description="This sample uses foreign key navigation in the from clause to select all orders for customers in London." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1c" description="This sample uses foreign key navigation in the from clause to select all orders for customers." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1d" description="This sample uses foreign key navigation in the from clause to select all orders for customers." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1e" description="This sample uses foreign key navigation in the from clause to select all orders for customers." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin2" description="This sample uses foreign key navigation in the where clause to filter for Products whose Supplier is in the USA that are out of stock." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin3" description="This sample uses foreign key navigation in the from clause to filter for employees in Seattle, and also list their territories." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin4" description="This sample uses foreign key navigation in the select clause to filter for pairs of employees where one employee reports to the other and where both employees are from the same City." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin5" description="This sample explictly joins two tables and projects results from both tables using a group join." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin5a" description="This sample explictly joins two tables and projects results from both tables." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin5b" description="This sample explictly joins two tables and projects results from both tables using a group join." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin5c" description="This sample explictly joins two tables with a composite key and projects results from both tables." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin6" description="This sample explictly joins three tables and projects results from each of them." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin7" description="This sample shows how to get LEFT OUTER JOIN by using DefaultIfEmpty(). The DefaultIfEmpty() method returns null when there is no Order for the Employee." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin8" description="This sample projects a 'let' expression resulting from a join." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin9" description="This sample shows a group join with a composite key." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin9b" description="This sample shows a join which is then grouped" executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="JOIN" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="LinqQuerySamples" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.LinqToHqlGeneratorsRegistryFactoryTest.WhenDefinedThenReturnCustomtRegistry" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.LinqToHqlGeneratorsRegistryFactoryTest.WhenNotDefinedThenReturnDefaultRegistry" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="LinqToHqlGeneratorsRegistryFactoryTest" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.MethodCallTests.CanExecuteAny" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.MethodCallTests.CanExecuteAnyWithArguments" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.MethodCallTests.CanExecuteCountWithOrderByArguments" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="MethodCallTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.CountWithWhereClause" description="This sample uses Count to find the number of Orders placed before yesterday in the database." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="COUNT/SUM/MIN/MAX/AVG" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.PredicatedCountOnChildList" description="Predicated count on a child list" executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="From NHUser list" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.ReferenceToOuter" description="Reference an outer object in a predicate" executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="From NHUser list" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.SelectFromObject" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.TelerikGridWhereClause" description="Telerik grid example, http://www.telerik.com/community/forums/aspnet-mvc/grid/grid-and-nhibernate-linq.aspx" executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="From NHUser list" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.TriplePageSelection" description="This sample uses a where clause and the Skip and Take operators to select the second, third and fourth pages of products" executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="Paging" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.WhereUsingGuidProperty" description="This sample uses WHERE to filter for Shippers using a Guid property." executed="True" result="Failure" success="False" asserts="0">
                    <categories>
                      <category name="WHERE" />
                    </categories>
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="MiscellaneousTextFixture" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.NullComparisonTests.NullEquality" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.NullComparisonTests.NullEqualityInverted" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.NullComparisonTests.NullInequality" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.NullComparisonTests.NullInequalityInverted" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="NullComparisonTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.PagingTests.CountAfterTakeShouldReportTheCorrectNumber" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PagingTests.Customers11to20" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PagingTests.Customers1to5" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PagingTests.CustomersChainedSkip" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PagingTests.CustomersChainedTake" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="PagingTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Conditionals_Return_Different_Keys" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Null_Returns_Different_Keys" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_OfType_Returns_Different_Keys" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Select_Member_Initialisation_Returns_Different_Keys" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Select_Properties_Return_Different_Keys" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Select_Types_Return_Different_Keys" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Unary_Operation_Returns_Different_Keys" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Where_Clauses_Return_Different_Keys" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Expressions_Differing_Only_By_Constants_Return_The_Same_Key" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Identical_Expressions_Return_The_Same_Key" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="ParameterisedQueries" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnManyToOneOfComponent" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnManyToOneOfManyToOne" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfComponent" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfManyToOne" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfManyToOneOfComponent" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfManyToOneOfManyToOne" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfOneToMany" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="PatientTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanCallLocalMethodsInAnonymousTypeInSelect" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanCallLocalMethodsInSelect" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanPerformStringOperationsInSelect" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanUseConstantStringInProjection" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousType" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeAndConcatenateFields" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithAddition" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithDivision" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithMultiply" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithSubstraction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectConditionals" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectKnownType" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectUserNames" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="ProjectionsTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.PropertyMethodMappingTests.CanExecuteCountInSelectClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.PropertyMethodMappingTests.CanExecuteCountInWhereClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="PropertyMethodMappingTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.QueryCacheableTests.CacheableBeforeOtherClauses" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryCacheableTests.CacheableRegionBeforeOtherClauses" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryCacheableTests.QueryIsCacheable" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryCacheableTests.QueryIsCacheable2" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryCacheableTests.QueryIsCacheable3" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryCacheableTests.QueryIsCacheableWithRegion" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="QueryCacheableTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterAggregate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterAverage" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterCount" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterCountWithPredicate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterFirst" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterFirstOrDefault" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterLongCount" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterLongCountWithPredicate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterMax" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterMin" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterSingle" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterSingleOrDefault" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterSum" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="QueryReuseTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.RegresstionTests.CanUseNullConstantAndRestriction" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.RegresstionTests.HierarchicalQueries_InlineConstant" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.RegresstionTests.HierarchicalQueries_Variable" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="RegresstionTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanAggregateWithAnonymousType" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanGetCountOnQueryWithAnonymousType" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanGetFirstWithAnonymousType" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectBinaryExpressions" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedAnonymousType" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedAnonymousTypeWithComponentReference" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedAnonymousTypeWithMultipleReferences" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedMemberInitExpression" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedMemberInitWithinNewExpression" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectSingleProperty" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectUsingMemberInitExpression" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithAggregateSubQuery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithAnySubQuery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithMultipleBinaryExpressions" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithMultipleBinaryExpressionsWithOr" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithProxyInterface" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="SelectionTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.StatelessSessionQueringTest.AggregateWithStartsWith" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.StatelessSessionQueringTest.WhenQueryThroughStatelessSessionThenDoesNotThrows" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="StatelessSessionQueringTest" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithAverageSubquery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithAverageSubqueryComparedToProperty" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithAverageSubqueryComparedToPropertyReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithAverageSubqueryReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithCountSubquery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithCountSubqueryComparedToProperty" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithCountSubqueryComparedToPropertyReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithCountSubqueryReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMaxSubquery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMaxSubqueryComparedToProperty" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMaxSubqueryComparedToPropertyReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMaxSubqueryReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMinSubquery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMinSubqueryComparedToProperty" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMinSubqueryComparedToPropertyReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMinSubqueryReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimesheetsWithNoEntries" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithStringContainsSubQuery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithSumSubquery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithSumSubqueryComparedToProperty" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithSumSubqueryComparedToPropertyReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithSumSubqueryReversed" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="WhereSubqueryTests" executed="True" result="Failure" success="False" asserts="0" />
                  <test-case name="NHibernate.Test.Linq.WhereTests.AndWithTrueReducesTo1Eq0Clause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.BitwiseQuery" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.BitwiseQuery2" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.BitwiseQuery3" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.FirstElementWithQueryThatReturnsNoResults" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.FirstElementWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.FirstOrDefaultElementWithQueryThatReturnsNoResults" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.NoWhereClause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.OfTypeWithWhere" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.OfTypeWithWhereAndProjection" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.OrWithTrueReducesTo1Eq1Clause" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.SearchOnObjectTypeCast" description="Reported as bug NH-2206" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.SearchOnObjectTypeUpCastWithExtensionMethod" description="Reported as bug NH-2206" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.SearchOnObjectTypeWithExtensionMethod" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.SearchOnObjectTypeWithIsKeyword" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.SingleElementWithQueryThatReturnsMultipleResults" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.SingleElementWithQueryThatReturnsNoResults" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.SingleOrDefaultElementWithQueryThatReturnsNoResults" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.TestDataContext" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.TimesheetsWithCollectionContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.TimesheetsWithCollectionNotContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.TimesheetsWithEnumerableContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersByNameAndRegistrationDate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAfterY2K" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrAfterY2K" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrAfterY2K_And_Before2001" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrBeforeY2K" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrBeforeY2KAndNamedNHibernate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrBeforeY2KOrNamedNHibernate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredBeforeY2K" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithArrayContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithArrayNotContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithAssociatedEntityProperties" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithComponentProperties" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithDynamicInvokedExpression" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithEntityPropertiesThreeLevelsDeep" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithListContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithListNotContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithNestedComponentProperties" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithNonNullLoginDate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithNullLoginDate" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithoutRole" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithRole" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithStringContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithStringNotContains" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.WhenTheSourceOfConstantIsICollectionThenNoThrows" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.WhenTheSourceOfConstantIsIListThenNoThrows" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-case name="NHibernate.Test.Linq.WhereTests.WhereWithConstantExpression" executed="True" result="Failure" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[TestFixtureSetUp failed in LinqReadonlyTestsContext]]></message>
                    </failure>
                  </test-case>
                  <test-suite type="TestFixture" name="WhereTests" executed="True" result="Failure" success="False" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ListIndex" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ListIndexFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ListIndex.ListIndexFixture.ListIndexBaseIsUsed" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.ListIndex.B#2][SQL: INSERT INTO b (aid, listindex, aname, id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleOneToManyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ListIndex.SimpleOneToManyTest.ShouldIncludeTheListIdxInserting" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Logging" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Log4NetLoggerTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Logging.Log4NetLoggerTest.CallingMethods" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LoggerProviderTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Logging.LoggerProviderTest.LoggerProviderCanCreateLoggers" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Logging.LoggerProviderTest.WhenNotConfiguredAndLog4NetExistsThenUseLog4NetFactory" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="MappingExceptions" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AddClassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.AddClassFixture.AddClassNotFound" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.MappingExceptions.AddClassFixture.ClassMissingMappingFile" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AddResourceFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.AddResourceFixture.AddDuplicateImport" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.MappingExceptions.AddResourceFixture.AddInvalidXml" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingExceptions.AddResourceFixture.ResourceNotFound" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DuplicateMappingFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.DuplicateMappingFixture.MappingSameCollectionTwiceShouldThrow" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.MappingExceptions.DuplicateMappingFixture.MappingTheSameClassTwiceShouldThrowException" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MissingDefCtorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.MissingDefCtorFixture.ClassMissingDefaultCtor" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyNotFoundExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.PropertyNotFoundExceptionFixture.ConstructWithNullType" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.MappingExceptions.PropertyNotFoundExceptionFixture.MisspelledPropertyName" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="MappingTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ColumnFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingTest.ColumnFixture.StringSqlType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.MappingTest.ColumnFixture.YesNoSqlType" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ForeignKeyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingTest.ForeignKeyFixture.UnmatchingColumns" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NonReflectiveBinderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.Comparator" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed, see the TODO of this test.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.MetaInheritance" executed="True" result="Success" success="True" asserts="35" />
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.NonMutatedInheritance" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.ReadSubClasses" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.XmlSerialization" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingTest.TableFixture.SchemaNameQuoted" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingTest.TableFixture.TableNameNotQuoted" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.MappingTest.TableFixture.TableNameQuoted" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="MultipleCollectionFetchTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="MultipleBagFetchFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleBagFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsLinearJoinFetch" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleBagFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsNonLinearJoinFetch" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleListFetchFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleListFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsLinearJoinFetch" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleListFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsNonLinearJoinFetch" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleSetFetchFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleSetFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsLinearJoinFetch" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleSetFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsNonLinearJoinFetch" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Naturalid" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Immutable" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ImmutableNaturalIdFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Naturalid.Immutable.ImmutableNaturalIdFixture.NaturalIdCache" executed="True" result="Success" success="True" asserts="10" />
                          <test-case name="NHibernate.Test.Naturalid.Immutable.ImmutableNaturalIdFixture.NaturalIdCheck" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Naturalid.Immutable.ImmutableNaturalIdFixture.Update" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Mutable" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MutableNaturalIdFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Naturalid.Mutable.MutableNaturalIdFixture.NaturalIdCache" executed="True" result="Success" success="True" asserts="10" />
                          <test-case name="NHibernate.Test.Naturalid.Mutable.MutableNaturalIdFixture.NonexistentNaturalIdCache" executed="True" result="Success" success="True" asserts="14" />
                          <test-case name="NHibernate.Test.Naturalid.Mutable.MutableNaturalIdFixture.Querying" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Naturalid.Mutable.MutableNaturalIdFixture.ReattachmentNaturalIdCheck" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NHibernateUtilTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.NHibernateUtilTest.CanGuessTypeOfInt32ByType" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.Test.NHibernateUtilTest.CanGuessTypeOfInt32ByValue" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.Test.NHibernateUtilTest.CanGuessTypeOfNullableInt32ByType" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.Test.NHibernateUtilTest.CanGuessTypeOfNullableInt32ByValue" executed="True" result="Success" success="True" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="NHSpecificTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AliasFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.AliasFixture.NoLeadingUnderscores" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="BagWithLazyExtraAndFilter" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Name longer than database column size
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Name longer than database column size
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Name longer than database column size]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.BagWithLazyExtraAndFilter.Fixture.CanUseFilterForLazyExtra" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicClassFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.BagRefresh" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.Caching" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestArrayCRUD" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestBagCRUD" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestCRUD" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestLinqWhereOnDictionaryProperty" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestListCRUD" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestMapCRUD" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestPrimitiveArrayCRUD" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestPrivateFieldAccess" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestSetCRUD" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.BasicClass.StringList#1][SQL: INSERT INTO bc_stlst (bc_id, lst_idx, str_val) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestWrapArrayInListProperty" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicObjectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicObjectFixture.TestCRUD" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicSerializableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicSerializableFixture.TestCRUD" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicTimeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicTimeFixture.Insert" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicTimeFixture.TimeArray" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicTimeFixture.Update" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.CollectionFixture.TestLoadChildFirst" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.CollectionFixture.TestLoadParentFirst" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="CriteriaFromHql" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.CriteriaFromHql.Fixture.UsingCriteriaAndHql" executed="True" result="Success" success="True" asserts="16" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="CriteriaQueryOnComponentCollection" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table EMPLOYEES already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.CriteriaQueryOnComponentCollection.Fixture.CanQueryByCriteriaOnSetOfCompositeElement" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.CriteriaQueryOnComponentCollection.Fixture.CanQueryByCriteriaOnSetOfCompositeElement_UsingDetachedCriteria" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.CriteriaQueryOnComponentCollection.Fixture.CanQueryByCriteriaOnSetOfElement" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Dates" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DateFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateFixture.SavingAndRetrievingTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DateTime2Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTime2Fixture.SaveMillisecond" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTime2Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTime2Fixture.SavingAndRetrievingTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTime2Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DateTimeOffSetFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture.HashCodeShouldHaveSameBehaviorOfNetType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture.Next" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture.SavingAndRetrievingTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture.Seed" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture.WhenEqualTicksThenShouldMatchIsEqual" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture.WhenNotEqualTicksThenShouldNotMatchIsEqual" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffSetFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TimeAsTimeSpanFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.TimeAsTimeSpanFixture.SavingAndRetrievingTest" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TimeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.TimeFixture.SavingAndRetrievingTest" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Docs" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Associations" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="BiM21" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.NHSpecificTest.Docs.Associations.BiM21.Fixture.TestCorrectUse" executed="True" result="Success" success="True" asserts="0" />
                                  <test-case name="NHibernate.Test.NHSpecificTest.Docs.Associations.BiM21.Fixture.TestErrorUsage" executed="True" result="Success" success="True" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="ExampleParentChild" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="UpdateFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.NHSpecificTest.Docs.ExampleParentChild.UpdateFixture.Update" executed="True" result="Success" success="True" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="DtcFailures" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DtcFailuresFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.Can_roll_back_transaction" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.CanDeleteItemInDtc" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.NH1744" description="Open/Close a session inside a TransactionScope fails." executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.RollbackOutsideNh" description="Another action inside the transaction do the rollBack outside nh-session-scope." executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.TransactionInsertLoadWithRollBackTask" description="Two session in two txscope &#xD;&#xA;(without an explicit NH transaction and without an explicit flush) &#xD;&#xA;and with a rollback in the second dtc and a ForceRollback outside nh-session-scope." executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.TransactionInsertWithRollBackTask" description="rollback inside nh-session-scope should not commit save and the transaction should be aborted." executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.WillNotCrashOnDtcPrepareFailure" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[Expected failure
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ElementsEnums" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IntEnumsBagFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ElementsEnums.IntEnumsBagFixture.AbstractIntEnumsBagFixture.LoadEnums" description="Should load the list of enums (NH-1772)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IntEnumsBagNoNameFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ElementsEnums.IntEnumsBagNoNameFixture.AbstractIntEnumsBagFixture.LoadEnums" description="Should load the list of enums (NH-1772)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IntEnumsBagPartialNameFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ElementsEnums.IntEnumsBagPartialNameFixture.AbstractIntEnumsBagFixture.LoadEnums" description="Should load the list of enums (NH-1772)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EmptyMappingsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.BeginWithIsolationLevel" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.DisconnectShouldNotCloseUserSuppliedConnection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.InvalidQuery" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.NullInterceptor" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.ReconnectAfterClose" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EntityModeToTuplizerPerf" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityModeToTuplizerPerf.Fixture.VerifyEntityModeFound" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityModeToTuplizerPerf.Fixture.VerifyEntityModeNotFound" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EntityNameAndCompositeId" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityNameAndCompositeId.Fixture.CanPersistAndRead" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EntityNameAndInheritance" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityNameAndInheritance.Fixture.DoesNotCrash" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EntityNameWithFullName" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityNameWithFullName.Fixture.CanPersistAndRead" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityNameWithFullName.Fixture.OnlyOneSelect" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Evicting" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table EMPLOYEES already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Evicting.Fixture.Can_evict_entity_from_session" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Evicting.Fixture.Can_evict_non_persistent_object" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Evicting.Fixture.Can_evict_when_trying_to_evict_entity_from_another_session" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="FileStreamSql2008" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="Namespace" name="Futures" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FallbackFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureOfCriteriaFallsBackToListImplementationWhenQueryBatchingIsNotSupported" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureOfQueryFallsBackToListImplementationWhenQueryBatchingIsNotSupported" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfCriteriaCanGetScalarValueWhenQueryBatchingIsNotSupported" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfCriteriaCanGetSingleEntityWhenQueryBatchingIsNotSupported" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfQueryCanGetScalarValueWhenQueryBatchingIsNotSupported" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfQueryCanGetSingleEntityWhenQueryBatchingIsNotSupported" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FutureCriteriaFixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureCriteriaFixture.CanCombineSingleFutureValueWithEnumerableFutures" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureCriteriaFixture.CanUseFutureCriteria" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureCriteriaFixture.TwoFuturesRunInTwoRoundTrips" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FutureQueryFixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.CanCombineSingleFutureValueWithEnumerableFutures" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.CanExecuteMultipleQueryWithSameParameterName" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.CanUseFutureQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.TwoFuturesRunInTwoRoundTrips" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FutureQueryOverFixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryOverFixture.CanCombineSingleFutureValueWithEnumerableFutures" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryOverFixture.CanUseFutureCriteria" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryOverFixture.TwoFuturesRunInTwoRoundTrips" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LinqFutureFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanCombineSingleFutureValueWithEnumerableFutures" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanExecuteMultipleQueriesOnSameExpression" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanUseFutureQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CoalesceShouldWorkForFutures" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.
  ----> System.NotImplementedException : The method or operation is not implemented.
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.TwoFuturesRunInTwoRoundTrips" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not applicable for dialects that do not support multiple queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GetSetHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.GetSetHelperFixture.TestDefaultValue" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GetTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.GetTest.GetAfterLoad" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.NHSpecificTest.GetTest.GetAndModify" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.GetTest.GetVsLoad" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="HqlOnMapWithForumula" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.HqlOnMapWithForumula.Fixture.TestBug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LazyLoadBugTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.LazyLoadBugTest.TestLazyLoad" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.LazyLoadBugTest.TestLazyLoadNoAdd" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ListsWithHoles" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table EMPLOYEES already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ListsWithHoles.Fixture.CanHandleHolesInList" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="LoadingNullEntityInSet" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table EMPLOYEES already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.LoadingNullEntityInSet.Fixture.CanHandleNullEntityInList" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Logs" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="LogsFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Logs.LogsFixture.WillGetSessionIdFromSessionLogs" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ManyToOneFilters20Behaviour" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.ExplicitFiltersOnCollectionsShouldBeActive" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.ExplicitFiltersOnCollectionsShouldBeActiveWithEagerLoad" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.VerifyAlwaysFilter" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.VerifyAlwaysFiltersOnPropertyRef" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.VerifyFilterActiveButNotUsedInManyToOne" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.VerifyQueryWithWhereClause" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MapFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.NHSpecificTest.MapFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.MapFixture.TestInsert" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.MapFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.MapFixture.TestSelect" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.MapFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.MapFixture.TestSort" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.MapFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1001" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table EMPLOYEES already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1001.Fixture.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1018" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1018Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table EMPLOYEES already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1018.NH1018Fixture.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1018Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1027" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1027.Fixture.CanMakeCriteriaQueryAcrossBothAssociations" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[This test is specific for MsSql2005Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1028" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1028.Fixture.CanLoadCollectionUsingLeftOuterJoin" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1033" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ANIMAL already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1033.Fixture.CanUseClassConstraint" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1039" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1039.Fixture.test" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1044" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1044.Fixture.Crud" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.Test.NHSpecificTest.NH1044.Person.Delivery.Adresses#32768][SQL: INSERT INTO Adresses (owner, poid, street) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1054" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1054Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1054.NH1054Fixture.AdoNetWithDistributedTransactionFactoryIsDefaultTransactionFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1054.NH1054Fixture.SettingsTransactionFactoryReturnsConfiguredTransactionFactory" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1061" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1061.Fixture.IncrementGeneratorShouldIncludeClassLevelSchemaWhenGettingNextId" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1064" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1064.Fixture.JoinFetch" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1069" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ImproveLazyExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1069.ImproveLazyExceptionFixture.LazyCollection" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1069.ImproveLazyExceptionFixture.LazyEntity" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1077" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1077.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1077.Fixture.Loking" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1077.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1080" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1080.Fixture.TestBug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1092" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1092.Fixture.CountHasUniqueResult" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1093" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="1">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1093.Fixture.NoException" description="Without configured cache, shouldn't throw exception" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1097" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1097.Fixture.ThrowsExceptionWhenColumnNameIsUsedInQuery" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1098" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FilterParameterOrderFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.CriteriaParameterOrder" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.QueryMapElements" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.QueryWithMixedParameters" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.QueryWithNamedParameters" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.QueryWithPositionalParameter" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1101" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1101.Fixture.Behavior" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1119" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1119.Fixture.SelectMinFromEmptyTable" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1136" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1136.Fixture.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1144" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1144.Fixture.CanSaveInSingleBatch" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Only applicable for Oracle Data Client driver]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1159" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1159.Fixture.DoesNotFlushWithCriteriaWithAuto" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1159.Fixture.DoesNotFlushWithCriteriaWithCommit" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1159.Fixture.DoesNotFlushWithCriteriaWithNever" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1171" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1171.Fixture.ExecutedContainsComments" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ 
SELECT id 
FROM tablea 
-- Comment with ' number 1 
WHERE Name = @p0 
/* Comment with ' number 2 */ 
ORDER BY Name 
 ]
  Name:name - Value:Evgeny Potashnik
[SQL: 
SELECT id 
FROM tablea 
-- Comment with ' number 1 
WHERE Name = @p0 
/* Comment with ' number 2 */ 
ORDER BY Name 
]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 5, column 14
@
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 5, column 14
@]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1171.Fixture.SupportSQLQueryWithComments" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ 
SELECT id 
FROM tablea 
-- Comment with ' number 1 
WHERE Name = @p0 
/* Comment with ' number 2 */ 
ORDER BY Name 
 ]
  Name:name - Value:Evgeny Potashnik
[SQL: 
SELECT id 
FROM tablea 
-- Comment with ' number 1 
WHERE Name = @p0 
/* Comment with ' number 2 */ 
ORDER BY Name 
]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 5, column 14
@
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 5, column 14
@]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1178" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1178.Fixture.ExcludeNullsAndZeroes" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1179" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1179.Fixture.ApplyFilterExplicitJoin" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1182" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1182.Fixture.DeleteWithoutUpdateVersion" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1192" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1192.Fixture.BitwiseAndWorksCorrectly" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select objecta0_.Id as Id1203_, objecta0_.Name as Name1203_, objecta0_.FontType as FontType1203_ from ObjectA objecta0_ where objecta0_.FontType&1>0 ]
[SQL: select objecta0_.Id as Id1203_, objecta0_.Name as Name1203_, objecta0_.FontType as FontType1203_ from ObjectA objecta0_ where objecta0_.FontType&1>0]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 145
&
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 145
&]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1192.Fixture.BitwiseOrWorksCorrectly" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select objecta0_.Id as Id1203_, objecta0_.Name as Name1203_, objecta0_.FontType as FontType1203_ from ObjectA objecta0_ where objecta0_.FontType|2=1|2 ]
[SQL: select objecta0_.Id as Id1203_, objecta0_.Name as Name1203_, objecta0_.FontType as FontType1203_ from ObjectA objecta0_ where objecta0_.FontType|2=1|2]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 145
|
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 145
|]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1217" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1217.Fixture.NoExceptionMustBeThrown" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1230" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[TODO(Dario)This test demostrate the need of eliminate the 'bool' on pre-insert eventlisteners.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1230.Fixture.NoExceptionMustBeThrown1" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[TODO(Dario)This test demostrate the need of eliminate the 'bool' on pre-insert eventlisteners.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1230.Fixture.NoExceptionMustBeThrown2" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[TODO(Dario)This test demostrate the need of eliminate the 'bool' on pre-insert eventlisteners.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1235" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1235.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1235.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1235.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1250" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="PolymorphicJoinFetchFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1250.PolymorphicJoinFetchFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1250.PolymorphicJoinFetchFixture.FetchUsingICriteria" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1250.PolymorphicJoinFetchFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1250.PolymorphicJoinFetchFixture.FetchUsingIQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1250.PolymorphicJoinFetchFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1252" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1252Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1252.NH1252Fixture.Test" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1253" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.MultiQuerySingleInList" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.TestParametersWithTrailingNumbersMultipleInList" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.TestParametersWithTrailingNumbersSingleInList" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.TestParametersWithTrailingNumbersSingleInListReverse" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.TestSamePartialName" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1255" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1255.Fixture.CanLoadMappingWithNotNullIgnore" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1264" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1264.Fixture.EagerFetchAnomaly" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1274ExportExclude" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1274ExportExcludeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1274ExportExclude.NH1274ExportExcludeFixture.SchemaExport_Drop_CreatesDropScript" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1274ExportExclude.NH1274ExportExcludeFixture.SchemaExport_Export_CreatesExportScript" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1274ExportExclude.NH1274ExportExcludeFixture.SchemaExport_Update_CreatesUpdateScript" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1274ExportExclude.NH1274ExportExcludeFixture.SchemaExport_Validate_CausesValidateException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1275" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1275.Fixture.Loking" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1275.Fixture.Retrieving" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1280" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1280Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingOnEqProjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingOnGtCount" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingOnLtAverage" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingUsingSqlFunctions_Concat" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.MultipleSubqueriesShouldStayInOrder" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.NestedSubqueriesShouldStayInOrder" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.NonHavingOnEqProperty" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.NotExpressionShouldNotAddCriteriaTwice" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.SubstringShouldUseAllParameters" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1280Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1284" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1284.Fixture.EmptyValueTypeComponent" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1289" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1289.Fixture.ManyToOne_gets_implicit_polymorphism_correctly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1290" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1290.Fixture.ExposeBug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1291AnonExample" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1291AnonExampleFixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1291AnonExample.NH1291AnonExampleFixture.CanCreateAnonExampleForInt" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1291AnonExampleFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1291AnonExample.NH1291AnonExampleFixture.CanCreateAnonExampleForStringLikeCompare" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1291AnonExampleFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1291AnonExample.NH1291AnonExampleFixture.CanQueryUsingAnonRelations" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1291AnonExampleFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1291AnonExample.NH1291AnonExampleFixture.CanQueryUsingSavedRelations" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH1291AnonExampleFixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1293" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1293.Fixture.Criteria_Does_Not_Equal_To_HQL" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1297" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1297.Fixture.ItemsCanBeSavedAndUpdatedInTheSameSession" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1301" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1301.Fixture.Test" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1304" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1313" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1313.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1324" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1324.Fixture.CanUseUniqueResultWithNullableType_ReturnNull_Criteria" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1324.Fixture.CanUseUniqueResultWithNullableType_ReturnNull_HQL" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1324.Fixture.CanUseUniqueResultWithNullableType_ReturnResult_Criteria" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1324.Fixture.CanUseUniqueResultWithNullableType_ReturnResult_HQL" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1326" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1326.Fixture.ShouldThrowIfCallingDisconnectInsideTransaction" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1332" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1332.Fixture.Bug" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1343" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProductFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1343.ProductFixture.ProductQueryPassesAndExecutesRightIfPuttingAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1343.ProductFixture.ProductQueryPassesParsingButFails" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1347" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1347.Fixture.Bug" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NH-1347 is sqlite specific]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1349" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1349.Fixture.Can_page_with_formula_property" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1355" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CustomVersionType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1355.CustomVersionType.Bug" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1355.CustomVersionType.BugSubTask" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1356" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureWithBag" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1356.FixtureWithBag.Fixture.CanLoadWithGenericCompositeElement" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FixtureWithBag]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithList" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1356.FixtureWithList.Fixture.CanLoadWithGenericCompositeElement" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FixtureWithList]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithSet" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1356.FixtureWithSet.Fixture.CanLoadWithGenericCompositeElement" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FixtureWithSet]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1359" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanGetSelectSubqueryWithSpecifiedParameter" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanOrderByNamedSubquery" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanPageAndSortResultsWithParametersAndFilters" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanPageAndSortWithMultipleColumnsOfSameName" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanSetSubQueryProjectionFromDetachedCriteriaWithCountProjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanSubqueryRelatedObjectsNotInMainQuery" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1362" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1362.Fixture.Test" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1388" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1388.Fixture.BagTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1391" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ANIMAL already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1391.Fixture.Can_discriminate_subclass_on_list_with_lazy_loading_when_used_get" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Fixture2" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ANIMAL already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1391.Fixture2.Can_discriminate_subclass_on_list_with_lazy_loading_when_used_and_person_had_multiple_list" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture2]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1393" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1393.Fixture.CanAvgProjectionOnSqlFunction" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1393.Fixture.CanMaxProjectionOnIdentityProjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1393.Fixture.CanMinProjectionOnIdentityProjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1393.Fixture.CanSumProjectionOnSqlFunction" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1394" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderByPropertyProjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderBySqlProjectionAsc" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderBySqlProjectionDesc" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderBySubqueryProjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderBySubqueryProjectionDesc" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1399" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1399.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1400" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1400.Fixture.DotInStringLiteralsConstant" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1403" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1403.Fixture.Bug" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1405" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1405.Fixture.Bug" executed="True" result="Success" success="True" asserts="7" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1408" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DetachedSubCriteriaTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 98
Value
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 98
Value
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 98
Value]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1408.DetachedSubCriteriaTest.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in DetachedSubCriteriaTest]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1413" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="PagingTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1413.PagingTest.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1419" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Tests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1419.Tests.Bug" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1419.Tests.WithEmptyCollection" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1421" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsEmptyArrayUsingQueryThenDoesNotTrowsNullReferenceException" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsEmptyCollectionUsingQueryThenTrowsArgumentException" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsEmptyGenericCollectionUsingQueryThenDoesNotTrowsNullReferenceException" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsEmptyUsingQueryThenDoesNotTrowsNullReferenceException" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsNullUsingQueryThenTrowsArgumentException" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1427" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1427.Fixture.TestMappingWithJoinElementContainingXmlComments" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1443" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1443.Fixture.WithDefaultValuesInConfiguration" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1443.Fixture.WithDefaultValuesInConfigurationPriorityToMapping" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1443.Fixture.WithDefaultValuesInMapping" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1443.Fixture.WithSpecificValuesInMapping" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1444" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1444.Fixture.Bug" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1447" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1447.Fixture.CanQueryByConstantProjectionWithType" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1464" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1464.Fixture.NoExceptionForDispose" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1478" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1478.Fixture.TestIfColonInStringIsNotInterpretedAsParameterInHQL" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1478.Fixture.TestIfColonInStringIsNotInterpretedAsParameterInSQL" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1483" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1483.Fixture.LoadSubclassFromSecondLevelCache" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1483.Fixture.LoadSubclassFromSecondLevelCacheAsBaseClass" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1487" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaIndexOnId" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific for MsSql2000Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaMultipleIndex" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific for MsSql2000Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaMultipleIndexOnColumn" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific for MsSql2000Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaMultipleUniqueKeys" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific for MsSql2000Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaUniqueOnId" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific for MsSql2000Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1488" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1488.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1488.Fixture.WorkBut" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1490" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1490.Fixture.Also_Works_With_Filter" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1490.Fixture.Can_Translate_Correctly_Without_Filter" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1490.Fixture.Incorrect_SQL_Translated_Params_Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1492" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1492.Fixture.RetrieveEntities" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1495" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1495.Fixture.CreateTest" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1499" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1499.Fixture.CheckIfDetachedCriteriaCanBeUsedOnPropertyRestriction" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1502" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1502.Fixture.OrderProjectionTest" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1507" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ORDERS already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ORDERS already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ORDERS already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1507.Fixture.ExplicitJoin" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1507.Fixture.ImplicitJoinFailingTest" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1508" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1508.Fixture.DoesntThrowExceptionWhenHqlQueryIsGiven" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1508.Fixture.ThrowsExceptionWhenNamedSqlQueryIsGiven" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1508.Fixture.ThrowsExceptionWhenSqlQueryIsGiven" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1515" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1515.Fixture.NoExceptionForMethod" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1515.Fixture.NoExceptionForProperty" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1521" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1521.Fixture.TestForClassWithDefaultSchema" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific test for MsSQL dialects]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1521.Fixture.WithDefaultValuesInConfigurationPriorityToMapping" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific test for MsSQL dialects]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1521.Fixture.WithDefaultValuesInMapping" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific test for MsSQL dialects]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1521.Fixture.WithSpecificValuesInMapping" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific test for MsSQL dialects]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1531" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1531.SampleTest.DeleteParentDeleteChildInCascade" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1531.SampleTest.ReparentingShouldNotFail" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1533" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1533.Fixture.Can_query_using_two_orderby_and_limit_altogether" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1533.Fixture.Can_query_using_two_orderby_and_limit_with_firstresult_only" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1533.Fixture.Can_query_using_two_orderby_and_limit_with_maxresult_only" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1549" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1549.Fixture.CanLoadForEntitiesWithInheritedIds" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1549.Fixture.CanLoadForEntitiesWithTheirOwnIds" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1552" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1552.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1552.Fixture.Paging_with_sql_works_as_expected_with_FirstResult" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1552.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1552.Fixture.Paging_with_sql_works_as_expected_with_FirstResultMaxResult" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1552.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1552.Fixture.Paging_with_sql_works_as_expected_with_MaxResult" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1552.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1553" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="MsSQL" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SnapshotIsolationUpdateConflictTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1553.MsSQL.SnapshotIsolationUpdateConflictTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.NHSpecificTest.NH1553.MsSQL.SnapshotIsolationUpdateConflictTest.UpdateConflictDetectedByNH" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1553.MsSQL.SnapshotIsolationUpdateConflictTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.NHSpecificTest.NH1553.MsSQL.SnapshotIsolationUpdateConflictTest.UpdateConflictDetectedBySQLServer" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1553.MsSQL.SnapshotIsolationUpdateConflictTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1556" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1556.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1556.Fixture.CanOrderByAggregate" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1556.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1574" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="StatelessTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1574.StatelessTest.StatelessManyToOne" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1579" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1579Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1579.NH1579Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1584" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TestFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1584.TestFixture.Load_One_To_One_Composition_For_Joined_Subclass_Succeeds" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1587" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1587.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1593" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1593.Fixture.SchemaUpdateAddsIndexesThatWerentPresentYet" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1594" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1594.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1601" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture1" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture1.TestRefreshWithCount" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture1.TestRefreshWithoutCount" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture1.TestSaveAndLoadWithCount" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture1.TestSaveAndLoadWithoutCount" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Fixture2" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture2.TestRefreshWithThreeCounts" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture2.TestRefreshWithTwoCounts" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture2.TestSaveAndLoadWithTwoCounts" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture2.TestTestSaveAndLoadWithThreeCounts" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1605" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1605.Fixture.SupportTypedefInReturnScalarElements" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1608" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1608.Fixture.AddDoesBoundsChecking" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1608.Fixture.IndexerDoesBoundsChecking" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1609" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1609.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1611OneToOneIdentity" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1611OneToOneIdentityFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1611OneToOneIdentity.NH1611OneToOneIdentityFixture.CanQueryOneToOneWithCompositeId" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1612" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NativeSqlCollectionLoaderFixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 172
year
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 172
year
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 172
year]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadCompositeElementCollectionWithCustomLoader" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadCompositeElementsWithWithComplexHbmAliasInjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadCompositeElementsWithWithCustomAliases" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadCompositeElementsWithWithSimpleHbmAliasInjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadElementCollectionWithCustomLoader" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadElementsWithExplicitColumnMappings" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadElementsWithWithSimpleHbmAliasInjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadEntitiesWithComplexHbmAliasInjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadEntitiesWithExplicitColumnMappings" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadEntitiesWithWithSimpleHbmAliasInjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadEntityCollectionWithCustomLoader" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeQueryWithUnresolvedHbmAliasInjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeScalarQueryWithDefinedResultset" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeScalarQueryWithoutResults" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeScalarQueryWithUndefinedResultset" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeUpdateQueryWithoutResults" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NativeSqlCollectionLoaderFixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1617" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1617.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1617.Fixture.CanUseDataTypeInFormulaWithCriteriaQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1617.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1619" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1619.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1619.Fixture.SavingAndRetrieving" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1619.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1619.Fixture.UsingBooleanPostgreSQLType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1619.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1621" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 69
Sum
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 69
Sum
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 69
Sum]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1621.Fixture.QueryUsingReadonlyProperty" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1632" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 69
Sum
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 69
Sum
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 69
Sum]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.Dispose_session_inside_transaction_scope" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_commiting_items_in_DTC_transaction_will_add_items_to_2nd_level_cache" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_committing_transaction_scope_will_commit_transaction" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_using_DTC_HiLo_knows_to_create_isolated_DTC_transaction" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_using_two_sessions" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_using_two_sessions_with_explicit_flush" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.Will_not_save_when_flush_mode_is_never" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1635" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="1">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1635.Fixture.Test" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1640" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1640.Fixture.FetchJoinShouldNotReturnProxyTest" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1640.Entity#1][SQL: INSERT INTO Entity (Name, Child, Id) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1643" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table EMPLOYEES already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1643.Fixture.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1654" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1654.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1654.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1654.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1665" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1665.Fixture.SupportsHibernateQuotingSequenceName" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1675" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1675.Fixture.ShouldWorkUsingDistinctAndLimits" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1677" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="EntityModeMapCriteria" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1677.EntityModeMapCriteria.EntityModeMapFailsWithCriteria" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1679" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1679.Fixture.UsingExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1679.Fixture.UsingExpressionProjection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1688" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1688.Fixture.UsingExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1688.Fixture.UsingExpressionFunctionProjection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1688.Fixture.UsingExpressionProjection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1689" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1689.SampleTest.ShouldBeAbleToCallGenericMethod" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1691" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Name longer than database column size
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Name longer than database column size
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Name longer than database column size]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1691.Fixture.ComplexNest" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1691.Fixture.NestedComponentCollection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1693" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1693.Fixture.with_filter" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1693.Fixture.without_filter" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1694" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1694.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1694.Fixture.CanOrderByExpressionContainingACommaInAPagedQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1694.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1700" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1700.Fixture.ShouldNotThrowDuplicateMapping" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1706" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="KeyPropertyRefFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1706.KeyPropertyRefFixture.PropertyRefUsesOtherColumn" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1710" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureWithColumnNode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1710.FixtureWithColumnNode.BaseFixture.NotIgnorePrecisionScaleInSchemaExport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithExplicitDefinedType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1710.FixtureWithExplicitDefinedType.BaseFixture.NotIgnorePrecisionScaleInSchemaExport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithHeuristicDefinedType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1710.FixtureWithHeuristicDefinedType.BaseFixture.NotIgnorePrecisionScaleInSchemaExport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithInLineDefinedType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1710.FixtureWithInLineDefinedType.BaseFixture.NotIgnorePrecisionScaleInSchemaExport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1713" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Should be fixed in some way.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1713.Fixture.Can_Save_Money_Column" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Should be fixed in some way.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1713.Fixture.Can_Update_Money_Column" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Should be fixed in some way.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1714" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SimpleReproductionFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1714.SimpleReproductionFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1714.SimpleReproductionFixture.DbCommandsFromEventListenerShouldBeEnlistedInRunningTransaction" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1714.SimpleReproductionFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="UseCaseDemonstrationFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1714.UseCaseDemonstrationFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1714.UseCaseDemonstrationFixture.DbCommandsFromEventListenerShouldBeEnlistedInRunningTransaction" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1714.UseCaseDemonstrationFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1715" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 43
Time
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 43
Time
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 43
Time]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1715.Fixture.TimeSpanLargerThan2h" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1715.Fixture.VerifyDaysShouldBeZeroInSmallTimeSpan" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1716" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 43
Time
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 43
Time
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 43
Time]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1716.Fixture.TimeSpanLargerThan24h" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1716.Fixture.TimeSpanLargerThan2h" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1716.Fixture.TimeSpanNegative" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1716.Fixture.VerifyDaysShouldBeZeroInSmallTimeSpan" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1727" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 117
Value
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 117
Value
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 117
Value]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1727.Fixture.VerifyFilterAndInAndProperty_DoesNotWorkToday" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1727.Fixture.VerifyFilterAndInAndProperty_WorksToday" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1734" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1734.Fixture.ReturnsApropriateTypeWhenSumUsedWithSomeFormula" executed="True" result="Success" success="True" asserts="8" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1741" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1741.Fixture.Bug" description="DetachedNamedQuery should read all mapped parameters when not explicitly set." executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1741.Fixture.Override" description="DetachedNamedQuery should override all mapped parameters when explicitly set." executed="True" result="Success" success="True" asserts="8" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1742" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1742.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1742.Fixture.BugTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1742.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1742.Fixture.WorkingTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1742.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1747" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="JoinTraversalTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1747.JoinTraversalTest.PaymentTableNotContainsFk" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1747.JoinTraversalTest.TraversingBagToJoinChildElementShouldWork" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1756" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1756.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1756.Fixture.SaveTransient_Then_Update" description="Work with AutoFlush on commit" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1756.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1756.Fixture.SaveTransient_Then_Update_Bug" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1756.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1756.Fixture.SaveTransient_Then_Update_Ok" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1756.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1757" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1757.Fixture.MayBeABug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1760" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 78
Value
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 78
Value
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 78
Value]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1760.SampleTest.CanUseCriteria" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in SampleTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1760.SampleTest.TheJoinShouldBeOptional" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in SampleTest]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1763" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1763.SampleTest.CanUseConditionalOnCompositeType" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1773" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1773.Fixture.CustomHQLFunctionsShouldBeRecognizedByTheParser" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1775" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1775.Fixture.BitwiseOperationsShouldBeSupported" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1775.Member#3][SQL: INSERT INTO Member (FirstName, LastName, Roles, Id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1776" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FilterQueryTwiceFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1776.FilterQueryTwiceFixture.Bug" description="Can Query using Session's filter Twice" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1776.FilterQueryTwiceFixture.FilterOnOffOn" description="Executing same query with and without filter and with different filter parameter value." executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1776.FilterQueryTwiceFixture.MultiFilterOnOffOn" description="Executing same query with different filters combinations." executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1783" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1783.SampleTest.DatePropertyShouldBeStoredWithoutTimePart" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1785" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1785.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1785.Fixture.ShouldNotContainJoinWhereNotRequired" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1788" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1788.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1788.Fixture.CanUseSqlTimestampWithDynamicInsert" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1788.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1789" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProxyEqualityProblemTest" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1789.ProxyEqualityProblemTest.TestProxyEqualityProblem" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1789.Cat#2][SQL: INSERT INTO ICat (Name, Type, ID) VALUES (?, 'cat', ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1789.ProxyEqualityProblemTest.TestProxyEqualityWhereItDoesWork" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1789.Cat#2][SQL: INSERT INTO ICat (Name, Type, ID) VALUES (?, 'cat', ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1789.ProxyEqualityProblemTest.TestTheProblemWithCollection" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1789.Cat#2][SQL: INSERT INTO ICat (Name, Type, ID) VALUES (?, 'cat', ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1792" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1792.Fixture.PageWithDetachedCriteriaSubqueryWithOrderBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1792.Fixture.PageWithRawSqlSubqueryWithOrderBy" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ SELECT first 3 this_.Id as Id1428_0_, this_.Name as Name1428_0_ FROM Product this_ WHERE this_.Id in (Select top 5 p.Id from Product p order by Name) and this_.Id > @p0 ]
Positional parameters:  #0>0
[SQL: SELECT first 3 this_.Id as Id1428_0_, this_.Name as Name1428_0_ FROM Product this_ WHERE this_.Id in (Select top 5 p.Id from Product p order by Name) and this_.Id > @p0]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 114
5
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 114
5]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1794" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1794.Fixture.CanQueryOnCollectionThatAppearsOnlyInTheMapping" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1794.Fixture.CanQueryOnPropertyThatOnlyShowsUpInMapping_AsAccessNone" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1796" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1796.Fixture.Merge" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1796.Fixture.SaveOrUpdate" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1801" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1801.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1810" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1810.Fixture.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1812" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AstBug" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1812.AstBug.AstBugBase.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in AstBug]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AstBugBase" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1812.AstBugBase.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in AstBugBase]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ItWorksWithClassicParser" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1812.ItWorksWithClassicParser.AstBugBase.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in ItWorksWithClassicParser]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1813" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1813.Fixture.ContainSQLInInsert" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1813.Fixture.ContainSQLInUpdate" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1821" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1821.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1821.Fixture.ShouldNotRemoveLineBreaksFromSqlQueries" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1821.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1831" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1831.Fixture.CorrectPrecedenceForBitwiseOperators" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select documentty0_.oid as oid1447_, documentty0_.SystemAction as SystemAc2_1447_ from documents_documenttype documentty0_ where documentty0_.SystemAction&@p0=@p0 ]
  Name:sysAct - Value:Denunciation
[SQL: select documentty0_.oid as oid1447_, documentty0_.SystemAction as SystemAc2_1447_ from documents_documenttype documentty0_ where documentty0_.SystemAction&@p0=@p0]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 155
&
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 155
&]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1834" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1834.Fixture.OneToManyPropertyWithFormulaNodeShouldWorkLikeFormulaAttrib" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1835" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1835.Fixture.ColumnTypeBinaryBlob" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1836" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1836.Fixture.AliasToBeanTransformerShouldApplyCorrectlyToMultiQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1836.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1837" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 44
Date
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 44
Date
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 44
Date]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1837.Fixture.ExecutesOneQueryWithUniqueResultWithChildCriteriaGeneric" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1837.Fixture.ExecutesOneQueryWithUniqueResultWithChildCriteriaNonGeneric" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1837.Fixture.ExecutesOneQueryWithUniqueResultWithCriteriaGeneric" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1837.Fixture.ExecutesOneQueryWithUniqueResultWithCriteriaNonGeneric" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1849" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 31
IDENTITY
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 31
IDENTITY
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 31
IDENTITY]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1849.Fixture.ExecutesCustomSqlFunctionContains" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1850" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1850.Fixture.CanGetQueryDurationForBatch" executed="True" result="Failure" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: 3
  But was:  2
]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1850.Fixture.CanGetQueryDurationForDelete" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1850.Fixture.CanGetQueryDurationForSelect" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1857" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FullJoinTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1857.FullJoinTest.TestFullJoin" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1859" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1859.SampleTest.NativeQueryWithTwoComments" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1864" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1864.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1864.Fixture.ExecuteQuery" executed="False" result="NotRunnable">
                            <reason>
                              <message><![CDATA[No arguments were provided]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1864.Fixture.FilterOnOffOn" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1864.Fixture.FilterQueryTwice" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1867" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AddMappingTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1867.AddMappingTest.NestedWithinGeneric" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1867.AddMappingTest.NestedWithinNonGeneric" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1868" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1868.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1868.Fixture.FilterOnOffOn" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1868.Fixture.FilterQuery3" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1868.Fixture.FilterQueryTwice" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1869" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1869.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1877" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1877.Fixture.CanGroupByWithPropertyName" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1877.Fixture.CanGroupByWithSqlFunctionProjection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1891" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1891.Fixture.FormulaEscaping" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.NHSpecificTest.NH1891.A#bab66269-14eb-4313-81db-9e910169e017][SQL: SELECT a0_.id as id1471_0_, a0_.FormulaConstraint as FormulaC2_1471_0_, (select count(*) from b where b."Name" = a0_.FormulaConstraint) as formula58_0_ FROM a a0_ WHERE a0_.id=?]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -206
Column unknown
B.Name
At line 1, column 103
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -206
Column unknown
B.Name
At line 1, column 103
TearDown : NHibernate.Exceptions.GenericADOException : could not execute query
[ select a0_.id as id1471_, a0_.FormulaConstraint as FormulaC2_1471_, (select count(*) from b where b."Name" = a0_.FormulaConstraint) as formula58_ from a a0_ ]
[SQL: select a0_.id as id1471_, a0_.FormulaConstraint as FormulaC2_1471_, (select count(*) from b where b."Name" = a0_.FormulaConstraint) as formula58_ from a a0_]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -206
Column unknown
B.Name
At line 1, column 99
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -206
Column unknown
B.Name
At line 1, column 99]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1895" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 14
[
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 14
[
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 14
[]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1895.SampleTest.SaveTest" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in SampleTest]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1898" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1898.SampleTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1898.SampleTest.TypeOfParametersShouldBeSetCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1898.SampleTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1899" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 57
Value
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 57
Value
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 57
Value]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1899.SampleTest.ShouldNotThrowOnSaveUpdateCopy" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in SampleTest]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1904" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1904.Fixture.ExecuteQuery" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1905" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1905.Fixture.Query" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1907" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1907.Fixture.CanSetParameterQueryByName" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1907.Fixture.CanSetParameterQueryByPosition" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1908" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1908.Fixture.QueryPropertyInBothFilterAndQuery" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1908.Fixture.QueryPropertyInBothFilterAndQueryUsingWith" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1908ThreadSafety" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ORDERS already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ORDERS already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ORDERS already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1908ThreadSafety.Fixture.UsingFiltersIsThreadSafe" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1911" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1911.Fixture.ConditionalAggregateProjection" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1911.LogEvent#2][SQL: INSERT INTO LogEvent (Name, Level, Id) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1914" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 72
Value
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 72
Value
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 72
Value]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1914.Fixture.CascadeInsertAssigned" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1920" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table CUSTOMERS already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table CUSTOMERS already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table CUSTOMERS already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1920.Fixture.Can_Query_With_Collection_Size_Condition" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1920.Fixture.Can_Query_Without_Collection_Size_Condition" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1922" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1922.Fixture.CanExecuteQueryOnStatelessSessionUsingDetachedCriteria" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1927" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1927.Fixture.CriteriaWithEagerFetch" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1927.Fixture.CriteriaWithoutEagerFetch" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1927.Fixture.HqlWithEagerFetch" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1927.Fixture.HqlWithoutEagerFetch" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1928" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1928.Fixture.SqlCommentAfterBeginningOfLine" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1928.Fixture.SqlCommentAtBeginningOfLastLine" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1928.Fixture.SqlCommentAtBeginningOfLine" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1938" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1938.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1938.Fixture.Can_Query_By_Example_Case_Insensitive" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1938.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1939" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1939.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1939.Fixture.Can_Parameterise_Auxiliary_Database_Objects" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1939.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1941" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1941.Fixture.CanOverrideStringEnumGetValue" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1948" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1948.Fixture.CanUseDecimalScaleZero" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1959" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1959.Fixture.StartWithEmptyDoAddAndRemove" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1959.Fixture.StartWithEmptyDoAddAndRemoveAt" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1963" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CacheableQueryOnByteArray" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1963.CacheableQueryOnByteArray does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1963.CacheableQueryOnByteArray.Should_be_able_to_do_cacheable_query_on_byte_array_field" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1963.CacheableQueryOnByteArray does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1963.CacheableQueryOnByteArray.Should_work_when_query_is_not_cachable" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1963.CacheableQueryOnByteArray does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1969" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1969.Fixture.TestMappedTypeCriteria" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1969.EntityWithTypeProperty#2][SQL: INSERT INTO EntityWithTypeProperty (typeValue, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1969.Fixture.TestMappedTypeHQL" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1969.EntityWithTypeProperty#2][SQL: INSERT INTO EntityWithTypeProperty (typeValue, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1969.Fixture.TestNonMappedTypeCriteria" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1969.EntityWithTypeProperty#2][SQL: INSERT INTO EntityWithTypeProperty (typeValue, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1969.Fixture.TestNonMappedTypeHQL" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1969.EntityWithTypeProperty#2][SQL: INSERT INTO EntityWithTypeProperty (typeValue, id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1978" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AliasTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 14
[
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 14
[
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 14
[]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1978.AliasTest.ShouldReturnPlanFromEmployee" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in AliasTest]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1981" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1981.Fixture.CanGroupWithParameter" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select article0_.Longitude/@p0 as col_0_0_ from Article article0_ group by article0_.Longitude/@p0 ]
  Name:divisor - Value:30
[SQL: select article0_.Longitude/@p0 as col_0_0_ from Article article0_ group by article0_.Longitude/@p0]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Invalid expression in the select list (not contained in either an aggregate function or the GROUP BY clause)
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Invalid expression in the select list (not contained in either an aggregate function or the GROUP BY clause)]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1985" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1985.SampleTest.AttemptToDeleteImmutableObjectShouldThrow" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1989" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithDifferentRegionsFuture" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithMixedCacheableAndNonCacheableFuture" executed="True" result="Failure" success="False" asserts="3">
                            <failure>
                              <message><![CDATA[  query results should not come from cache
  Expected: null
  But was:  <NHibernate.Test.NHSpecificTest.NH1989.User>
]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithMixedCacheRegionsFuture" executed="True" result="Failure" success="False" asserts="3">
                            <failure>
                              <message><![CDATA[  query results should not come from cache
  Expected: null
  But was:  <NHibernate.Test.NHSpecificTest.NH1989.User>
]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithSingleCacheableFuture" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithSingleCacheableQueryFuture" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1990" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1990.Fixture.FetchingBySubqueryFilterParameters" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1990.Fixture.FetchingBySubqueryFilterParametersAndPositionalParameters" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1990.Fixture.FetchingBySubqueryFilterParametersAndPositionalParametersAndNamedParameters" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2000" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2000.SampleTest.TestSessionGetEnableFilter" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2003" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2003.Fixture.ShouldCreateNotNullIdColumn" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2009" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2009.Fixture.PropertyRefToJoinedTable" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2011" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ORDERS already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ORDERS already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ORDERS already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2011.Fixture.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2020" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2020.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2020.Fixture.ISQLExceptionConverter_gets_called_if_batch_size_enabled" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2020.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2030" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2030.Fixture.GetTypeWithLenShouldBeThreadSafe" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2031" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="HqlModFuctionForMsSqlTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2031.HqlModFuctionForMsSqlTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2031.HqlModFuctionForMsSqlTest.TheModuleOperationShouldAddParenthesisToAvoidWrongSentence" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2031.HqlModFuctionForMsSqlTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2037" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2037.Fixture.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2041" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2041.Fixture.WhenJoinTableContainComponentsThenColumnsShouldBeInJoinedTable" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2043" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2043.Fixture.Test" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2044" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2044.SampleTest.IgnoreCaseShouldWorkWithCharCorrectly" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2055" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2055.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2055.Fixture.CanCreateAndDropSchema" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2055.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2056" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ADDRESS already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ADDRESS already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ADDRESS already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2056.Fixture.CanUpdateInheritedClass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2057" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2057.Fixture.WillCloseWhenUsingDTC" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2061" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ORDERS already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ORDERS already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ORDERS already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2061.Fixture.merge_with_many_to_many_inside_component_that_is_null" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2065" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2065.Fixture.GetGoodErrorForDirtyReassociatedCollection" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2069" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2069.Fixture.ProxyRemainsUninitializedWhenReferencingIdProperty" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2074" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2074.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2074.Fixture.CanQueryOnPropertyUsingUnicodeToken" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2074.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2077" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2077.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2077.Fixture.CanExecuteMultipleQueriesUsingNativeSQL" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2077.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2092" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2092.Fixture.ConstrainedLazyLoadedOneToOneUsingCastleProxy" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2093" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2093.Fixture.CanUseFieldInterceptingProxyAsHQLArgument" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2093.Fixture.NHibernateProxyHelperReturnsCorrectType" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2094" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2094.Fixture.CanAccessInitializedPropertiesOutsideOfSession" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2094.Fixture.WhenAccessLazyPropertiesOutsideOfSessionThenThrows" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2094.Fixture.WhenAccessNoLazyPropertiesOutsideOfSessionThenNotThrows" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2102" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2102.Fixture.EntityWithConstrainedLazyLoadedOneToOneShouldNotGenerateFieldInterceptingProxy" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2111" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2111.Fixture.SyncRootOnLazyLoad" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.Test.NHSpecificTest.NH2111.A.LazyItems#1][SQL: INSERT INTO LazyItems (a_id, item_id, id) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2112" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2112.Fixture.Test" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2113" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2113.Fixture.ShouldNotEagerLoadKeyManyToOneWhenOverridingGetHashCode" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2118" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2118.Fixture.CanGroupByWithoutSelect" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2138" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2138.Fixture.AfterAddAppingShouldHaveAResultsetWithEntityName" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2147" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DefaultBatchSize" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2147.DefaultBatchSize.WhenDefaultAndNoSpecificThenUseDefault" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2147.DefaultBatchSize.WhenDefaultAndSpecificThenUseSpecific" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2147.DefaultBatchSize.WhenNoDefaultAndNoSpecificThenUse1" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2148" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BugFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2148.BugFixture.CanCallLazyPropertyEntityMethod" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2166" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2166.Fixture.WhenUniqueResultShouldCallConverter" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2188" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AppDomainWithMultipleSearchPath" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2188.AppDomainWithMultipleSearchPath.WhenSerchInMultiplePathsThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2189" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2189.Fixture.FutureCriteriaEagerLoadUsesAlreadyLoadedEntity" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH2189.TeamMember#b18baa65-74c4-4457-aac5-9e910169eb12][SQL: INSERT INTO TeamMember (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2189.Fixture.FutureCriteriaReturnsExistingProxy" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH2189.TeamMember#a86dcc5c-1eab-4920-b6c7-9e910169eb1e][SQL: INSERT INTO TeamMember (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2189.Fixture.FutureQueryEagerLoadUsesAlreadyLoadedEntity" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH2189.TeamMember#fb6b17a0-4d4e-4f50-9c9c-9e910169eb28][SQL: INSERT INTO TeamMember (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2189.Fixture.FutureQueryReturnsExistingProxy" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH2189.TeamMember#70de31b4-fed4-4ecb-b8ef-9e910169eb35][SQL: INSERT INTO TeamMember (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2192" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2192.Fixture.HqlIsThreadsafe_UsingPool" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH2192.ContentItem#32770][SQL: INSERT INTO ContentItem (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2192.Fixture.HqlIsThreadsafe_UsingThreads" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH2192.ContentItem#32773][SQL: INSERT INTO ContentItem (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2195" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SQLiteMultiCriteriaTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest.MultiCriteriaQueriesWithIntsShouldExecuteCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest.MultiCriteriaQueriesWithStringsShouldExecuteCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest.SingleCriteriaQueriesWithIntsShouldExecuteCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest.SingleCriteriaQueriesWithStringsShouldExecuteCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2201" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2201.Fixture.CanUseMutliCriteriaAndFetchSelect" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.NotSupportedException : The driver NHibernate.Driver.FirebirdClientDriver does not support multiple queries.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2202" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2202.Fixture.CanProjectEmployeeFromAddressUsingCriteria" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2203" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2203.Fixture.QueryShouldWork" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2207" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Demostration of external issue]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2207.SampleTest.Dates_Before_1753_Should_Not_Insert_Null" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Demostration of external issue]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2207.SampleTest.WithoutUseNHSqlDataProviderWorkProperly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Demostration of external issue]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2208" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Filter" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2208.Filter.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2224" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2224.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2224.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2224.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2228" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2228.Fixture.WhenStaleObjectStateThenMessageContainsEntity" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2230" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2230.Fixture.CanCreacteRetrieveDeleteComponentsWithPrivateReferenceSetterToParent" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2234" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2234.Fixture.CanQueryViaLinq" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2242" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FormulaTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2242.FormulaTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2242.FormulaTest.FormulaOfEscapedDomainClassShouldBeRetrievedCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2242.FormulaTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2242.FormulaTest.FormulaOfUnescapedDomainClassShouldBeRetrievedCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2242.FormulaTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2243" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2243.Fixture.ShouldCreateSchemaWithDefaultClause" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2244" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2244.Fixture.LinqComponentTypeEquality" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2245" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2245.Fixture.TestDelete_OptimisticLockNone" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2251" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.EnlistingFirstThePaginationAndThenTheRowCountDoesNotThrows" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.FuturePagedHql" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.HqlWithOffsetAndLimit" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.MultiplePagingParametersInSingleQuery" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.WhenUseFutureSkipTakeThenNotThrow" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2257" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2257.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2257.Fixture.InformixUsingDuplicateParameters" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2257.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2266" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2266.Fixture.WhenBuildSessionFactoryThenThrows" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2278" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2278.Fixture.CustomIdBag" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.Test.NHSpecificTest.NH2278.CustomA.Items#1][SQL: INSERT INTO Items (a_id, item_id, id) VALUES (@p0, @p1, @p2)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2279" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2279.Fixture.CartesianProduct" executed="True" result="Success" success="True" asserts="7" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2279.Fixture.IdBagIndexTracking" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2280" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="InvalidSqlTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2280.InvalidSqlTest.CompositeKeyTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2287" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2287.Fixture.DotInStringLiteralsConstant" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2288" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2288.Fixture.TestForClassWithDefaultSchema" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific test for MsSQL dialects]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2288.Fixture.WithDefaultValuesInConfigurationPriorityToMapping" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific test for MsSQL dialects]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2288.Fixture.WithDefaultValuesInMapping" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific test for MsSQL dialects]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2288.Fixture.WithSpecificValuesInMapping" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Specific test for MsSQL dialects]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2293" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2293.Fixture.WhenQueryHasJustAfromThenThrowQuerySyntaxException" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2294" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2294.Fixture.WhenQueryHasJustAWhereThenThrowQuerySyntaxException" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[External issue. The bug is inside RecognitionException of Antlr.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2302" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 170
(
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 170
(
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 170
(]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.BlobSqlType" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.BlobWithLength" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.BlobWithoutLength" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.StringHugeLength" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.StringSqlType" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2303" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2303.Fixture.IndependentSubclassElementCanExtendSubclass" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2313" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2313.Fixture.WhenLoadWorngMappingThenMessageShouldContaingWrongClassName" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2322" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2322.Fixture.ShouldNotThrowWhenCommitingATransaction" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2324" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BulkUpdateWithCustomCompositeType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2324.BulkUpdateWithCustomCompositeType.ShouldAllowBulkupdateWithCompositeUserType" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2328" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2328.Fixture.AnyIs_HqlRequiresNumberIn" description="Is this right? - the HQL translation should turn the class-string to an int, not the user?" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2328.Fixture.AnyIs_Linq" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[VisitTypeBinaryExpression generates HQL tree with string constant, but DB has a number]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2328.Fixture.AnyIs_QueryOver" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2331" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Nh2331Test" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2331.Nh2331Test.DetachedCriteriaCorrelatedQueryExplodes" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Nh2331Test]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2341" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2341.Fixture.WhenSaveInstanceOfConcreteInheritedThenNotThrows" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : cannot perform multi-table deletes using dialect not supporting temp tables
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2344" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2344.Fixture.CoalesceShouldWork" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2361" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ANIMAL already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2361.Fixture.WhenDeleteMultiTableHierarchyThenNotThrows" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2362" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.MappingException : Dialect does not support sequences]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2362.Fixture.CanParseMultipleGroupBy" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2362.Fixture.CanParseMultipleGroupByAndSelect" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2374" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH2374Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2374.NH2374Fixture.OneToOne_with_EntityMode_Map" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2374.NH2374Fixture.OneToOne_with_EntityMode_Poco" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2378" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2378.Fixture.ShortEntityCanBeQueryCorrectlyUsingLinqProvider" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2386" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Test" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2386.Test.TheTest" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH2386.Organisation#26c85728-9157-49cf-a11d-1205b65a421b][SQL: INSERT INTO tblTrnOrganisation (OrganisationId) VALUES (?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : validation error for column RVERSION, value "*** null ***"
  ----> FirebirdSql.Data.Common.IscException : validation error for column RVERSION, value "*** null ***"]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2392" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2392.Fixture.CompositeUserTypeSettability" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2394" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2394.Fixture.LinqUserTypeEquality" executed="True" result="Success" success="True" asserts="21" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2409" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2409.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2412" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table CUSTOMERS already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table CUSTOMERS already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table CUSTOMERS already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2412.Fixture.OrderByUsesLeftJoin" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2420" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2420.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2441" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2441.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2441.Fixture.LinqQueryBooleanSQLite" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2441.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2459" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Test" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2459.Test.IsTypeOperator" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2467" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH2467Test" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2467.NH2467Test.ShouldNotThrowOnFuturePaging" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2467.NH2467Test.ShouldNotThrowOnFuturePagingUsingHql" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2467.NH2467Test.ShouldNotThrowOnReversedFuturePaging" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2467.NH2467Test.ShouldNotThrowOnReversedFuturePagingUsingHql" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH247" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH247.Fixture.CommonLiteralFunctions" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH247.LiteralDescription#2][SQL: INSERT INTO LiteralDescription (Description, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH247.Fixture.FirebirdLiteralFunctions" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH247.LiteralDescription#8][SQL: INSERT INTO LiteralDescription (Description, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH247.Fixture.InsensitiveLikeCriteria" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH247.LiteralDescription#14][SQL: INSERT INTO LiteralDescription (Description, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2470" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Class1_Class2_Tests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test0" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test1" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test2" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test3" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test4" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test5" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2484" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2484.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2484.Fixture.TestPersistenceOfClassWithSerializableType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2484.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2484.Fixture.TestPersistenceOfClassWithUnknownSerializableType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2484.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2507" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ANIMAL already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2507.Fixture.QueryEnumerationWithCheckedArithmeticOverflowTest" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2507.Fixture.QueryEnumerationWithUncheckedArithmeticOverflowTest" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH251" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CustomAccessFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH251.CustomAccessFixture.ConfigurationIsOK" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH257" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH257.Fixture.ManyToManyTableCreationScript" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH266" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH266.Fixture.BaseClassLoad" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH266.Fixture.SpecificSubclass" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="UserFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH266.UserFixture.WhereAttribute" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH266.User#2][SQL: INSERT INTO nh_266_u (Name, is_active, Id) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH276" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH276.Fixture.ManyToOneId" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="JoinedSubclass" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.NHSpecificTest.NH276.JoinedSubclass.Fixture.ManyToOneIdProperties" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH280" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH280.Fixture.ConstInSelect" executed="True" result="Success" success="True" asserts="14" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH280.Fixture.TokenUnknow" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH283" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH283.Fixture.ForeignKeyNames" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH295" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="JoinedSubclassFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.JoinedSubclassFixture.SubclassFixture.List" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.JoinedSubclassFixture.SubclassFixture.LoadByIDFailure" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.JoinedSubclassFixture.SubclassFixture.LoadByIDFailureSameSession" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubclassFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.SubclassFixture.List" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.SubclassFixture.LoadByIDFailure" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.SubclassFixture.LoadByIDFailureSameSession" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH296" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH296.Fixture.CRUD" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH298" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IndexedBidirectionalOneToManyTest" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH298.IndexedBidirectionalOneToManyTest.RemoveAtWorksCorrectly" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH298.Category#2][SQL: INSERT INTO Category (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH298.IndexedBidirectionalOneToManyTest.SubItemMovesCorrectly" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH298.Category#2][SQL: INSERT INTO Category (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH309" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH309.Fixture.RemoveNodeFromNodesCollection" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH309.Node#2][SQL: INSERT INTO nh309_node (name, parentnodeid, nodeid) VALUES (?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH315" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH315.Fixture.SaveClient" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH317" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH317.Fixture.ProxySerialization" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH318" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH318.Fixture.DeleteWithNotNullPropertySetToNull" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH335" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH335.Fixture.Delete" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH335.Fixture.SelectSubclass" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH335.Fixture.SelectSuperclass" executed="True" result="Success" success="True" asserts="11" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH345" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH345.Fixture.OrderByCompositeProperty" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH350" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH350.Fixture.Loading" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH364" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH364.Fixture.IdBagIdentity" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH364.Fixture.IdBagWithCompositeElementThatContainsAManyToOne_Delete" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH364.Product#5][SQL: INSERT INTO Product364 (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH364.Fixture.IdBagWithCompositeElementThatContainsAManyToOne_Insert" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH364.Product#2][SQL: INSERT INTO Product364 (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH364.Fixture.IdBagWithCompositeElementThatContainsAManyToOne_Update" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH364.Product#2][SQL: INSERT INTO Product364 (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH369" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH369.Fixture.KeyManyToOneAndNormalizedPersister" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH372" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.ComponentFieldNotInserted" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.ComponentFieldNotInserted_Dynamic" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.ComponentFieldNotUpdated" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.ComponentFieldNotUpdated_Dynamic" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.SubComponentFieldNotInserted" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.SubComponentFieldNotInserted_Dynamic" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.SubComponentFieldNotUpdated" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.SubComponentFieldNotUpdated_Dynamic" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH386" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH386.Fixture.Query" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH392" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH392.Fixture.UnsavedMinusOneNoNullReferenceException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH401" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH401.Fixture.SaveOrUpdateCopy" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH440" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH440.Fixture.StoreAndLookup" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH440.Fixture.StoreWithLinksAndLookup" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH440.Fixture.StoreWithLinksAndLookupWithQueryFromFruit" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH464" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH464.Fixture.CompositeElement" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH467" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH467.Fixture.WhereClauseInManyToOneNavigation" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH473" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH473.Fixture.ChildItemsGetInOrderWhenUsingFetchJoin" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH473.Child#3][SQL: INSERT INTO Child (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH473.Fixture.ChildItemsGetInOrderWhenUsingFetchJoinUniqueResult" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH473.Child#7][SQL: INSERT INTO Child (Name, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH479" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH479.Fixture.SaveOrUpdateCopyTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NH47Fixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="Namespace" name="NH480" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH480.Fixture.CheckIII" executed="True" result="Success" success="True" asserts="7" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH496" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH496.Fixture.CRUD" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH508" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH508.Fixture.Bug" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH521" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH521.Fixture.AttachUninitProxyCausesInit" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH523" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH523.Fixture.SaveOrUpdateCopyLazy" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH525" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH525.Fixture.DoSomething" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH534" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH534.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH548" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH548.Fixture.ParentPropertyOnCacheHit" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH552" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH552.Fixture.DeleteAndResave" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH555" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH555.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH593" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH593.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH606" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH606.Fixture.InvalidGenericMapping" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH607" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH607.Fixture.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH623" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH623.Fixture.WhereAttributesOnBags" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH637" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH637.Fixture.MultiColumnBetween" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH642" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH642.Fixture.MissingGetter" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH642.Fixture.MissingSetter" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH643" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH643.Fixture.CacheAndLazyCollections" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH645" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="HqlFunctionWithAstHqlParser" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser.HQLFunctionFixtureBase.SimpleWhere" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser.HQLFunctionFixtureBase.SimpleWhereWithAnotherClause" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser.HQLFunctionFixtureBase.SimpleWhereWithAnotherClause2" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="HqlFunctionWithClassicParser" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithClassicParser does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithClassicParser.HQLFunctionFixtureBase.SimpleWhere" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithClassicParser does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithClassicParser.HQLFunctionFixtureBase.SimpleWhereWithAnotherClause" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithClassicParser does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithClassicParser.HQLFunctionFixtureBase.SimpleWhereWithAnotherClause2" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithClassicParser does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH662" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH662.Fixture.UseDerivedClass" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH681" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH681.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH687" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH687.Fixture.GetQueryTest" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH693" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH693.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH693.Fixture.SpaceTableName" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH704" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH704.Fixture.ReAttachCatTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH706" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH706.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH712" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH712.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH719" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH719.Fixture.CacheLoadTest" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH720" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH720.Fixture.CacheTest" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH732" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH732.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH732.Fixture.CaseInsensitiveId" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH732.Fixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH734" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH734.Fixture.LimitProblem" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH739" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH739.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH742" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH742.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH750" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH750.Fixture.DeviceOfDrive" executed="True" result="Success" success="True" asserts="7" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH776" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH776.Fixture.ProxiedOneToOneTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH826" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH826.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH830" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AutoFlushTestFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH830.AutoFlushTestFixture.AutoFlushTest" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH845" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH845.Fixture.HbmOrdererForgetsMappingFilesWithoutClassesIfExtendsIsUsed" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH851" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH851.Fixture.ConstructorNotFound" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH864" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH864.Fixture.OptimisticLocking" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH873" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH873.Fixture.CacheDisabled" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH883" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH883.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH887" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH887.Fixture.PropertyRefReferencingParentProperty" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH892" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH892.Fixture.SelectWithWhereClause" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH898" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH898Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH898.NH898Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH901" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH901.Fixture.EmptyValueTypeComponent" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH901.Fixture.ReplaceValueTypeComponentWithSameValueDoesNotMakeItDirty" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH930" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH930Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH930.NH930Fixture.DuplicateConstraints" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH940" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH940Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH940.NH940Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH952" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH952Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH952.NH952Fixture.OrderingAddResources" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH958" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH958Fixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH958.NH958Fixture.SaveOrUpdateCopyWithAny1" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH958Fixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH958.NH958Fixture.SaveOrUpdateCopyWithAny2" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in NH958Fixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH962" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH962Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH962.NH962Fixture.Bug" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH965" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH965Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH965.NH965Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH980" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH980Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH980.NH980Fixture.IdGeneratorShouldUseQuotedTableName" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH995" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH995.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NodeFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.NodeFixture.InsertNodes" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.NHSpecific.Node.DestinationNodes#1][SQL: INSERT INTO node_link (from_node_id, to_node_id) VALUES (@p0, @p1)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OptimisticConcurrencyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.OptimisticConcurrencyFixture.DeleteOptimistic" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.NHSpecificTest.OptimisticConcurrencyFixture.StaleObjectStateCheckWithEntityPersisterAndOptimisticLock" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.OptimisticConcurrencyFixture.StaleObjectStateCheckWithNormalizedEntityPersister" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Properties" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CompositePropertyRefTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.AccountsOuterJoin" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in CompositePropertyRefTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.AccountsOuterJoinVerifyInitialization" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in CompositePropertyRefTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.AddressBySequentialSelect" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in CompositePropertyRefTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.AddressOuterJoin" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in CompositePropertyRefTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.MappingOuterJoin" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in CompositePropertyRefTest]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DynamicEntityTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.DynamicEntityTest.CanFetchByProperty" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in DynamicEntityTest]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ProxyValidator" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.Interface" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.InternalField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.MultipleErrorsReported" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualEvent" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualInternal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualProtected" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualProtectedInternal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.PrivateConstructor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.PublicField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.ValidClassTest" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.VirtualPublicImplementsInterface" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SessionIdLoggingContextTest" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="TestFixture" name="SetFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.SetFixture.DisassembleAndAssemble" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleComponentFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.SimpleComponentFixture.TestInsert" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.NHSpecificTest.SimpleComponentFixture.TestLoad" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnsavedValueFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.UnsavedValueFixture.TestCRUD" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UserTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.UserTypeFixture.InsertNull" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="VersionTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.VersionTest.UnsavedNegativeIntOrShort" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ObjectAssert" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.ObjectAssert.TestIDictionaryEqual" executed="True" result="Success" success="True" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Ondelete" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="JoinedSubclassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Ondelete.JoinedSubclassFixture.JoinedSubclassCascade" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OnDeleteFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Ondelete.OnDeleteFixture.JoinedSubclass" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ParentChildFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Ondelete.ParentChildFixture.ParentChildCascade" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Operations" executed="True" result="Inconclusive" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="MergeFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.DeleteAndMerge" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeBidiForeignKeyOneToOne" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeBidiPrimayKeyOneToOne" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Need some more investigation about id sync.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeDeepTree" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeDeepTreeWithGeneratedId" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeManaged" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeManyToManyWithCollectionDeference" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeStaleVersionFails" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeTree" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeTreeWithGeneratedId" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.NoExtraUpdatesOnMerge" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.NoExtraUpdatesOnMergeVersioned" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.NoExtraUpdatesOnMergeVersionedWithCollection" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.NoExtraUpdatesOnMergeWithCollection" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.PersistThenMergeInSameTxnWithTimestamp" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.PersistThenMergeInSameTxnWithVersion" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.RecursiveMergeTransient" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Operations.MergeFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Pagination" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CustomDialectFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Test is for SQL dialect only]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.Pagination.CustomDialectFixture.LimitFirst" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Test is for SQL dialect only]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Pagination.CustomDialectFixture.LimitFirstMultiCriteria" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Test is for SQL dialect only]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PaginationFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Pagination.PaginationFixture.PagingWithLock_NH2255" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Pagination.PaginationFixture.PagTest" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="PolymorphicGetAndLoad" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="PolymorphicGetAndLoadTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetBaseClassUsingInterfaceFromSessionCacheThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetBaseClassUsingInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetClassUsingInterfaceOfMultippleHierarchyThenThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetInheritedClassUsingInterfaceFromSessionCacheThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetInheritedClassUsingInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadBaseClassUsingInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadClassUsingInterfaceOfMultippleHierarchyThenThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadInheritedClassUsingInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadInheritedClassUsingInterfaceThenShouldAllowNarrowingProxy" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadInterfaceThenShouldAllowNarrowingProxy" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenSaveDeleteBaseClassCastedToInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ProjectionFixtures" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ProjectionFixtures.Fixture.AggregatingHirearchyWithCount" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.ProjectionFixtures.Fixture.ErrorFromDBWillGiveTheActualSQLExecuted" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ProjectionFixtures.Fixture.LimitingResultSetOnQueryThatIsOrderedByProjection" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ProjectionFixtures.Fixture.QueryingWithParemetersAndParaemtersInOrderBy" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="PropertyRef" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="KeyPropertyRefFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyRef.KeyPropertyRefFixture.PropertyRefUsesOtherColumn" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="PropertyTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BackFieldAccessorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.BackFieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.PropertyTest.BackFieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicSetterExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.BasicSetterExceptionFixture.SetInvalidType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.PropertyTest.BasicSetterExceptionFixture.SetValueArgumentException" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldAccessorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldCamelCaseFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldCamelCaseMUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseMUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseMUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldCamelCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldGetterFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.CamelCaseMUnderscoreNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.CamelCaseNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.CamelCaseUnderscoreNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.LowerCaseUnderscoreNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.NoNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.PascalCaseMUnderscoreNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldLowerCaseFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldLowerCaseFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldLowerCaseFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldLowerCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldLowerCaseUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldLowerCaseUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldPascalCaseMUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldPascalCaseMUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldPascalCaseMUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldPascalCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldPascalCaseUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldPascalCaseUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldSetterExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldSetterExceptionFixture.SetInvalidType" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterCamelCaseFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterCamelCaseMUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseMUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseMUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterCamelCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterLowerCaseFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterLowerCaseFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterLowerCaseFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterLowerCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterLowerCaseUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterLowerCaseUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterPascalCaseMUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterPascalCaseMUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterPascalCaseMUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterPascalCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterPascalCaseUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterPascalCaseUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReadonlyAccessorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.ReadonlyAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PropertyTest.ReadonlyAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ProxyTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="NHibernateProxyHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ProxyTest.NHibernateProxyHelperFixture.GetClassOfProxy" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="QueryTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AggregateReturnTypesFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.AggregateReturnTypesFixture.Avg" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.QueryTest.AggregateReturnTypesFixture.Max" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.QueryTest.AggregateReturnTypesFixture.Min" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.QueryTest.AggregateReturnTypesFixture.Sum" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CountFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.CountFixture.Default" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.CountFixture.Overridden" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DetachedQueryFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.CopyToTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.QueryTest.Foo#11][SQL: INSERT INTO Foos (Name, Description, IntValue, Id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.ExecutableNamedQuery" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.QueryTest.Foo#26][SQL: INSERT INTO Foos (Name, Description, IntValue, Id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.ExecutableQuery" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.QueryTest.Foo#41][SQL: INSERT INTO Foos (Name, Description, IntValue, Id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.OverrideTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.QueryTest.Foo#56][SQL: INSERT INTO Foos (Name, Description, IntValue, Id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.PropertiesSet" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.QueryTest.Foo#71][SQL: INSERT INTO Foos (Name, Description, IntValue, Id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.ResultTransformer" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.QueryTest.Foo#86][SQL: INSERT INTO Foos (Name, Description, IntValue, Id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.Serializable" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.QueryTest.Foo#101][SQL: INSERT INTO Foos (Name, Description, IntValue, Id) VALUES (?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultiCriteriaFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanAddCriteriaWithKeyAndRetrieveResultsWithKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanAddDetachedCriteriaWithKeyAndRetrieveResultsWithKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanExecuteMultiplyQueriesInSingleRoundTrip" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanExecuteMultiplyQueriesInSingleRoundTrip_InTransaction" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanGetMultiQueryFromSecondLevelCache" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanGetResultInAGenericList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanNotAddCriteriaWithKeyThatAlreadyExists" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanNotAddDetachedCriteriaWithKeyThatAlreadyExists" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanNotRetrieveCriteriaResultWithUnknownKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanNotRetrieveDetachedCriteriaResultWithUnknownKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanUseSecondLevelCacheWithPositionalParameters" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanUseSetParameterList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanUseWithParameterizedQueriesAndLimit" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.TwoMultiQueriesWithDifferentPagingGetDifferentResultsWhenUsingCachedQueries" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleQueriesFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanAddIQueryWithKeyAndRetrieveResultsWithKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanExecuteMultiplyQueriesInSingleRoundTrip" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanGetMultiQueryFromSecondLevelCache" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanGetResultsInAGenericList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanNotAddCriteriaWithKeyThatAlreadyExists" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanNotRetrieveCriteriaResultWithUnknownKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanSpecifyParameterOnMultiQueryWhenItIsNotUsedInAllQueries" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanSpecifyParameterOnMultiQueryWhenItIsNotUsedInAllQueries_MoreThanOneParameter" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanUseSecondLevelCacheWithPositionalParameters" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanUseSetParameterList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanUseWithParameterizedQueriesAndLimit" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.ExecutingCriteriaThroughMultiCriteriaTransformsResults" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.ExecutingCriteriaThroughMultiQueryTransformsResults" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.ExecutingCriteriaThroughMultiQueryTransformsResults_When_setting_on_multi_query_directly" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.NH_1085_WillGiveReasonableErrorIfBadParameterName" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.NH_1085_WillIgnoreParametersIfDoesNotAppearInQuery" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.TwoMultiQueriesWithDifferentPagingGetDifferentResultsWhenUsingCachedQueries" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Driver NHibernate.Driver.FirebirdClientDriver does not support multi-queries]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NamedParametersFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.NamedParametersFixture.TestMissingHQLParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.NamedParametersFixture.TestNullNamedParameter" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported; The AST parser can guess the type.]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PositionalParametersFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestMissingHQLParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestMissingHQLParameters2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestNoPositionalParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestNullIndexedParameter" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestPositionOutOfBounds" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryParametersFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.QueryParametersFixture.ValidateFailureDifferentLengths" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.QueryParametersFixture.ValidateNullParameters" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.QueryTest.QueryParametersFixture.ValidateOk" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ReflectionOptimizerTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LcgFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ReflectionOptimizerTest.LcgFixture.NoGetter" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ReflectionOptimizerTest.LcgFixture.NoSetter" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SecondLevelCacheTests" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ScalarQueryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.ScalarQueryFixture.QueryCacheInvalidation" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.ScalarQueryFixture.ShouldHitCacheUsingNamedQueryWithProjection" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.ScalarQueryFixture.ShouldHitCacheUsingQueryWithProjection" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.ScalarQueryFixture.SimpleProjections" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SecondLevelCacheTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.CachedQueriesHandlesEntitiesParametersCorrectly" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.DeleteItemFromCollectionThatIsInTheSecondLevelCache" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.InsertItemToCollectionOnTheSecondLevelCache" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.SecondLevelCacheWithCriteriaQueries" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.SecondLevelCacheWithCriteriaQueriesForItemWithCollections" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.SecondLevelCacheWithHqlQueries" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.SecondLevelCacheWithHqlQueriesForItemWithCollections" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SessionCacheTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.SessionCacheTest.LoadAfterNotExists" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.Test.SessionCacheTest.MakeCollectionTransient" executed="True" result="Success" success="True" asserts="6" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SqlCommandTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SqlDeleteBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlDeleteBuilderFixture.DeleteSqlStringTest" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlInsertBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlInsertBuilderFixture.Commented" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlInsertBuilderFixture.InsertSqlStringTest" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlInsertBuilderFixture.MixingParametersAndValues" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlSelectBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlSelectBuilderFixture.SelectStringSqlTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlSimpleSelectBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlSimpleSelectBuilderFixture.SimpleSelectStringSqlTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlStringBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringBuilderFixture.Index" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringBuilderFixture.InsertAndAdd" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringBuilderFixture.RemoveAt" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlStringFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Append" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Count" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.EndsWith" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.EndsWithEmptyString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.EndsWithParameter" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringParameterInOrderBy" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringSimple" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringSimpleEndsWithParameter" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringSimpleParameterInMiddle" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithFormulaProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithFormulaPropertyWithSubselect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithOrderByInSubselect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithParenthesisOnlyInWhere" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithSubselectInWhere" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithTwoFormulas" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.IndexOf" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.IndexOfNonCompacted" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Insert" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.NoSubstringStartingWithLast" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.ParameterPropertyShouldReturnNewInstances" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Parse" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Replace" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.StartsWith" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.StartsWithEmptyString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Substring" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Substring2Complex" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.SubstringComplex" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.SubstringStartingWithLast" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.SubstringStartingWithLastAndParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.SubstringStartingWithLastMultiplePossibilities" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.TrimAllParam" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.TrimAllString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.TrimBeginParamEndString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.TrimBeginStringEndParam" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlStringParameterFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringParameterFixture.EqualsSameType" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlUpdateBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlUpdateBuilderFixture.UpdateStringSqlTest" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TemplateFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.TemplateFixture.OrderByMultiColumn" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.TemplateFixture.OrderBySingleColumn" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.TemplateFixture.ReplaceWithDialectQuote" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SqlTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Custom" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Firebird" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="FireBirdTest" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                            </failure>
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest.CustomSQLSupportTest.HandSQL" executed="True" result="Failure" success="False" asserts="0">
                                <failure>
                                  <message><![CDATA[TestFixtureSetUp failed in FireBirdTest]]></message>
                                </failure>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest.CustomStoredProcSupportTest.EntityStoredProcedure" executed="True" result="Failure" success="False" asserts="0">
                                <failure>
                                  <message><![CDATA[TestFixtureSetUp failed in FireBirdTest]]></message>
                                </failure>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest.CustomStoredProcSupportTest.ParameterHandling" executed="True" result="Failure" success="False" asserts="0">
                                <failure>
                                  <message><![CDATA[TestFixtureSetUp failed in FireBirdTest]]></message>
                                </failure>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest.CustomStoredProcSupportTest.ScalarStoredProcedure" executed="True" result="Failure" success="False" asserts="0">
                                <failure>
                                  <message><![CDATA[TestFixtureSetUp failed in FireBirdTest]]></message>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="MsSQL" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MSSQLTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest.CustomSQLSupportTest.HandSQL" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest.CustomStoredProcSupportTest.EntityStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest.CustomStoredProcSupportTest.ParameterHandling" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest.CustomStoredProcSupportTest.ScalarStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="MySQL" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MySQLTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest.CustomSQLSupportTest.HandSQL" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest.CustomStoredProcSupportTest.EntityStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest.CustomStoredProcSupportTest.ParameterHandling" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest.CustomStoredProcSupportTest.ScalarStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Oracle" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="OracleCustomSQLFixture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.CustomSQLSupportTest.HandSQL" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.CustomStoredProcSupportTest.EntityStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.CustomStoredProcSupportTest.ParameterHandling" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.CustomStoredProcSupportTest.ScalarStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.RefCursorOutStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Identity" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="MsSQL" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MSSQLIdentityInsertWithStoredProcsTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.SqlTest.Identity.MsSQL.MSSQLIdentityInsertWithStoredProcsTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Identity.MsSQL.MSSQLIdentityInsertWithStoredProcsTest.IdentityInsertWithStoredProcsTest.InsertUsesStoredProc" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Identity.MsSQL.MSSQLIdentityInsertWithStoredProcsTest does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Query" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GeneralTest" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.AutoDetectAliasing" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.CompositeIdJoinsFailureExpected" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.FailOnNoAddEntityOrScalar" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.MappedAliasStrategy" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.MixAndMatchEntityScalar" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.ParameterList" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.ResultSetMappingDefinition" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.ScalarValues" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.SQLQueryInterface" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in GeneralTest]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SelfReferencingCollectionLoadTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.SqlTest.Query.SelfReferencingCollectionLoadTest.LoadCollection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlTypeFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlTest.SqlTypeFactoryFixture.GetSqlTypeWithPrecisionScale" description="Should cache constructed types" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Stateless" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="StatelessSessionFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.CanGetImplementor" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.CreateUpdateReadDelete" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.HavingDetachedCriteriaThenCanGetExecutableCriteriaFromStatelessSession" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.HqlBulk" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.InitId" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.Refresh" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.WhenSetTheBatchSizeThenSetTheBatchSizeOfTheBatcher" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.NotSupportedException : No batch size was defined for the session factory, batching is disabled. Set adonet.batch_size = 1 to enable batching.]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StatelessWithRelationsFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ANIMAL already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ANIMAL already exists]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.Stateless.StatelessWithRelationsFixture.ShouldWorkLoadingComplexEntities" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in StatelessWithRelationsFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Stats" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SessionStatsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Stats.SessionStatsFixture.Can_use_cached_query_that_return_no_results" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Stats.SessionStatsFixture.SessionStatistics" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StatsFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Stats.StatsFixture.CollectionFetchVsLoad" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.Stats.StatsFixture.IncrementQueryExecutionCount_WhenExplicitQueryIsExecuted" executed="True" result="Error" success="False" asserts="2">
                        <failure>
                          <message><![CDATA[System.NotSupportedException : The driver NHibernate.Driver.FirebirdClientDriver does not support multiple queries.
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Stats.StatsFixture.QueryStatGathering" executed="True" result="Success" success="True" asserts="18" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Subclass" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="EnumDiscriminator" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="EnumDiscriminatorFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Subclass.EnumDiscriminator.EnumDiscriminatorFixture.CanConvertOneTypeToAnother" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Subclass.EnumDiscriminator.EnumDiscriminatorFixture.PersistsDefaultDiscriminatorValue" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubclassExtendsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Subclass.SubclassExtendsFixture.SubclassFixture.HqlClassKeyword" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Subclass.SubclassExtendsFixture.SubclassFixture.TestCRUD" executed="True" result="Success" success="True" asserts="15" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubclassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Subclass.SubclassFixture.HqlClassKeyword" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Subclass.SubclassFixture.TestCRUD" executed="True" result="Success" success="True" asserts="15" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SubclassFilterTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DiscrimSubclassFilterTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SubclassFilterTest.DiscrimSubclassFilterTest.FiltersWithSubclass" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.SubclassFilterTest.Employee#2][SQL: INSERT INTO SPerson (Name, Company, Region, Title, dept, mgr_id, person_id) VALUES (?, ?, ?, ?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedSubclassFilterTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SubclassFilterTest.JoinedSubclassFilterTest.FiltersWithSubclass" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SubselectFetchTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SubselectFetchFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.ManyToManyCriteriaJoin" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchCriteria" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchHql" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchNamedParam" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchPosParam" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchWithLimit" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SystemTransactions" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="TransactionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionFixture.CanUseSystemTransactionsToCommit" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TransactionNotificationFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.AfterBegin" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.Complete" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.NoTransaction" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.OneTransactionScopesInsideOneSession" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.Rollback" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.TwoTransactionScopesInsideOneSession" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TestTestCase" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.TestTestCase.TestExecuteStatement" executed="True" result="Success" success="True" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Tools" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="hbm2ddl" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="SchemaExportTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AutoQuoteFixture" executed="True" result="Inconclusive" success="False" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.AutoQuoteFixture.WhenCalledExplicitlyThenTakeInAccountHbm2DdlKeyWordsSetting" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.AutoQuoteFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.AutoQuoteFixture.WhenUpdateCalledExplicitlyThenTakeInAccountHbm2DdlKeyWordsSetting" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.AutoQuoteFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithColumnTagFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.WithColumnTagFixture.ShouldCreateSchemaWithDefaultClause" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SchemaMetadataUpdaterTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SchemaMetadataUpdaterFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.AutoQuoteTableAndColumnsAtStratup" executed="True" result="Success" success="True" asserts="6" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.AutoQuoteTableAndColumnsAtStratupIncludeKeyWordsImport" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.CanRetrieveReservedWords" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.CanWorkWithAutoQuoteTableAndColumnsAtStratup" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.ExplicitAutoQuote" executed="True" result="Success" success="True" asserts="6" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.UpdateReservedWordsInDialect" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SchemaUpdate" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MigrationFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaUpdate.MigrationFixture.SimpleColumnAddition" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaUpdate.MigrationFixture.SimpleColumnReplace" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SchemaValidator" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SchemaValidateFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaValidator.SchemaValidateFixture.ShouldNotVerifyModifiedTable" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaValidator.SchemaValidateFixture.ShouldVerifySameTable" executed="True" result="Success" success="True" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TransactionTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="TransactionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.CommandAfterTransactionShouldWork" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.CommitAfterDisposeThrowsException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.EnlistAfterDisposeDoesNotThrowException" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.RollbackAfterDisposeThrowsException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.SecondTransactionShouldntBeCommitted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.WasCommittedOrRolledBack" executed="True" result="Success" success="True" asserts="19" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TransactionNotificationFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.AfterBegin" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.Commit" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.NoTransaction" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.Rollback" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TransformTests" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AliasToBeanResultTransformerFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TransformTests.AliasToBeanResultTransformerFixture.WorksWithStruct" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TransformTests.AliasToBeanResultTransformerFixture.WorkWithOutPublicParameterLessCtor" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.PropertyNotFoundException : Could not find a setter for property 'SOMETHING' in class 'NHibernate.Test.TransformTests.AliasToBeanResultTransformerFixture+WithOutPublicParameterLessCtor']]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TransformTests.AliasToBeanResultTransformerFixture.WorkWithPublicParameterLessCtor" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.PropertyNotFoundException : Could not find a setter for property 'SOMETHING' in class 'NHibernate.Test.TransformTests.AliasToBeanResultTransformerFixture+PublicParameterLessCtor']]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TypedManyToOne" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="TypedManyToOneTest" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table ADDRESS already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table ADDRESS already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table ADDRESS already exists]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.TypedManyToOne.TypedManyToOneTest.TestCreateQuery" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in TypedManyToOneTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypedManyToOne.TypedManyToOneTest.TestCreateQueryNull" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in TypedManyToOneTest]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TypeParameters" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DefinedTypeForIdFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypeParameters.DefinedTypeForIdFixture.HasParametrizedId" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypeParameters.DefinedTypeForIdFixture.Save" description="Ensure the parametrized generator is working." executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypeParameterTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypeParameters.TypeParameterTest.Loading" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.TypeParameters.Widget#2][SQL: INSERT INTO STRANGE_TYPED_OBJECT (VALUE_ONE, VALUE_TWO, VALUE_THREE, VALUE_FOUR, Str, ID) VALUES (?, ?, ?, ?, ?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypeParameters.TypeParameterTest.Save" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TypesTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BinaryBlobTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.BinaryBlobTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryBlobTypeFixture.ReadWriteLargeBlob" executed="True" result="Success" success="True" asserts="10001" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryBlobTypeFixture.ReadWriteZeroLen" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BinaryTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.BinaryTypeFixture.Equals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryTypeFixture.InsertNull" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryTypeFixture.InsertZeroLength" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="111" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BooleanTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.BooleanTypeFixture.Equals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.BooleanTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ByteTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.ByteTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.ByteTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CharClassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.CharClassFixture.ReadWrite" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CurrencyTypeFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 72
$
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 72
$
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 72
$]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.CurrencyTypeFixture.Equals" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CurrencyTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.CurrencyTypeFixture.ReadWrite" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CurrencyTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.CurrencyTypeFixture.ShouldBeMoneyType" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CurrencyTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.CurrencyTypeFixture.UnsavedValue" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CurrencyTypeFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTime2TypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DateTime2TypeFixture.DeepCopyNotNull" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DateTime2TypeFixture.EqualityShouldIgnoreKindAndNotIgnoreMillisecond" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.DateTime2TypeFixture.Next" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.DateTime2TypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTimeTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DateTimeTypeFixture.DeepCopyNotNull" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DateTimeTypeFixture.EqualityShouldIgnoreKindAndMillisecond" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.DateTimeTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DateTimeTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DateTypeFixture.ReadWriteBaseValue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.DateTypeFixture.ReadWriteNormal" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.DateTypeFixture.ShouldBeDateType" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This test does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTypeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DateTypeTest.WhenNoParameterThenDefaultValueIsBaseDateValue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.DateTypeTest.WhenSetParameterNullThenNotThrow" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.DateTypeTest.WhenSetParameterThenDefaultValueIsParameterValue" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DecimalTypeFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -842
Precision must be from 1 to 18]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DecimalTypeFixture.Equals" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DecimalTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.DecimalTypeFixture.ReadWrite" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DecimalTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.DecimalTypeFixture.UnsavedValue" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in DecimalTypeFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DoubleTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DoubleTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DoubleTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EntityTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.EntityTypeFixture.Compare" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.TypesTest.EntityTypeFixture.Equals" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EnumCharTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.CanBeUsedAsDiscriminator" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.ReadFromLoad" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.ReadFromQueryUsingChar" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.ReadFromQueryUsingString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.ReadFromQueryUsingValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EnumStringTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.EnumStringTypeFixture.ReadFromLoad" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumStringTypeFixture.ReadFromQuery" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithColumnNode" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithColumnNode.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithExplicitDefinedType" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithExplicitDefinedType.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithHeuristicDefinedType" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithHeuristicDefinedType.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithInLineDefinedType" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithInLineDefinedType.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithSqlType" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not fixed yet.]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithSqlType.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GenericEnumStringTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.GenericEnumStringTypeFixture.ReadFromLoad" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.GenericEnumStringTypeFixture.ReadFromQuery" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GenericEnumTypeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.GenericEnumTypeTest.TheNameShouldBeFullNameAndAssembly" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GuidTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.GuidTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.GuidTypeFixture.GetGuidWorksWhenUnderlyingTypeIsRepresentedByString" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.TypesTest.GuidTypeFixture.GuidInWhereClause" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.GuidTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Int16TypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.Int16TypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.Int16TypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Int32TypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.Int32TypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.Int32TypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Int64TypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.Int64TypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.Int64TypeFixture.NullableWrapperDirty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.Int64TypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LocalDateTimeTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.LocalDateTimeTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PersistentEnumTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.CanWriteAndReadUsingBothHeuristicAndExplicitGenericDeclaration" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.EqualsFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.EqualsFalseSameUnderlyingValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.EqualsTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.UsageInHqlSelectNew" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.UsageInHqlSelectNewInvalidConstructor" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SByteTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.SByteTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.SByteTypeFixture.ObjectToSQLString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.SByteTypeFixture.StringToObject" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SerializableTypesFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.SerializableTypesFixture.AllEmbeddedTypesAreMarkedSerializable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.SerializableTypesFixture.EachEmbeddedBasicTypeIsSerializable" executed="True" result="Success" success="True" asserts="43" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StringClobTypeFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.StringClobTypeFixture.InsertNullValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.StringClobTypeFixture.LongString" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.TypesTest.StringClobClass#32769][SQL: INSERT INTO sclob (clob_, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -303
feature is not supported
BLOB and array data types are not supported for move operation
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -303
feature is not supported
BLOB and array data types are not supported for move operation]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.StringClobTypeFixture.ReadWrite" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.TypesTest.StringClobClass#32770][SQL: INSERT INTO sclob (clob_, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : Dynamic SQL Error
SQL error code = -303
feature is not supported
BLOB and array data types are not supported for move operation
  ----> FirebirdSql.Data.Common.IscException : Dynamic SQL Error
SQL error code = -303
feature is not supported
BLOB and array data types are not supported for move operation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StringTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.StringTypeFixture.InsertNullValue" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TicksTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TicksTypeFixture.Comparer" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.TicksTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TicksTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeAsTimeSpanTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimeAsTimeSpanTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TimeAsTimeSpanTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeSpanFixture2" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimeSpanFixture2.SavingAndRetrieving" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeSpanTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimeSpanTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TimeSpanTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeSpanTypeFixture2" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimeSpanTypeFixture2.SavingAndRetrieving" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimestampTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimestampTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TimestampTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypeFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.GetGuidSingleton" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.GetNullableGeneric" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.GetStringWithDiffLength" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.HoldQualifiedTypes" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.WhenUseEnumThenReturnGenericEnumType" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.WhenUseNullableEnumThenReturnGenericEnumType" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UriTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.UriTypeFixture.AutoDiscoverFromNetType" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.UriTypeFixture.InsertNullValue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.UriTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UtcDateTimeTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.UtcDateTimeTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XDocTypeFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentException : Dialect does not support DbType.Xml
Parameter name: typecode]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.XDocTypeFixture.AutoDiscoverFromNetType" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in XDocTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.XDocTypeFixture.InsertNullValue" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in XDocTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.XDocTypeFixture.ReadWrite" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in XDocTypeFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XmlDocTypeFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentException : Dialect does not support DbType.Xml
Parameter name: typecode]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.XmlDocTypeFixture.AutoDiscoverFromNetType" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in XmlDocTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.XmlDocTypeFixture.InsertNullValue" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in XmlDocTypeFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.XmlDocTypeFixture.ReadWrite" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in XmlDocTypeFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Unconstrained" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SimplyManyToOneIgnoreTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Unconstrained.SimplyManyToOneIgnoreTest.Unconstrained" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnconstrainedNoLazyTest" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedNoLazyTest.ManyToOneUpdateFalse" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnconstrainedNoLazyTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedNoLazyTest.Unconstrained" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnconstrainedNoLazyTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedNoLazyTest.UnconstrainedNoCache" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnconstrainedNoLazyTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedNoLazyTest.UnconstrainedOuterJoinFetch" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnconstrainedNoLazyTest]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnconstrainedTest" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedTest.UnconstrainedNoLazyTest.ManyToOneUpdateFalse" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnconstrainedTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedTest.UnconstrainedNoLazyTest.Unconstrained" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnconstrainedTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedTest.UnconstrainedNoLazyTest.UnconstrainedNoCache" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnconstrainedTest]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedTest.UnconstrainedNoLazyTest.UnconstrainedOuterJoinFetch" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnconstrainedTest]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Unionsubclass" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="UnionSubclassFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table EMPLOYEES already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table EMPLOYEES already exists]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.NestedUnionedSubclasses" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnionSubclassFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclass" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnionSubclassFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclassCollection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnionSubclassFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclassFetchMode" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnionSubclassFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclassManyToOne" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnionSubclassFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclassOneToMany" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in UnionSubclassFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Unionsubclass2" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="UnionSubclassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Unionsubclass2.UnionSubclassFixture.QuerySubclassAttribute" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Unionsubclass2.UnionSubclassFixture.UnionSubclass" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UserCollection" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Parameterized" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ParameterizedUserCollectionTypeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UserCollection.Parameterized.ParameterizedUserCollectionTypeFixture.BasicOperation" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UserCollectionTypeTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UserCollection.UserCollectionTypeTest.BasicOperation" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.UserCollection.Email#2][SQL: INSERT INTO Email (Address, Id) VALUES (?, ?)]
  ----> FirebirdSql.Data.FirebirdClient.FbException : arithmetic exception, numeric overflow, or string truncation
string right truncation
  ----> FirebirdSql.Data.Common.IscException : arithmetic exception, numeric overflow, or string truncation
string right truncation
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UtilityTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AssemblyQualifiedTypeNameFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.Construct" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ConstructWithNullAssembly" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ConstructWithNullType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.Equals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ToStringComplex" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ToStringEscaped" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ToStringSimple" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicFormatterFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.BasicFormatterFixture.StringWithNestedDelimiters" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EnumerableExtensionsTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AnyExtensionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.AnyExtensionTests.WhenDisposableListThenCallDispose" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.AnyExtensionTests.WhenEmptyListThenReturnFalse" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.AnyExtensionTests.WhenNoEmptyListThenReturnTrue" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FirstExtensionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstExtensionTests.WhenEmptyThenThrowsInvalidOperation" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstExtensionTests.WhenHasElementsThenReturnFirst" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstExtensionTests.WhenNullThenThenThrows" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FirstOrNullExtensionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstOrNullExtensionTests.WhenEmptyThenReturnNull" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstOrNullExtensionTests.WhenHasElementsThenReturnFirst" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstOrNullExtensionTests.WhenNullThenThenThrows" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExpressionsHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ExpressionsHelperFixture.DecodeMemberAccessExpression" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IdentityMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.AddNoHashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.AddValueTypeException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ConcurrentEntitiesModification" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ConcurrentEntries" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ContainsDiffObjectWithEquals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ContainsSameObjectByRef" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ContainsSameObjectWithDiffEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.Count" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.Keys" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.SetItemChangedHashCodeTwice" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.SetItemsEqualHashCodeDiffIdentity" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IdentityMapSequencedFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.AddNoHashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.AddValueTypeException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ConcurrentEntitiesModification" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ConcurrentEntries" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ContainsDiffObjectWithEquals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ContainsSameObjectByRef" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ContainsSameObjectWithDiffEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.Count" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.Keys" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.SetItemChangedHashCodeTwice" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.SetItemsEqualHashCodeDiffIdentity" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedEnumerableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableFixture.WrapsMultiple" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableFixture.WrapsMultipleBreak" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableFixture.WrapsSingle" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableFixture.WrapsSingleBreak" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedEnumerableGenericFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableGenericFixture.WrapsMultiple" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableGenericFixture.WrapsMultipleBreak" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableGenericFixture.WrapsSingle" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableGenericFixture.WrapsSingleBreak" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LinkedHashMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Add" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Clear" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Contains" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.ContainsValue" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.CopyTo" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.FirstKeyFirstValue" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumerator" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumeratorEmpty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumeratorModifyExceptionFromAdd" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumeratorModifyExceptionFromRemove" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumeratorModifyExceptionFromUpdate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Keys" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.LastKeyLastValue" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Remove" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Serialization" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Values" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LRUMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.GetEntrySet" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.PutAndRemove" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.PutWithNoSizeLimit" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.PutWithSizeLimit" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.RemoveEmpty" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertiesHelperTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenInvalidBoolValueThenUseDefault" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenInvalidInt32ValueThenUseDefault" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenInvalidInt64ValueThenUseDefault" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenValidBoolValueThenValue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenValidInt32ValueThenValue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenValidInt64ValueThenValue" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.GetConstantValueEnum" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.GetGenericMethodFrom" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.InheritedInterfaceOverridesEquals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.InheritedInterfaceOverridesGetHashCode" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.NoTypeFoundReturnsNull" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.OverridesEquals" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.OverridesGetHashCode" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.SystemTypes" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.TryGetMethod" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.TypeFoundInNotLoadedAssembly" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectionHelperIsMethodOfTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenCustomTypeMatchThenTrue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenDeclaringTypeMatchThenTrue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenNoMatchThenFalse" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenNullMethodInfoThenThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenNullTypeThenThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericDefinitionAndMatchThenTrue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericImplementedAbstractAndMatchGenericInterfaceDefinitionThenTrue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericImplementedAbstractAndMatchThenTrue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericImplementedInterfaceAndMatchGenericInterfaceDefinitionThenTrue" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericImplementedInterfaceAndMatchThenTrue" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectionHelperTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGenericGetMethodForNullThenThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGenericMethodOfClassThenReturnGenericDefinition" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGetMethodForNullThenThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGetPropertyForBoolThenReturnPropertyInfo" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGetPropertyForNullThenThrows" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGetPropertyThenReturnPropertyInfo" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenNoGenericMethodOfClassThenReturnDefinition" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenStaticGenericMethodThenReturnGenericDefinition" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenStaticNoGenericMethodThenReturnDefinition" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SafetyEnumerableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.SafetyEnumerableFixture.MixedCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SafetyEnumerableFixture.MixedWithNulls" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SafetyEnumerableFixture.RecyclingCollection" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SequencedHashMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Add" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Clear" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Contains" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.ContainsKey" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.ContainsValue" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.CopyTo" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Count" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.FirstKey" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.FirstValue" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumerator" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumeratorEmpty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumeratorModifyExceptionFromAdd" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumeratorModifyExceptionFromRemove" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumeratorModifyExceptionFromUpdate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Item" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Keys" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.LastKey" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.LastValue" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Remove" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Serialize" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Values" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.ValuesEmpty" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SingletonEnumerableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.SingletonEnumerableFixture.DifferentEnumeratorInEachRequest" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SingletonEnumerableFixture.ShouldWorkAsEnumerator" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SingletonEnumerableFixture.ShouldWorkInForeach" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SoftLimitMRUCacheFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.SoftLimitMRUCacheFixture.DontFillUp" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StringHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.CantCountQuotes" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.CountUnquotedParams" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GenerateAliasForGenericTypeName" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetClassnameFromFQClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetClassnameFromFQType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetClassnameFromGenericFQClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetClassnameFromGenericType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetFullClassNameForGenericType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IsBackticksEnclosed" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.PurgeBackticksEnclosing" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.Qualify" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.QualifyArray" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThreadSafeDictionaryFixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="TestFixture" name="TypeNameParserFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ComplexNestedWithGeneric" description="Parser multiple nested classes with a generics." executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.CustomArray" description="Should parse arrays of custom types" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.NH1736" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.NH1822" description="Parse with new lines" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseComplexGenericType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseComplexGenericTypeName" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseFullAssemblyName" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseGenericTypeName" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseGenericTypeNameWithDefaultNamespaceUnused" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseGenericTypeNameWithDefaults" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseInvalidEscape" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseNestedWithinGeneric" description="Parser multiple nested classes with a generic in the middle." executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseQualified" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseSimple" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseTrims" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseUnmatchedBracket" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not a big problem because the next type request will throw the exception]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseUnmatchedEscapedBracket" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultAssembly" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultAssemblyUnused" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultNamespaceAndAssembly" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultNamespaceNoAssembly" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultNamespaceUnused" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithEscapes" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.SystemArray" description="Should parse arrays of System types" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WeakHashtableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.Basic" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.IsSerializable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.Iteration" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.IterationAfterGC" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.RetrieveNonExistentItem" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.Scavenging" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.WeakReferenceGetsFreedButHashCodeRemainsConstant" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.WeakRefWrapperEquals" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="VersionTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Db" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DbVersionFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.VersionTest.Db.DbVersionFixture.CollectionNoVersion" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[  owner version was incremented
  Expected: True
  But was:  False

TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.VersionTest.Db.DbVersionFixture.CollectionVersion" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.StaleObjectStateException : Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect): [NHibernate.Test.VersionTest.Db.User#1]
TearDown : NUnit.Framework.AssertionException : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="MsSQL" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ComplexDomainFixture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.VersionTest.Db.MsSQL.ComplexDomainFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.ComplexDomainFixture.NH1685" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.VersionTest.Db.MsSQL.ComplexDomainFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="GeneratedBinaryVersionFixture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture.ShouldChangeAfterUpdate" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture.ShouldCheckStaleState" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture.ShouldRetrieveVersionAfterFlush" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture does not apply to NHibernate.Dialect.FirebirdDialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="VersionFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[NHibernate.HibernateException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.FirebirdClient.FbException : unsuccessful metadata update
Table PERSON already exists
  ----> FirebirdSql.Data.Common.IscException : unsuccessful metadata update
Table PERSON already exists]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.VersionTest.VersionFixture.CollectionNoVersion" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in VersionFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.VersionTest.VersionFixture.CollectionVersion" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in VersionFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.VersionTest.VersionFixture.VersionShortCircuitFlush" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in VersionFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="UnitTesting" executed="True" result="Success" success="True" asserts="0">
            <results>
              <test-suite type="TestFixture" name="StringTokenizerFixture" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.NotSoSimpleWithDelimiters" executed="True" result="Success" success="True" asserts="14" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.NotSoSimpleWithoutDelimiters" executed="True" result="Success" success="True" asserts="6" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.OnlyDelimitersWithDelimiters" executed="True" result="Success" success="True" asserts="6" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.OnlyDelimitersWithoutDelimiters" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.SimpleStringWithDelimiters" executed="True" result="Success" success="True" asserts="4" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.SimpleStringWithoutDelimiters" executed="True" result="Success" success="True" asserts="3" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>